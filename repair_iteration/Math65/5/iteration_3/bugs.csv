bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.max(remainder,    i);    }    	non-compiled	[CE]  '.class'  expected	161	None	replace
2	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  return  chiSquare;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  return  chiSquare;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    j    	non-compiled	[CE]  not  a  statement	151	None	replace
3	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  0,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  0,  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  0,  residual);	  double    chiSquare    =    Math.sqrt(remainder,    i);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	94	None	replace
4	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  i  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  i  +  1);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  i  +  1);	  double    chiSquare    =    Math.sqrt(remainder,    i);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	94	None	replace
5	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  not  a  statement	68	None	replace
6	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	117	None	replace
7	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  residual);	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	117	None	replace
8	[BUG]  [BUGGY]  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remainder	117	None	replace
9	[BUG]  [BUGGY]  return  residual  +  1;  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  cannot  find  symbol  residual  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  1;  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  1;  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  residual	117	None	replace
10	[BUG]  [BUGGY]  return  chiSquare  +  residualsWeights;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  residualsWeights;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  residualsWeights;	  return    chiSquare    +    price;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	24	None	replace
11	[BUG]  [BUGGY]  return  chiSquare  +  residual.length;  [CE]  cannot  find  symbol  residual  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  residual.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  residual.length;	  return    chiSquare    +    price;    	non-compiled	[CE]  cannot  find  symbol  residual	24	None	replace
12	[BUG]  [BUGGY]  return  chiSquare  +  residualsWidth;  [CE]  cannot  find  symbol  residualsWidth  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  residualsWidth;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  residualsWidth;	  return    chiSquare    +    price;    	non-compiled	[CE]  cannot  find  symbol  residualsWidth	24	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	13	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  0;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	13	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  0;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  remaining	13	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	13	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  residuals.length;	  return    this.period;    	compilable	  [FE]  AssertionFailedError  	54	1	replace
18	[BUG]  [BUGGY]  return  residuals.length;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals.length;	  return    this.period;    	compilable	  [FE]  AssertionFailedError  	54	1	replace
19	[BUG]  [BUGGY]  return  residualsWeights  /  chiSquare;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residualsWeights  /  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residualsWeights  /  chiSquare;	  return    chiSquare    /    residualsWeights;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	17	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  residualsWeights.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  /  residualsWeights.length;	  return    chiSquare    /    residualsWeights;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
21	[BUG]  [BUGGY]  return  chiSquare  /  residualsWeights.length;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  residualsWeights.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  residualsWeights.length;	  return    chiSquare    /    residualsWeights;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
22	[BUG]  [BUGGY]  return  chiSquare  *  residualsWeights;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  residualsWeights;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  residualsWeights;	  return    chiSquare    /    residualsWeights;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	17	None	replace
23	[BUG]  [BUGGY]  remaining  *=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  *=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  *=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    	non-compiled	[CE]  ';'  expected	86	None	replace
24	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    	non-compiled	[CE]  not  a  statement	86	None	replace
25	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
26	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  jF);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	28	None	replace
27	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  jF);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	28	None	replace
28	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition,  jF);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(redefinition,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	28	None	replace
29	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(period,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(period,  jF);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(period,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	28	None	replace
30	[BUG]  [BUGGY]  remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
31	[BUG]  [BUGGY]  remainder  >  1)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  1)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  1)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
32	[BUG]  [BUGGY]  return  chiSquare  *  residual;  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  residual;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  residual;	  return    chiSquare    /    result;    	non-compiled	[CE]  cannot  find  symbol  residual	19	None	replace
33	[BUG]  [BUGGY]  return  chiSquare  +  cost  *  residual;  [CE]  cannot  find  symbol  residual  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost  *  residual;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  cost  *  residual;	  return    chiSquare    +    cost;    	non-compiled	[CE]  cannot  find  symbol  residual	21	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  cost;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  *  cost;	  return    chiSquare    +    cost;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
35	[BUG]  [BUGGY]  return  chiSquare  *  cost;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  cost;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  cost;	  return    chiSquare    +    cost;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
36	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +  2;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +  2;	  return    chiSquare    +    2;    chiSquare    +    2;    	non-compiled	[CE]  not  a  statement	32	None	replace
37	[BUG]  [BUGGY]  chiSquare  =  chiSquare  +  2;  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  chiSquare  +  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  chiSquare  +  2;	  return    chiSquare    +    2;    chiSquare    +    2;    	non-compiled	[CE]  missing  return  statement	32	None	replace
38	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +  1;	  return    chiSquare    +    2;    chiSquare    +    2;    	non-compiled	[CE]  not  a  statement	32	None	replace
39	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  residual);	  double    chiSquare    =    Math.sqrt(period);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	92	None	replace
40	[BUG]  [BUGGY]  return  chiSquare  *  2;  chiSquare  *  2;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2;  chiSquare  *  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    2;    chiSquare  *  2;	  	non-compiled	[CE]  not  a  statement	146	None	add
41	[BUG]  [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.sqrt(remaining);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    2;    double  chiSquare  =  Math.sqrt(remaining);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	146	None	add
42	[BUG]  [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.min(remaining,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.min(remaining,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    2;    double  chiSquare  =  Math.min(remaining,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	146	None	add
43	[BUG]  [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.sqrt(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    2;    double  chiSquare  =  Math.sqrt(remainder);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	146	None	add
44	[BUG]  [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.min(remaining,  chiSquare  *  2);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.min(remaining,  chiSquare  *  2);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    2;    double  chiSquare  =  Math.min(remaining,  chiSquare  *  2);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	146	None	add
45	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  residuals[i];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  residual  *  /  residuals[i];  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  residual  *  /  residuals[i];	  chiSquare    +=    residual    *    /    residualsWeights[i];    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
46	[BUG]  [BUGGY]  chiSquare  +=  residual  *  residual  /  residuals[i];  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  residual  *  residual  /  residuals[i];  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  residual  *  residual  /  residuals[i];	  chiSquare    +=    residual    *    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  residual	122	None	replace
47	[BUG]  [BUGGY]  chiSquare  +=  residual  *  remaining  /  residuals[i];  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  residual  *  remaining  /  residuals[i];  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  residual  *  remaining  /  residuals[i];	  chiSquare    +=    residual    *    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  residual	122	None	replace
48	[BUG]  [BUGGY]  chiSquare  +=  residual  *  result  /  residuals[i];  [CE]  cannot  find  symbol  residual  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  residual  *  result  /  residuals[i];  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  residual  *  result  /  residuals[i];	  chiSquare    +=    residual    *    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  residual	122	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	1	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  cannot  find  symbol  remainingsWeights  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  remainingsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	1	None	replace
52	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	102	None	replace
53	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
54	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(variable,  cost);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(variable,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(variable,  cost);	  return    chiSquare    +    Math.sqrt(variable);    	non-compiled	[CE]  cannot  find  symbol  	100	None	replace
55	[BUG]  [BUGGY]  return  residual  +  Math.sqrt(chiSquare);  [CE]  cannot  find  symbol  residual  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  Math.sqrt(chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  Math.sqrt(chiSquare);	  return    chiSquare    +    Math.sqrt(variable);    	non-compiled	[CE]  cannot  find  symbol  residual	100	None	replace
56	[BUG]  [BUGGY]  chiSquare  =  Math.sqrt(remaining);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.sqrt(remaining);	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  remaining	115	None	replace
57	[BUG]  [BUGGY]  remaining  =  Math.sqrt(remaining);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  =  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  =  Math.sqrt(remaining);	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  remaining	115	None	replace
58	[BUG]  [BUGGY]  return  chiSquare  +  cost;  chiSquare  +  cost;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  chiSquare  +  cost;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    chiSquare  +  cost;	  	non-compiled	[CE]  not  a  statement	20	None	add
59	[BUG]  [BUGGY]  return  chiSquare  +  cost;  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  jF.getValue();  chiSquare  +=  chiSquare  *  residual  /  residualsWeights[i];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  jF.getValue();  chiSquare  +=  chiSquare  *  residual  /  residualsWeights[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  jF.getValue();  chiSquare  +=  chiSquare  *  residual  /  residualsWeights[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
60	[BUG]  [BUGGY]  return  chiSquare  +  cost;  double  cost  =  jF.getValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  double  cost  =  jF.getValue();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    double  cost  =  jF.getValue();	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
61	[BUG]  [BUGGY]  return  chiSquare  +  cost;  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  chiSquare  *  /  chiSquare;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  chiSquare  *  /  chiSquare;  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  chiSquare  *  /  chiSquare;  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
62	[BUG]  [BUGGY]  return  chiSquare  +  cost;  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  chiSquare  *  Math.log(remaining);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  chiSquare  *  Math.log(remaining);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  chiSquare  *  Math.log(remaining);  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
63	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(result,  i);  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(result,  i);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(result,  i);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining,    i);    	non-compiled	[CE]  cannot  find  symbol  result	80	None	replace
64	[BUG]  [BUGGY]  return  residual  +  1;  chiSquare  +=  Math.max(remaining,  i);  [CE]  cannot  find  symbol  residual  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  1;  chiSquare  +=  Math.max(remaining,  i);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  1;  chiSquare  +=  Math.max(remaining,  i);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining,    i);    	non-compiled	[CE]  cannot  find  symbol  residual	80	None	replace
65	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder,  i);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder,  i);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder,  i);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining,    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	80	None	replace
66	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    chiSquare);    }    	non-compiled	[CE]  '.class'  expected	107	None	replace
67	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	107	None	replace
68	[BUG]  [BUGGY]  return  residual.doubleValues;  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual.doubleValues;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual.doubleValues;	  return    chiSquare.doubleValues;    	non-compiled	[CE]  cannot  find  symbol  residual	90	None	replace
69	[BUG]  [BUGGY]  return  residuals.doubleValues;  [CE]  cannot  find  symbol  doubleValues  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals.doubleValues;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals.doubleValues;	  return    chiSquare.doubleValues;    	non-compiled	[CE]  cannot  find  symbol  doubleValues	90	None	replace
70	[BUG]  [BUGGY]  return  chiSquare,  cost.doubleValues;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare,  cost.doubleValues;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare,  cost.doubleValues;	  return    chiSquare.doubleValues;    	non-compiled	[CE]  ';'  expected	90	None	replace
71	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  residual);	  double    chiSquare    =    Math.sqrt(period,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	26	None	replace
72	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  period);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  period);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  period);	  double    chiSquare    =    Math.sqrt(period,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	26	None	replace
73	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(period,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(period,  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(period,  chiSquare);	  double    chiSquare    =    Math.sqrt(period,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	26	None	replace
74	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  return  chiSquare;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  return  chiSquare;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    j    	non-compiled	[CE]  not  a  statement	97	None	replace
75	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j!=  return  chiSquare;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j!=  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j!=  return  chiSquare;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    j    	non-compiled	[CE]  not  a  statement	97	None	replace
76	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  return  chiSquare;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  return  chiSquare;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    j    	non-compiled	[CE]  not  a  statement	97	None	replace
77	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  not  a  statement	118	None	replace
78	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  not  a  statement	118	None	replace
79	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
80	[BUG]  [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  rows)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	129	None	replace
81	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	129	None	replace
82	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	129	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  chiSquare.length;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  chiSquare.length;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  chiSquare.length;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  2;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  2;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  2;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  ';'  expected	111	None	replace
87	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  chiSquare);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  chiSquare);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	79	None	replace
88	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(result  *  chiSquare);  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(result  *  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(result  *  chiSquare);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  result	79	None	replace
89	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  cost);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  cost);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	79	None	replace
90	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  result);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  result);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  result);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	79	None	replace
91	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  rows);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  rows);	  double    chiSquare    =    Math.sqrt(rows,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	27	None	replace
92	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  rows);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  rows);	  double    chiSquare    =    Math.sqrt(rows,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	27	None	replace
93	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  columns);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  columns);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  columns);	  double    chiSquare    =    Math.sqrt(rows,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	27	None	replace
94	[BUG]  [BUGGY]  Double  chiSquare  =  Math.sqrt(remaining,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  Double  chiSquare  =  Math.sqrt(remaining,  rows);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	Double  chiSquare  =  Math.sqrt(remaining,  rows);	  double    chiSquare    =    Math.sqrt(rows,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	27	None	replace
95	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.cos(remaining);    }    	non-compiled	[CE]  '.class'  expected	109	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.cos(remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	109	None	replace
97	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sin(remaining);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sin(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sin(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.cos(remaining);    }    	non-compiled	[CE]  not  a  statement	109	None	replace
98	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(redefinition);	  double    chiSquare    =    Math.sqrt(value);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	134	None	replace
99	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  value);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  value);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  value);	  double    chiSquare    =    Math.sqrt(value);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	134	None	replace
100	[BUG]  [BUGGY]  return  chiSquare  /  chiSquare;  chiSquare  /  chiSquare;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  chiSquare;  chiSquare  /  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    chiSquare;    chiSquare  /  chiSquare;	  	non-compiled	[CE]  not  a  statement	130	None	add
101	[BUG]  [BUGGY]  return  chiSquare  /  chiSquare;  chiSquare  -=  chiSquare;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  chiSquare;  chiSquare  -=  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    chiSquare;    chiSquare  -=  chiSquare;	  	non-compiled	[CE]  unreachable  statement	130	None	add
102	[BUG]  [BUGGY]  return  chiSquare  /  chiSquare;  double  chiSquare  =  Math.sqrt(remaining);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  chiSquare;  double  chiSquare  =  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    chiSquare;    double  chiSquare  =  Math.sqrt(remaining);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	130	None	add
103	[BUG]  [BUGGY]  return  chiSquare  /  chiSquare;  double  chiSquare  =  Math.min(remaining,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  chiSquare;  double  chiSquare  =  Math.min(remaining,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    chiSquare;    double  chiSquare  =  Math.min(remaining,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	130	None	add
104	[BUG]  [BUGGY]  return  chiSquare  /  chiSquare;  chiSquare  -=  residual;  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  chiSquare;  chiSquare  -=  residual;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    chiSquare;    chiSquare  -=  residual;	  	non-compiled	[CE]  cannot  find  symbol  residual	130	None	add
105	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remaining  *  chiSquare);	  chiSquare    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	143	None	replace
106	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  cost);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  cost);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remaining  *  cost);	  chiSquare    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	143	None	replace
107	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  criterion);  [CE]  cannot  find  symbol  remaining  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  criterion);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remaining  *  criterion);	  chiSquare    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	143	None	replace
108	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  ji);  [CE]  cannot  find  symbol  remaining  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  ji);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remaining  *  ji);	  chiSquare    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	143	None	replace
109	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(remaining);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(remaining);	  return    chiSquare    +    Math.sqrt(period);    	non-compiled	[CE]  cannot  find  symbol  remaining	99	None	replace
110	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(redefinition);  [CE]  cannot  find  symbol  redefinition  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(redefinition);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(redefinition);	  return    chiSquare    +    Math.sqrt(period);    	non-compiled	[CE]  cannot  find  symbol  redefinition	99	None	replace
111	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	87	None	replace
112	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	87	None	replace
113	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	87	None	replace
114	[BUG]  [BUGGY]  remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
115	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
116	[BUG]  [BUGGY]  remainder  >  2)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  2)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  2)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    not    a    statement    	non-compiled	[CE]  not  a  statement	47	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    not    a    statement    	non-compiled	[CE]  not  a  statement	47	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    not    a    statement    	non-compiled	[CE]  not  a  statement	47	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  3;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  /  3;	  return    chiSquare    /    1;    	compilable	  [FE]  AssertionFailedError  	30	1	replace
121	[BUG]  [BUGGY]  return  chiSquare  /  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  3;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  3;	  return    chiSquare    /    1;    	compilable	  [FE]  AssertionFailedError  	30	1	replace
122	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    double    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	110	None	replace
123	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    double    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	110	None	replace
124	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residuals[i];  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    double    *    /    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	110	None	replace
125	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWights[i];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWights[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWights[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    double    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	110	None	replace
126	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  2);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  2);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  2);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    remaining);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
127	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    remaining);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
128	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  remaining);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  remaining);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    remaining);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
129	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals.length;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
130	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals.length;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
131	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.cos(remainder  *  i);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.cos(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.cos(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals.length;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols  *  cols.length;  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols  *  cols.length;  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols  *  cols.length;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols    *    cols.length;    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  residualsWeights[i];  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  residualsWeights[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  residualsWeights[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols    *    cols.length;    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
134	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols    *    cols.length;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols    *    cols.length;    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    return    chiSquare;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    return    chiSquare;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    return    chiSquare;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    return    chiSquare;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
140	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.min(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.min(remainder,  chiSquare);	  return    chiSquare    +    1;    double    chiSquare    =    Math.min(remainder,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	113	None	replace
141	[BUG]  [BUGGY]  chiSquare  =  Math.min(remainder,  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.min(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.min(remainder,  chiSquare);	  return    chiSquare    +    1;    double    chiSquare    =    Math.min(remainder,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remainder	113	None	replace
142	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainder,  chiSquare  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.min(remainder,  chiSquare  +  1);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.min(remainder,  chiSquare  +  1);	  return    chiSquare    +    1;    double    chiSquare    =    Math.min(remainder,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	113	None	replace
143	[BUG]  [BUGGY]  chiSquare  =  Math.min(remainder,  chiSquare  +  1);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.min(remainder,  chiSquare  +  1);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.min(remainder,  chiSquare  +  1);	  return    chiSquare    +    1;    double    chiSquare    =    Math.min(remainder,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remainder	113	None	replace
144	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
145	[BUG]  [BUGGY]  luate(remainder,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(remainder,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(remainder,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
146	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
147	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(redev);  [CE]  cannot  find  symbol  redev  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(redev);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(redev);	  return    chiSquare    +    Math.sqrt(value);    	non-compiled	[CE]  cannot  find  symbol  redev	98	None	replace
148	[BUG]  [BUGGY]  return  chiSquare  /  remaining;  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  remaining;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  remaining;	  return    chiSquare    /    residualsWights;    	non-compiled	[CE]  cannot  find  symbol  remaining	91	None	replace
149	[BUG]  [BUGGY]  return  chiSquare  /  total;  [CE]  cannot  find  symbol  total  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  total;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  total;	  return    chiSquare    /    residualsWights;    	non-compiled	[CE]  cannot  find  symbol  total	91	None	replace
150	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(result,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.max(result,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.max(result,  0);	  return    chiSquare    +    1;    double    chiSquare    =    Math.max(result,    0);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	116	None	replace
151	[BUG]  [BUGGY]  chiSquare  =  Math.max(result,  0);  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.max(result,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.max(result,  0);	  return    chiSquare    +    1;    double    chiSquare    =    Math.max(result,    0);    	non-compiled	[CE]  cannot  find  symbol  result	116	None	replace
152	[BUG]  [BUGGY]  result  =  Math.max(result,  0);  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  result  =  Math.max(result,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	result  =  Math.max(result,  0);	  return    chiSquare    +    1;    double    chiSquare    =    Math.max(result,    0);    	non-compiled	[CE]  cannot  find  symbol  result	116	None	replace
153	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(result,  0,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.max(result,  0,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.max(result,  0,  0);	  return    chiSquare    +    1;    double    chiSquare    =    Math.max(result,    0);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	116	None	replace
154	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
155	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
156	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
157	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
158	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  2;  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  2;	  return    chiSquare    +    2;    chiSquare    +=    2;    	non-compiled	[CE]  unreachable  statement	31	None	replace
159	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  1;  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  1;	  return    chiSquare    +    2;    chiSquare    +=    2;    	non-compiled	[CE]  unreachable  statement	31	None	replace
160	[BUG]  [BUGGY]  return  chiSquare  +  2;  chiSquare  +=  3;  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  2;  chiSquare  +=  3;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  2;  chiSquare  +=  3;	  return    chiSquare    +    2;    chiSquare    +=    2;    	non-compiled	[CE]  unreachable  statement	31	None	replace
161	[BUG]  [BUGGY]  return  residual  *  1;  [CE]  cannot  find  symbol  residual  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  *  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  *  1;	  return    chiSquare    *    1;    	non-compiled	[CE]  cannot  find  symbol  residual	126	None	replace
162	[BUG]  [BUGGY]  return  residual  +  1;  chiSquare  +=  Math.sqrt(remainder);  [CE]  cannot  find  symbol  residual  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  1;  chiSquare  +=  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  1;  chiSquare  +=  Math.sqrt(remainder);	  return    chiSquare    +    1;    chiSquare    +=    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  residual	154	None	replace
163	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(value);  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(value);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(value);	  return    chiSquare    +    1;    chiSquare    +=    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  value	154	None	replace
164	[BUG]  [BUGGY]  return  residuals  +  1;  chiSquare  +=  Math.sqrt(remainder);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals  +  1;  chiSquare  +=  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals  +  1;  chiSquare  +=  Math.sqrt(remainder);	  return    chiSquare    +    1;    chiSquare    +=    Math.sqrt(remainder);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	154	None	replace
165	[BUG]  [BUGGY]  chiSquare  =  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.sqrt(remainder);	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  remainder	114	None	replace
166	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  +  1);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder  +  1);	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	114	None	replace
167	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
168	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
169	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiS  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiS  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiS	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiS    	non-compiled	[CE]  not  a  statement	4	None	replace
170	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiS  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiS  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiS	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiS    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
171	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiS    	non-compiled	[CE]  not  a  statement	4	None	replace
172	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	136	None	replace
173	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  ji);  chiSquare  +=  jSquare  *  /  residuals  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  ji);  chiSquare  +=  jSquare  *  /  residuals  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  ji);  chiSquare  +=  jSquare  *  /  residuals	  final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
174	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  1);  chiSquare  +=  jSquare  *  /  residuals  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  1);  chiSquare  +=  jSquare  *  /  residuals  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  1);  chiSquare  +=  jSquare  *  /  residuals	  final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
175	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  i  *  /  residuals  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  i  *  /  residuals  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  i  *  /  residuals	  final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  chiSquare.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  chiSquare.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  chiSquare.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
179	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
180	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
181	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
182	[BUG]  [BUGGY]  return  residuals  +  Math.sqrt(chiSquare);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals  +  Math.sqrt(chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals  +  Math.sqrt(chiSquare);	  return    residuals    +    Math.sqrt(remainder);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	60	None	replace
183	[BUG]  [BUGGY]  return  residuals  *  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals  *  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals  *  Math.sqrt(remainder);	  return    residuals    +    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  remainder	60	None	replace
184	[BUG]  [BUGGY]  return  residuals  +  Math.sqrt(period);  [CE]  cannot  find  symbol  period  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals  +  Math.sqrt(period);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals  +  Math.sqrt(period);	  return    residuals    +    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  period	60	None	replace
185	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remaining,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.min(remaining,  i);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.min(remaining,  i);	  return    chiSquare    +    1;    double    chiSquare    =    Math.min(remaining,    i);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	78	None	replace
186	[BUG]  [BUGGY]  chiSquare  =  Math.min(remaining,  i);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.min(remaining,  i);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.min(remaining,  i);	  return    chiSquare    +    1;    double    chiSquare    =    Math.min(remaining,    i);    	non-compiled	[CE]  cannot  find  symbol  remaining	78	None	replace
187	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remaining,  i  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.min(remaining,  i  +  1);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.min(remaining,  i  +  1);	  return    chiSquare    +    1;    double    chiSquare    =    Math.min(remaining,    i);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	78	None	replace
188	[BUG]  [BUGGY]  chiSquare  =  Math.min(remaining,  i  +  1);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.min(remaining,  i  +  1);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.min(remaining,  i  +  1);	  return    chiSquare    +    1;    double    chiSquare    =    Math.min(remaining,    i);    	non-compiled	[CE]  cannot  find  symbol  remaining	78	None	replace
189	[BUG]  [BUGGY]  chiSquare  =  Math.max(remainder,  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.max(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.max(remainder,  chiSquare);	  return    chiSquare    +    2;    chiSquare    =    Math.max(remainder,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remainder	132	None	replace
190	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(remainder,  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.max(remainder,  chiSquare);	  return    chiSquare    +    2;    chiSquare    =    Math.max(remainder,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remainder	132	None	replace
191	[BUG]  [BUGGY]  return  residual  +  2;  chiSquare  =  Math.max(remainder,  chiSquare);  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  2;  chiSquare  =  Math.max(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  2;  chiSquare  =  Math.max(remainder,  chiSquare);	  return    chiSquare    +    2;    chiSquare    =    Math.max(remainder,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  residual	132	None	replace
192	[BUG]  [BUGGY]  remainder  =  Math.max(remainder,  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  =  Math.max(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  =  Math.max(remainder,  chiSquare);	  return    chiSquare    +    2;    chiSquare    =    Math.max(remainder,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remainder	132	None	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  *  chiSquare;	  return    chiSquare    /    chiSquare;    	compilable	  [FE]  AssertionFailedError  	131	1	replace
194	[BUG]  [BUGGY]  return  chiSquare  *  chiSquare;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  chiSquare;	  return    chiSquare    /    chiSquare;    	compilable	  [FE]  AssertionFailedError  	131	1	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  +  chiSquare;	  return    chiSquare    /    chiSquare;    	compilable	  [FE]  AssertionFailedError  	131	1	replace
196	[BUG]  [BUGGY]  return  chiSquare  +  chiSquare;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  chiSquare;	  return    chiSquare    /    chiSquare;    	compilable	  [FE]  AssertionFailedError  	131	1	replace
197	[BUG]  [BUGGY]  return  result  /  chiSquare;  [CE]  cannot  find  symbol  result  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  result  /  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  result  /  chiSquare;	  return    chiSquare    /    chiSquare;    	non-compiled	[CE]  cannot  find  symbol  result	131	None	replace
198	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
199	[BUG]  [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  rows)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	73	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	73	None	replace
202	[BUG]  [BUGGY]  return  residual  +  2;  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  2;	  return    chiSquare    +    2;    double    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  residual	33	None	replace
203	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	137	None	replace
204	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	137	None	replace
205	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	137	None	replace
206	[BUG]  [BUGGY]  luate(rows,  i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	137	None	replace
207	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	106	None	replace
208	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	106	None	replace
209	[BUG]  [BUGGY]  remaining  *=  2)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  *=  2)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  *=  2)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  remaining    *=    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
210	[BUG]  [BUGGY]  remaining  *=  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  *=  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  *=  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  remaining    *=    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
211	[BUG]  [BUGGY]  remaining  *=  2)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  *=  2)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  *=  2)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  remaining    *=    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
212	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  '.class'  expected	72	None	replace
213	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  '.class'  expected	72	None	replace
214	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  '.class'  expected	72	None	replace
215	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  '.class'  expected	72	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  4;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  +  4;	  return    chiSquare    +    3;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
217	[BUG]  [BUGGY]  return  chiSquare  +  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  4;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  4;	  return    chiSquare    +    3;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
218	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	124	None	replace
219	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  ';'  expected	124	None	replace
220	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  ';'  expected	124	None	replace
221	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  remaining  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  remaining  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  remaining  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	124	None	replace
222	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  remainings.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  '.class'  expected	9	None	replace
223	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  '.class'  expected	9	None	replace
224	[BUG]  [BUGGY]  return  chiSquare  /  2;  chiSquare  /  2;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2;  chiSquare  /  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    2;    chiSquare  /  2;	  	non-compiled	[CE]  not  a  statement	5	None	add
225	[BUG]  [BUGGY]  return  chiSquare  /  2;  double  chiSquare  =  Math.sqrt(remaining);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2;  double  chiSquare  =  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    2;    double  chiSquare  =  Math.sqrt(remaining);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	5	None	add
226	[BUG]  [BUGGY]  return  chiSquare  /  2;  double  chiSquare  =  Math.min(remaining,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2;  double  chiSquare  =  Math.min(remaining,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    2;    double  chiSquare  =  Math.min(remaining,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	5	None	add
227	[BUG]  [BUGGY]  return  chiSquare  /  2;  chiSquare  /  2  =  Math.min(remaining,  chiSquare);  [CE]  unexpected  type  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2;  chiSquare  /  2  =  Math.min(remaining,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    2;    chiSquare  /  2  =  Math.min(remaining,  chiSquare);	  	non-compiled	[CE]  unexpected  type	5	None	add
228	[BUG]  [BUGGY]  return  chiSquare  /  2;  chiSquare  /  2  =  Math.max(remaining,  chiSquare);  [CE]  unexpected  type  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2;  chiSquare  /  2  =  Math.max(remaining,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    2;    chiSquare  /  2  =  Math.max(remaining,  chiSquare);	  	non-compiled	[CE]  unexpected  type	5	None	add
229	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.max(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.max(remainder,  chiSquare);	  return    chiSquare    +    2;    double    chiSquare    =    Math.max(remainder,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	83	None	replace
230	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(remainder,  chiSquare  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.max(remainder,  chiSquare  +  1);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.max(remainder,  chiSquare  +  1);	  return    chiSquare    +    2;    double    chiSquare    =    Math.max(remainder,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	83	None	replace
231	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition,  cost);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(redefinition,  cost);	  double    chiSquare    =    Math.sqrt(remainder,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	25	None	replace
232	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  chiSquare);	  double    chiSquare    =    Math.sqrt(remainder,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	25	None	replace
233	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  not  a  statement	63	None	replace
234	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  ';'  expected	63	None	replace
235	[BUG]  [BUGGY]  return  residual  +  1;  chiSquare  =  Math.sqrt(remaining);  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  1;  chiSquare  =  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  1;  chiSquare  =  Math.sqrt(remaining);	  return    chiSquare    +    1;    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  residual	155	None	replace
236	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.sqrt(remainder);	  return    chiSquare    +    1;    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  remainder	155	None	replace
237	[BUG]  [BUGGY]  return  residuals  +  Cost.parseDouble(remainder);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals  +  Cost.parseDouble(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals  +  Cost.parseDouble(remainder);	  return    chiSquare    +    Cost.parseDouble(remainder);    	non-compiled	[CE]  cannot  find  symbol  remainder	120	None	replace
238	[BUG]  [BUGGY]  return  chiSquare  +  Cost.parseDouble(reciterion);  [CE]  cannot  find  symbol  reciterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Cost.parseDouble(reciterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Cost.parseDouble(reciterion);	  return    chiSquare    +    Cost.parseDouble(remainder);    	non-compiled	[CE]  cannot  find  symbol  reciterion	120	None	replace
239	[BUG]  [BUGGY]  return  residuals  +  Cost.parseDouble(chiSquare);  [CE]  cannot  find  symbol  Cost  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals  +  Cost.parseDouble(chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals  +  Cost.parseDouble(chiSquare);	  return    chiSquare    +    Cost.parseDouble(remainder);    	non-compiled	[CE]  cannot  find  symbol  Cost	120	None	replace
240	[BUG]  [BUGGY]  return  jF.getChiSquare(chiSquare);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  jF.getChiSquare(chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  jF.getChiSquare(chiSquare);	  return    jF.getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
241	[BUG]  [BUGGY]  return  this.jF.getChiSquare();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  this.jF.getChiSquare();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  this.jF.getChiSquare();	  return    jF.getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
242	[BUG]  [BUGGY]  return  jf.getChiSquare();  [CE]  cannot  find  symbol  jf  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  jf.getChiSquare();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  jf.getChiSquare();	  return    jF.getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  jf	55	None	replace
243	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  '.class'  expected	44	None	replace
244	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  '.class'  expected	44	None	replace
245	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  '.class'  expected	44	None	replace
246	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  '.class'  expected	44	None	replace
247	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  ji);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  ji);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  ji);	  double    chiSquare    =    Math.sqrt(ji,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	93	None	replace
248	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  ji);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  ji);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  ji);	  double    chiSquare    =    Math.sqrt(ji,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	93	None	replace
249	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition,  ji);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition,  ji);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(redefinition,  ji);	  double    chiSquare    =    Math.sqrt(ji,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	93	None	replace
250	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    	non-compiled	[CE]  not  a  statement	152	None	replace
251	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    	non-compiled	[CE]  '.class'  expected	149	None	replace
252	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    	non-compiled	[CE]  '.class'  expected	149	None	replace
253	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  chiSquare;  ++i)  {  final  double  chiSquare  =  0;  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  chiSquare;  ++i)  {  final  double  chiSquare  =  0;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  chiSquare;  ++i)  {  final  double  chiSquare  =  0;	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    	non-compiled	[CE]  '.class'  expected	149	None	replace
254	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  0;  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  0;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  0;	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    	non-compiled	[CE]  '.class'  expected	149	None	replace
255	[BUG]  [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  rows)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
256	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
257	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
258	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  not  a  statement	119	None	replace
259	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  not  a  statement	119	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    resin    	non-compiled	[CE]  ';'  expected	141	None	replace
261	[BUG]  [BUGGY]  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    resin    	non-compiled	[CE]  ';'  expected	141	None	replace
262	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    resin    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
263	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
264	[BUG]  [BUGGY]  chiSquare  =  Math.min(remaining,  chiSquare);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.min(remaining,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.min(remaining,  chiSquare);	  return    chiSquare    +    2;    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remaining	35	None	replace
265	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.min(remaining,  chiSquare);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.min(remaining,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.min(remaining,  chiSquare);	  return    chiSquare    +    2;    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remaining	35	None	replace
266	[BUG]  [BUGGY]  return  residual  +  2;  chiSquare  =  Math.min(chiSquare,  chiSquare);  [CE]  cannot  find  symbol  residual  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  2;  chiSquare  =  Math.min(chiSquare,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  2;  chiSquare  =  Math.min(chiSquare,  chiSquare);	  return    chiSquare    +    2;    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  residual	35	None	replace
267	[BUG]  [BUGGY]  remainder  =  Math.min(remainder,  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  =  Math.min(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  =  Math.min(remainder,  chiSquare);	  return    chiSquare    +    2;    double    chiSquare    =    Math.min(remainder,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remainder	82	None	replace
268	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	62	None	replace
269	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  2;  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  2;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  2;  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	62	None	replace
270	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  4;  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  4;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  4;  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	62	None	replace
271	[BUG]  [BUGGY]  return  residual  +  1;  chiSquare  +=  Math.sqrt(remaining);  [CE]  cannot  find  symbol  residual  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  1;  chiSquare  +=  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  1;  chiSquare  +=  Math.sqrt(remaining);	  return    chiSquare    +    1;    chiSquare    +=    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  residual	153	None	replace
272	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(remained);  [CE]  cannot  find  symbol  remained  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(remained);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(remained);	  return    chiSquare    +    1;    chiSquare    +=    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  remained	153	None	replace
273	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(remaining,  jF);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(remaining,  jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(remaining,  jF);	  return    chiSquare    +    Math.sqrt(jF);    	non-compiled	[CE]  cannot  find  symbol  remaining	61	None	replace
274	[BUG]  [BUGGY]  return  jF  +  Math.sqrt(chiSquare);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  jF  +  Math.sqrt(chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  jF  +  Math.sqrt(chiSquare);	  return    chiSquare    +    Math.sqrt(jF);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	61	None	replace
275	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(remainder,  jF);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(remainder,  jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(remainder,  jF);	  return    chiSquare    +    Math.sqrt(jF);    	non-compiled	[CE]  cannot  find  symbol  remainder	61	None	replace
276	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(period,  jF);  [CE]  cannot  find  symbol  period  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(period,  jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(period,  jF);	  return    chiSquare    +    Math.sqrt(jF);    	non-compiled	[CE]  cannot  find  symbol  period	61	None	replace
277	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remaining,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.min(remaining,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.min(remaining,  chiSquare);	  return    chiSquare    +    2;    double    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	34	None	replace
278	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remaining,  chiSquare  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.min(remaining,  chiSquare  +  1);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.min(remaining,  chiSquare  +  1);	  return    chiSquare    +    2;    double    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	34	None	replace
279	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remaining,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.min(remaining,  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.min(remaining,  residual);	  return    chiSquare    +    2;    double    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	34	None	replace
280	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  0;  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  '.class'  expected	14	None	replace
281	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  '.class'  expected	14	None	replace
282	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  0;  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  '.class'  expected	14	None	replace
283	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement;    }    	non-compiled	[CE]  not  a  statement	157	None	replace
284	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement;	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement;    }    	non-compiled	[CE]  not  a  statement	157	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  null;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement;    }    	non-compiled	[CE]  not  a  statement	157	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement;    }    	non-compiled	[CE]  not  a  statement	157	None	replace
287	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
288	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
289	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
290	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  2);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  2);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remainder  *  2);	  chiSquare    +=    Math.sqrt(remainder    *    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	127	None	replace
291	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  residual);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remainder  *  residual);	  chiSquare    +=    Math.sqrt(remainder    *    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	127	None	replace
292	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  ji);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  ji);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remainder  *  ji);	  chiSquare    +=    Math.sqrt(remainder    *    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	127	None	replace
293	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining  *  chiSquare);	  double    chiSquare    =    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	66	None	replace
294	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  /  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  /  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining  /  residual);	  double    chiSquare    =    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	66	None	replace
295	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(period  *  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(period  *  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(period  *  residual);	  double    chiSquare    =    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	66	None	replace
296	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition  *  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition  *  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(redefinition  *  residual);	  double    chiSquare    =    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	66	None	replace
297	[BUG]  [BUGGY]  return  chiSquare  *  2  +  residual;  [CE]  cannot  find  symbol  residual  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2  +  residual;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  2  +  residual;	  return    chiSquare    *    2;    	non-compiled	[CE]  cannot  find  symbol  residual	147	None	replace
298	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  cols[i]  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  cols[i]  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  cols[i]  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i]    	non-compiled	[CE]  ';'  expected	58	None	replace
299	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i]    	non-compiled	[CE]  ';'  expected	58	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i]    	non-compiled	[CE]  ';'  expected	58	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  cols[i]  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  cols[i]  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  cols[i]  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i]    	non-compiled	[CE]  ';'  expected	58	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  null  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  null  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  null	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >=    not    a    statement    	non-compiled	[CE]  not  a  statement	105	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  null  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  null  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  null	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >=    not    a    statement    	non-compiled	[CE]  not  a  statement	105	None	replace
304	[BUG]  [BUGGY]  return  residuals  /  chiSquare;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals  /  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals  /  chiSquare;	  return    chiSquare    /    residuals;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	18	None	replace
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals.length  /  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  residuals.length  /  chiSquare;	  return    chiSquare    /    residuals;    	compilable	  [FE]  AssertionFailedError  	18	1	replace
306	[BUG]  [BUGGY]  return  residuals.length  /  chiSquare;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals.length  /  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals.length  /  chiSquare;	  return    chiSquare    /    residuals;    	compilable	  [FE]  AssertionFailedError  	18	1	replace
307	[BUG]  [BUGGY]  return  chiSquare  *  residuals;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  residuals;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  residuals;	  return    chiSquare    /    residuals;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2  +  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  /  2  +  1;	  return    chiSquare    /    2;    	compilable	  [FE]  AssertionFailedError  	6	1	replace
309	[BUG]  [BUGGY]  return  chiSquare  /  2  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2  +  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  2  +  1;	  return    chiSquare    /    2;    	compilable	  [FE]  AssertionFailedError  	6	1	replace
310	[BUG]  [BUGGY]  return  chiSquare  /  2  *  residual;  [CE]  cannot  find  symbol  residual  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2  *  residual;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  2  *  residual;	  return    chiSquare    /    2;    	non-compiled	[CE]  cannot  find  symbol  residual	6	None	replace
311	[BUG]  [BUGGY]  return  chiSquare  /  2  +  residual;  [CE]  cannot  find  symbol  residual  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2  +  residual;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  2  +  residual;	  return    chiSquare    /    2;    	non-compiled	[CE]  cannot  find  symbol  residual	6	None	replace
312	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	103	None	replace
313	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
314	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	103	None	replace
315	[BUG]  [BUGGY]  return  chiSquare  /  1;  chiSquare  /  1;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  1;  chiSquare  /  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    1;    chiSquare  /  1;	  	non-compiled	[CE]  not  a  statement	29	None	add
316	[BUG]  [BUGGY]  return  chiSquare  /  1;  chiSquare  /  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  1;  chiSquare  /  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    1;    chiSquare  /  2;	  	non-compiled	[CE]  not  a  statement	29	None	add
317	[BUG]  [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.sqrt(remaining);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    1;    double  chiSquare  =  Math.sqrt(remaining);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	29	None	add
318	[BUG]  [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.min(remaining,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.min(remaining,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    1;    double  chiSquare  =  Math.min(remaining,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	29	None	add
319	[BUG]  [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.sqrt(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    1;    double  chiSquare  =  Math.sqrt(remainder);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	29	None	add
320	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	64	None	replace
321	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	64	None	replace
322	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  chiSquare.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  chiSquare.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  chiSquare.length;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	64	None	replace
323	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    	non-compiled	[CE]  not  a  statement	70	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
325	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
326	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
328	[BUG]  [BUGGY]  return  residuals;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals;	  return    iSquare;    	non-compiled	[CE]  incompatible  types	133	None	replace
329	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  '.class'  expected	40	None	replace
330	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  '.class'  expected	40	None	replace
331	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  '.class'  expected	40	None	replace
332	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  '.class'  expected	40	None	replace
333	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
334	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
335	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
336	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
337	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  cols[i];  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  cols[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  cols[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
338	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols[i]  *	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  not  a  statement	56	None	replace
339	[BUG]  [BUGGY]  final  double  chiSquare  =  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  1;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  1;	  final    double    chiSquare    =    0;    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	148	None	replace
340	[BUG]  [BUGGY]  final  double  chiSquare  =  0L;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  0L;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  0L;	  final    double    chiSquare    =    0;    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	148	None	replace
341	[BUG]  [BUGGY]  final  double  chiSquare  =  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  2;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  2;	  final    double    chiSquare    =    0;    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	148	None	replace
342	[BUG]  [BUGGY]  return  chiSquare  +  remaining;  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  remaining;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  remaining;	  return    chiSquare    +    value;    	non-compiled	[CE]  cannot  find  symbol  remaining	101	None	replace
343	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(result,  0);  [CE]  cannot  find  symbol  result  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(result,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(result,  0);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  result	76	None	replace
344	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining,  0,  0);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining,  0,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining,  0,  0);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  remaining	76	None	replace
345	[BUG]  [BUGGY]  return  residual  +  1;  chiSquare  +=  Math.max(remaining,  0);  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  1;  chiSquare  +=  Math.max(remaining,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  1;  chiSquare  +=  Math.max(remaining,  0);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  residual	76	None	replace
346	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
347	[BUG]  [BUGGY]  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
348	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
349	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  '.class'  expected	48	None	replace
350	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  '.class'  expected	48	None	replace
351	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  '.class'  expected	48	None	replace
352	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  not  a  statement	96	None	replace
353	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  not  a  statement	96	None	replace
354	[BUG]  [BUGGY]  remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.max(remainder,    i);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
355	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    2;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
356	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    2;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
357	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.cos(remaining);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
358	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.cos(remaining);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
359	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sin(remaining);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sin(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sin(remaining);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.cos(remaining);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
360	[BUG]  [BUGGY]  chiSquare  +=  Math.min(resitive,  i);  [CE]  cannot  find  symbol  resitive  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.min(resitive,  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.min(resitive,  i);	  chiSquare    +=    Math.min(remainder,    i);    	non-compiled	[CE]  cannot  find  symbol  resitive	160	None	replace
361	[BUG]  [BUGGY]  chiSquare  +=  Math.min(remainder,  i  +  1);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.min(remainder,  i  +  1);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.min(remainder,  i  +  1);	  chiSquare    +=    Math.min(remainder,    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	160	None	replace
362	[BUG]  [BUGGY]  chiSquare  +=  Math.min(i,  residual);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.min(i,  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.min(i,  residual);	  chiSquare    +=    Math.min(remainder,    i);    	non-compiled	[CE]  cannot  find  symbol  i	160	None	replace
363	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  *  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  *  1);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining  *  1);	  double    chiSquare    =    Math.sqrt(remaining    +    1);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	67	None	replace
364	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  +  2);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  +  2);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining  +  2);	  double    chiSquare    =    Math.sqrt(remaining    +    1);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	67	None	replace
365	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  +  1,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  +  1,  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining  +  1,  residual);	  double    chiSquare    =    Math.sqrt(remaining    +    1);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	67	None	replace
366	[BUG]  [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  rows)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
367	[BUG]  [BUGGY]  luate(rows,  cost)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  cost)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  cost)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
368	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	128	None	replace
369	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    residual    	non-compiled	[CE]  ';'  expected	139	None	replace
370	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    residual    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
371	[BUG]  [BUGGY]  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    residual    	non-compiled	[CE]  ';'  expected	139	None	replace
372	[BUG]  [BUGGY]  return  chiSquare  +  cost.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost.doubleValue();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  cost.doubleValue();	  return    chiSquare    +    Cost.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	121	None	replace
373	[BUG]  [BUGGY]  return  chiSquare  +  residual.doubleValue();  [CE]  cannot  find  symbol  residual  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  residual.doubleValue();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  residual.doubleValue();	  return    chiSquare    +    Cost.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  residual	121	None	replace
374	[BUG]  [BUGGY]  return  residual  +  Cost.doubleValue();  [CE]  cannot  find  symbol  residual  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  Cost.doubleValue();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  Cost.doubleValue();	  return    chiSquare    +    Cost.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  residual	121	None	replace
375	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement    	non-compiled	[CE]  not  a  statement	104	None	replace
376	[BUG]  [BUGGY]  return  chiSquare  *  1;  chiSquare  *  1;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  1;  chiSquare  *  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    1;    chiSquare  *  1;	  	non-compiled	[CE]  not  a  statement	125	None	add
377	[BUG]  [BUGGY]  return  chiSquare  *  1;  chiSquare  *  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  1;  chiSquare  *  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    1;    chiSquare  *  2;	  	non-compiled	[CE]  not  a  statement	125	None	add
378	[BUG]  [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.sqrt(remaining);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    1;    double  chiSquare  =  Math.sqrt(remaining);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	125	None	add
379	[BUG]  [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.sqrt(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    1;    double  chiSquare  =  Math.sqrt(remainder);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	125	None	add
380	[BUG]  [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.min(remaining  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.min(remaining  *  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    1;    double  chiSquare  =  Math.min(remaining  *  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	125	None	add
381	[BUG]  [BUGGY]  chiSquare  +=  Math.log(remaining  *  chiSquare);  [CE]  cannot  find  symbol  remaining  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.log(remaining  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.log(remaining  *  chiSquare);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	replace
382	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare,  cost);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare,  cost);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	replace
383	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare  /  residualsWeights[i]);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare  /  residualsWeights[i]);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare  /  residualsWeights[i]);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	replace
384	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  cost  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  cost  +  1);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  cost  +  1);	  double    chiSquare    =    Math.sqrt(remaining,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	replace
385	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  cost  *  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  cost  *  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  cost  *  residual);	  double    chiSquare    =    Math.sqrt(remaining,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	replace
386	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement    	non-compiled	[CE]  not  a  statement	158	None	replace
387	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement    	non-compiled	[CE]  not  a  statement	158	None	replace
388	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  non  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  non  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  non	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement    	non-compiled	[CE]  not  a  statement	158	None	replace
389	[BUG]  [BUGGY]  return  chiSquare  +  3;  chiSquare  +  3;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  3;  chiSquare  +  3;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    3;    chiSquare  +  3;	  	non-compiled	[CE]  not  a  statement	7	None	add
390	[BUG]  [BUGGY]  return  chiSquare  +  3;  chiSquare  +=  3;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  3;  chiSquare  +=  3;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    3;    chiSquare  +=  3;	  	non-compiled	[CE]  unreachable  statement	7	None	add
391	[BUG]  [BUGGY]  return  chiSquare  +  3;  chiSquare  +=  2;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  3;  chiSquare  +=  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    3;    chiSquare  +=  2;	  	non-compiled	[CE]  unreachable  statement	7	None	add
392	[BUG]  [BUGGY]  return  chiSquare  +  3;  double  chiSquare  =  Math.sqrt(remaining);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  3;  double  chiSquare  =  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    3;    double  chiSquare  =  Math.sqrt(remaining);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	7	None	add
393	[BUG]  [BUGGY]  return  chiSquare  +  3;  chiSquare  =  Math.max(remaining,  0);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  3;  chiSquare  =  Math.max(remaining,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    3;    chiSquare  =  Math.max(remaining,  0);	  	non-compiled	[CE]  cannot  find  symbol  remaining	7	None	add
394	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	138	None	replace
395	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	138	None	replace
396	[BUG]  [BUGGY]  return  chiSquare  +  RemainingSquare.MAX_ITERATIONS;  [CE]  cannot  find  symbol  RemainingSquare  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  RemainingSquare.MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  RemainingSquare.MAX_ITERATIONS;	  return    chiSquare    +    Cost;    	non-compiled	[CE]  cannot  find  symbol  RemainingSquare	22	None	replace
397	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	37	None	replace
398	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  cannot  find  symbol  remainings  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	37	None	replace
399	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	37	None	replace
400	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  cannot  find  symbol  remainingsWeights  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  remainingsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	37	None	replace
401	[BUG]  [BUGGY]  chiSquare  +=  Math.max(remaining  *  residualsWeights[i]);  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.max(remaining  *  residualsWeights[i]);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.max(remaining  *  residualsWeights[i]);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remaining	39	None	replace
402	[BUG]  [BUGGY]  chiSquare  +=  Math.max(remaining  *  chiSquare);  [CE]  cannot  find  symbol  remaining  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.max(remaining  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.max(remaining  *  chiSquare);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remaining	39	None	replace
403	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare,  cost);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare,  cost);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	39	None	replace
404	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare,  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare,  i);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	39	None	replace
405	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	150	None	replace
406	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residuals  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residuals  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residuals	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	150	None	replace
407	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    	non-compiled	[CE]  not  a  statement	95	None	replace
408	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    	non-compiled	[CE]  not  a  statement	95	None	replace
409	[BUG]  [BUGGY]  return  residual.doubleValue();  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual.doubleValue();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual.doubleValue();	  return    chiSquare.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  residual	89	None	replace
410	[BUG]  [BUGGY]  return  residuals.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals.doubleValue();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals.doubleValue();	  return    chiSquare.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
411	[BUG]  [BUGGY]  return  chiSquare.doubleValue()  +  residual;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare.doubleValue()  +  residual;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare.doubleValue()  +  residual;	  return    chiSquare.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	89	None	replace
412	[BUG]  [BUGGY]  luate(columns,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(columns,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(columns,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	145	None	replace
413	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	145	None	replace
414	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	145	None	replace
415	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	145	None	replace
416	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    remaining    *    /    residuals[i];    }    	non-compiled	[CE]  not  a  statement	123	None	replace
417	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	36	None	replace
418	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	36	None	replace
419	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  cannot  find  symbol  remainingsWeights  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  remainingsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	36	None	replace
420	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	144	None	replace
421	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	144	None	replace
422	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  remaining;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	144	None	replace
423	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare,  cost);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare,  cost);	  final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	156	None	replace
424	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  1);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  1);	  final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	156	None	replace
425	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  2);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  2);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  2);	  final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	156	None	replace
426	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variant,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(variant,  cost);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(variant,  cost);	  double    chiSquare    =    Math.sqrt(variant);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	135	None	replace
427	[BUG]  [BUGGY]  chiSquare  =  Math.max(remaining,  0);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  =  Math.max(remaining,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  =  Math.max(remaining,  0);	  return    chiSquare    +    1;    chiSquare    =    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  remaining	77	None	replace
428	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(result,  0);  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(result,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.max(result,  0);	  return    chiSquare    +    1;    chiSquare    =    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  result	77	None	replace
429	[BUG]  [BUGGY]  return  residuals  *  Math.sqrt(chiSquare);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals  *  Math.sqrt(chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals  *  Math.sqrt(chiSquare);	  return    residuals    +    Math.sqrt(remainder);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	60	None	replace
430	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	36	None	replace
431	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	36	None	replace
432	[BUG]  [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
433	[BUG]  [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  rows)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
434	[BUG]  [BUGGY]  return  chiSquare,  residual.doubleValues;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare,  residual.doubleValues;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare,  residual.doubleValues;	  return    chiSquare.doubleValues;    	non-compiled	[CE]  ';'  expected	90	None	replace
435	[BUG]  [BUGGY]  remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
436	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(result);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(result);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(result);	  double    chiSquare    =    Math.sqrt(value);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	134	None	replace
437	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(resistance);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(resistance);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(resistance);	  double    chiSquare    =    Math.sqrt(value);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	134	None	replace
438	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  0;  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  '.class'  expected	14	None	replace
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  cost;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  /  cost;	  return    chiSquare    +    cost;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
440	[BUG]  [BUGGY]  return  chiSquare  /  cost;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  cost;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  cost;	  return    chiSquare    +    cost;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
441	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(ji,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(ji,  cost);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(ji,  cost);	  double    chiSquare    =    Math.sqrt(remainder,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	25	None	replace
442	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(value,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(value,  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(value,  residual);	  double    chiSquare    =    Math.sqrt(remainder,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	25	None	replace
443	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
444	[BUG]  [BUGGY]  luate(trivian,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(trivian,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(trivian,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
445	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(remaine);  [CE]  cannot  find  symbol  remaine  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(remaine);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(remaine);	  return    chiSquare    +    1;    chiSquare    +=    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  remaine	153	None	replace
446	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	103	None	replace
447	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaine);  }  [CE]  cannot  find  symbol  remaine  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaine);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaine);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remaine	73	None	replace
448	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaine);  }  [CE]  cannot  find  symbol  remaine  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaine);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaine);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remaine	73	None	replace
449	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaine);  }  [CE]  cannot  find  symbol  remaine  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaine);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remaine);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remaine	73	None	replace
450	[BUG]  [BUGGY]  return  chiSquare  /  residualsWidth;  [CE]  cannot  find  symbol  residualsWidth  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  residualsWidth;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  residualsWidth;	  return    chiSquare    /    result;    	non-compiled	[CE]  cannot  find  symbol  residualsWidth	19	None	replace
451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2  +  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  *  2  +  1;	  return    chiSquare    *    2;    	compilable	  [FE]  AssertionFailedError  	147	1	replace
452	[BUG]  [BUGGY]  return  chiSquare  *  2  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2  +  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  2  +  1;	  return    chiSquare    *    2;    	compilable	  [FE]  AssertionFailedError  	147	1	replace
453	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  '.class'  expected	40	None	replace
454	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  '.class'  expected	40	None	replace
455	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  ==  not  a  statement  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  ==  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  ==  not  a  statement	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    j    	non-compiled	[CE]  not  a  statement	97	None	replace
456	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(period,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(period,  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(period,  i);	  double    chiSquare    =    Math.sqrt(period);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	92	None	replace
457	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    residual    	non-compiled	[CE]  not  a  statement	139	None	replace
458	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    double    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	110	None	replace
459	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    double    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	110	None	replace
460	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
461	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  chiSquare  +=  residual  *  /  this.remainings[i];  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  chiSquare  +=  residual  *  /  this.remainings[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  chiSquare  +=  residual  *  /  this.remainings[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	62	None	replace
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  4;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  /  4;	  return    chiSquare    /    1;    	compilable	  [FE]  AssertionFailedError  	30	1	replace
463	[BUG]  [BUGGY]  return  chiSquare  /  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  4;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  4;	  return    chiSquare    /    1;    	compilable	  [FE]  AssertionFailedError  	30	1	replace
464	[BUG]  [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(i,  rows)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(i,  rows)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals.length;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
465	[BUG]  [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals.length;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
466	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    2;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
467	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder,  0);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder,  0);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  remainder	76	None	replace
468	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining,  0,  chiSquare);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining,  0,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining,  0,  chiSquare);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  remaining	76	None	replace
469	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  '.class'  expected	9	None	replace
470	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  i);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remaining  *  i);	  chiSquare    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	143	None	replace
471	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remainder  *  chiSquare);	  chiSquare    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remainder	143	None	replace
472	[BUG]  [BUGGY]  remainder  >  3)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  3)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  3)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
473	[BUG]  [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
474	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    return    chiSquare;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
475	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    return    chiSquare;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
476	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  columns);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  columns);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  columns);	  double    chiSquare    =    Math.sqrt(rows,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	27	None	replace
477	[BUG]  [BUGGY]  return  chiSquare  *  Cost.doubleValue();  [CE]  cannot  find  symbol  Cost  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  Cost.doubleValue();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  Cost.doubleValue();	  return    chiSquare    +    Cost.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  Cost	121	None	replace
478	[BUG]  [BUGGY]  remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
479	[BUG]  [BUGGY]  return  chiSquare  /  2  +  super.getChiSquare();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2  +  super.getChiSquare();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  2  +  super.getChiSquare();	  return    chiSquare    /    2;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
480	[BUG]  [BUGGY]  return  chiSquare  +  Cost.parseDouble(period);  [CE]  cannot  find  symbol  period  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Cost.parseDouble(period);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Cost.parseDouble(period);	  return    chiSquare    +    Cost.parseDouble(remainder);    	non-compiled	[CE]  cannot  find  symbol  period	120	None	replace
481	[BUG]  [BUGGY]  return  chiSquare  +  Cost.parseDouble(reditive);  [CE]  cannot  find  symbol  reditive  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Cost.parseDouble(reditive);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Cost.parseDouble(reditive);	  return    chiSquare    +    Cost.parseDouble(remainder);    	non-compiled	[CE]  cannot  find  symbol  reditive	120	None	replace
482	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  /  residuals[i];  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  i  *  residual  /  residuals[i];  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  i  *  residual  /  residuals[i];	  chiSquare    +=    residual    *    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  i	122	None	replace
483	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  jacobian[i];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  residual  *  /  jacobian[i];  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  residual  *  /  jacobian[i];	  chiSquare    +=    residual    *    /    residualsWeights[i];    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
484	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  remainings[i];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  residual  *  /  remainings[i];  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  residual  *  /  remainings[i];	  chiSquare    +=    residual    *    /    residualsWeights[i];    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
485	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  chiSquare);	  double    chiSquare    =    Math.sqrt(remaining,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	replace
486	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  ';'  expected	124	None	replace
487	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  not  a  statement	124	None	replace
488	[BUG]  [BUGGY]  if(remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.max(remainder,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
489	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols    *    cols.length;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
490	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols    *    cols.length;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
491	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    not    a    statement    	non-compiled	[CE]  not  a  statement	47	None	replace
492	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    not    a    statement    	non-compiled	[CE]  not  a  statement	47	None	replace
493	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement    	non-compiled	[CE]  not  a  statement	158	None	replace
494	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
495	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
496	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  2);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  2);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  2);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    remaining);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
497	[BUG]  [BUGGY]  return  chiSquare  /  chiSquare;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  chiSquare;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    chiSquare;    double  chiSquare  =  Math.min(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	130	None	add
498	[BUG]  [BUGGY]  return  chiSquare  /  chiSquare;  double  chiSquare  =  Math.sqrt(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  chiSquare;  double  chiSquare  =  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    chiSquare;    double  chiSquare  =  Math.sqrt(remainder);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	130	None	add
499	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(variable,  residual);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(variable,  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(variable,  residual);	  return    chiSquare    +    Math.sqrt(variable);    	non-compiled	[CE]  cannot  find  symbol  	100	None	replace
500	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	106	None	replace
501	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	106	None	replace
502	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(jF);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(jF);	  return    chiSquare    +    1;    chiSquare    +=    Math.sqrt(remainder);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	154	None	replace
503	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(period);  [CE]  cannot  find  symbol  period  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(period);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(period);	  return    chiSquare    +    1;    chiSquare    +=    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  period	154	None	replace
504	[BUG]  [BUGGY]  return  chiSquare  +  cost;  double  cost  =  Math.min(remainder,  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  double  cost  =  Math.min(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    double  cost  =  Math.min(remainder,  chiSquare);	  	non-compiled	[CE]  cannot  find  symbol  remainder	20	None	add
505	[BUG]  [BUGGY]  return  chiSquare  +  cost;  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
506	[BUG]  [BUGGY]  return  chiSquare  +  cost;  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.pow(10,  residual);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.pow(10,  residual);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.pow(10,  residual);  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
507	[BUG]  [BUGGY]  return  chiSquare  +  cost;  double  cost  =  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  double  cost  =  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    double  cost  =  Math.sqrt(remainder);	  	non-compiled	[CE]  cannot  find  symbol  remainder	20	None	add
508	[BUG]  [BUGGY]  return  chiSquare  +  cost;  double  cost  =  Math.sqrt(remainder  *  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  double  cost  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    double  cost  =  Math.sqrt(remainder  *  chiSquare);	  	non-compiled	[CE]  cannot  find  symbol  remainder	20	None	add
509	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    	non-compiled	[CE]  not  a  statement	140	None	replace
510	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  new  double[remaining  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  new  double[remaining  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  new  double[remaining	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    	non-compiled	[CE]  ']'  expected	140	None	replace
511	[BUG]  [BUGGY]  return  chiSquare  /  2;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    2;    double  chiSquare  =  Math.min(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	5	None	add
512	[BUG]  [BUGGY]  return  chiSquare  /  2;  double  chiSquare  =  Math.min(result,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2;  double  chiSquare  =  Math.min(result,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    2;    double  chiSquare  =  Math.min(result,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	5	None	add
513	[BUG]  [BUGGY]  return  chiSquare  /  2;  double  chiSquare  =  Math.sqrt(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2;  double  chiSquare  =  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    2;    double  chiSquare  =  Math.sqrt(remainder);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	5	None	add
514	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	150	None	replace
515	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare,  0);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare,  0);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	39	None	replace
516	[BUG]  [BUGGY]  return  chiSquare  +  i;  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  i;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  i;	  return    chiSquare    +    value;    	non-compiled	[CE]  cannot  find  symbol  i	101	None	replace
517	[BUG]  [BUGGY]  return  residual  /  chiSquare;  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  /  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  /  chiSquare;	  return    chiSquare    /    residuals;    	non-compiled	[CE]  cannot  find  symbol  residual	18	None	replace
518	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    remaining    *    /    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
519	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(result,  0,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.max(result,  0,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.max(result,  0,  chiSquare);	  return    chiSquare    +    1;    double    chiSquare    =    Math.max(result,    0);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	116	None	replace
520	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  period);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  period);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  period);	  double    chiSquare    =    Math.sqrt(period,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	26	None	replace
521	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder  *  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder  *  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder  *  chiSquare);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remainder	79	None	replace
522	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  i);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  i);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  i);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	79	None	replace
523	[BUG]  [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.min(chiSquare,  residual);  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.min(chiSquare,  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  2;  chiSquare  =  Math.min(chiSquare,  residual);	  return    chiSquare    +    2;    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  residual	35	None	replace
524	[BUG]  [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.min(result,  chiSquare);  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.min(result,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  2;  chiSquare  =  Math.min(result,  chiSquare);	  return    chiSquare    +    2;    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  result	35	None	replace
525	[BUG]  [BUGGY]  chiSquare  +=  Math.min(result,  i);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.min(result,  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.min(result,  i);	  chiSquare    +=    Math.min(remainder,    i);    	non-compiled	[CE]  cannot  find  symbol  result	160	None	replace
526	[BUG]  [BUGGY]  chiSquare  +=  Math.min(remainder,  0,  i);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.min(remainder,  0,  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.min(remainder,  0,  i);	  chiSquare    +=    Math.min(remainder,    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	160	None	replace
527	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(result);  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(result);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(result);	  return    chiSquare    +    Math.sqrt(value);    	non-compiled	[CE]  cannot  find  symbol  result	98	None	replace
528	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(resitive);  [CE]  cannot  find  symbol  resitive  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(resitive);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(resitive);	  return    chiSquare    +    Math.sqrt(value);    	non-compiled	[CE]  cannot  find  symbol  resitive	98	None	replace
529	[BUG]  [BUGGY]  return  chiSquare  +  sum;  [CE]  cannot  find  symbol  sum  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  sum;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  sum;	  return    chiSquare    +    result;    	non-compiled	[CE]  cannot  find  symbol  sum	23	None	replace
530	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  0;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	13	None	replace
531	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  /  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  /  1);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining  /  1);	  double    chiSquare    =    Math.sqrt(remaining    +    1);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	67	None	replace
532	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare)+  1;  chiSquare  +=  jSquare  *  /  residuals  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare)+  1;  chiSquare  +=  jSquare  *  /  residuals  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare)+  1;  chiSquare  +=  jSquare  *  /  residuals	  final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
533	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  1);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  chiSquare  +  1);	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	117	None	replace
534	[BUG]  [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	128	None	replace
535	[BUG]  [BUGGY]  return  residuals.period;  [CE]  cannot  find  symbol  period  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residuals.period;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals.period;	  return    this.period;    	non-compiled	[CE]  cannot  find  symbol  period	54	None	replace
536	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  not  a  statement	118	None	replace
537	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  not  a  statement	56	None	replace
538	[BUG]  [BUGGY]  luate(trivian,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(trivian,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(trivian,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
539	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
540	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement;    }    	non-compiled	[CE]  not  a  statement	157	None	replace
541	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement;    }    	non-compiled	[CE]  not  a  statement	157	None	replace
542	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement;    }    	non-compiled	[CE]  not  a  statement	157	None	replace
543	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chi  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chi  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chi	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiS    	non-compiled	[CE]  not  a  statement	4	None	replace
544	[BUG]  [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    1;    double  chiSquare  =  Math.min(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	29	None	add
545	[BUG]  [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.min(result,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.min(result,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    1;    double  chiSquare  =  Math.min(result,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	29	None	add
546	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(remainder,  0);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(remainder,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.max(remainder,  0);	  return    chiSquare    +    1;    chiSquare    =    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  remainder	77	None	replace
547	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(resitive,  0);  [CE]  cannot  find  symbol  resitive  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(resitive,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.max(resitive,  0);	  return    chiSquare    +    1;    chiSquare    =    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  resitive	77	None	replace
548	[BUG]  [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    2;    double  chiSquare  =  Math.min(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	146	None	add
549	[BUG]  [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.min(remainder,  chiSquare  *  2);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.min(remainder,  chiSquare  *  2);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    2;    double  chiSquare  =  Math.min(remainder,  chiSquare  *  2);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	146	None	add
550	[BUG]  [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
551	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  chiSquare  +=  residual  *  /  this.remainders[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  chiSquare  +=  residual  *  /  this.remainders[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  chiSquare  +=  residual  *  /  this.remainders[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
552	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  chiSquare  +=  residual  *  /  6;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  chiSquare  +=  residual  *  /  6;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  chiSquare  +=  residual  *  /  6;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
553	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement    	non-compiled	[CE]  not  a  statement	104	None	replace
554	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement    	non-compiled	[CE]  not  a  statement	104	None	replace
555	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  i);	  double    chiSquare    =    Math.sqrt(ji,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	93	None	replace
556	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  jF);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  jF);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remainder  *  jF);	  chiSquare    +=    Math.sqrt(remainder    *    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	127	None	replace
557	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  '.class'  expected	44	None	replace
558	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  '.class'  expected	44	None	replace
559	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  '.class'  expected	44	None	replace
560	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.floor(remaining  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.floor(remaining  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.floor(remaining  *  chiSquare);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	replace
561	[BUG]  [BUGGY]  luate(variables,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(variables,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(variables,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	144	None	replace
562	[BUG]  [BUGGY]  return  chiSquare  +  3;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  3;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    3;    double  chiSquare  =  Math.min(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	7	None	add
563	[BUG]  [BUGGY]  return  chiSquare  +  3;  double  chiSquare  =  Math.sqrt(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  3;  double  chiSquare  =  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    3;    double  chiSquare  =  Math.sqrt(remainder);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	7	None	add
564	[BUG]  [BUGGY]  return  chiSquare  +  3;  chiSquare  =  Math.max(remainder,  0);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  3;  chiSquare  =  Math.max(remainder,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    3;    chiSquare  =  Math.max(remainder,  0);	  	non-compiled	[CE]  cannot  find  symbol  remainder	7	None	add
565	[BUG]  [BUGGY]  return  residualsWeight  /  chiSquare;  [CE]  cannot  find  symbol  residualsWeight  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residualsWeight  /  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residualsWeight  /  chiSquare;	  return    chiSquare    /    residualsWeights;    	non-compiled	[CE]  cannot  find  symbol  residualsWeight	17	None	replace
566	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variant  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(variant  +  1);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(variant  +  1);	  double    chiSquare    =    Math.sqrt(variant);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	135	None	replace
567	[BUG]  [BUGGY]  return  iSquare.doubleValue();  [CE]  cannot  find  symbol  iSquare  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  iSquare.doubleValue();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  iSquare.doubleValue();	  return    chiSquare.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  iSquare	89	None	replace
568	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  +  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  +  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining  +  residual);	  double    chiSquare    =    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	66	None	replace
569	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    chiSquare);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	107	None	replace
570	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	replace
571	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	replace
572	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	replace
573	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  0;  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  0;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  0;	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    	non-compiled	[CE]  '.class'  expected	149	None	replace
574	[BUG]  [BUGGY]  Double  chiSquare  =  Math.sqrt(remainder,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  Double  chiSquare  =  Math.sqrt(remainder,  jF);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	Double  chiSquare  =  Math.sqrt(remainder,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	28	None	replace
575	[BUG]  [BUGGY]  remaining  >  this.rows)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  this.rows)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  this.rows)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  not  a  statement	119	None	replace
576	[BUG]  [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    1;    double  chiSquare  =  Math.min(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	125	None	add
577	[BUG]  [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    1;    double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	125	None	add
578	[BUG]  [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.sqrt(remaining  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  1;  double  chiSquare  =  Math.sqrt(remaining  *  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    1;    double  chiSquare  =  Math.sqrt(remaining  *  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	125	None	add
579	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.remainingsWeights;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  this.remainingsWeights;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  this.remainingsWeights;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	64	None	replace
580	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  3;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  *  3;	  return    chiSquare    *    1;    	compilable	  [FE]  AssertionFailedError  	126	1	replace
581	[BUG]  [BUGGY]  return  chiSquare  *  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  3;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  3;	  return    chiSquare    *    1;    	compilable	  [FE]  AssertionFailedError  	126	1	replace
582	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	37	None	replace
583	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	37	None	replace
584	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	37	None	replace
585	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
586	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
587	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >=    not    a    statement    	non-compiled	[CE]  not  a  statement	105	None	replace
588	[BUG]  [BUGGY]  luate(columns,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(columns,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(columns,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	129	None	replace
589	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  '.class'  expected	48	None	replace
590	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  '.class'  expected	48	None	replace
591	[BUG]  [BUGGY]  return  residual  +  1;  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  residual  +  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residual  +  1;	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  residual	115	None	replace
592	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sin(remaining);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sin(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sin(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.cos(remaining);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
593	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	145	None	replace
594	[BUG]  [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(chiSquare,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
595	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.sqrt(period);  [CE]  cannot  find  symbol  period  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.sqrt(period);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.sqrt(period);	  return    chiSquare    +    1;    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  period	155	None	replace
596	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.sqrt(remained);  [CE]  cannot  find  symbol  remained  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.sqrt(remained);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.sqrt(remained);	  return    chiSquare    +    1;    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  remained	155	None	replace
597	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jf.getVariables();  chiSquare  +=  jacobianEvaluations  *  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jf.getVariables();  chiSquare  +=  jacobianEvaluations  *  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jf.getVariables();  chiSquare  +=  jacobianEvaluations  *  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
598	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
599	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.cos(remaining);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
600	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.ceil(remaining);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.ceil(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.ceil(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.cos(remaining);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
601	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i]    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
602	[BUG]  [BUGGY]  restul  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  restul  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	restul  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
603	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  chiSquare);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
604	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	145	None	replace
605	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	64	None	replace
606	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	64	None	replace
607	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
608	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(coefficient,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(coefficient,  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(coefficient,  residual);	  double    chiSquare    =    Math.sqrt(remainder,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	25	None	replace
609	[BUG]  [BUGGY]  return  chiSquare  +  cost.parseDouble(remainder);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost.parseDouble(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  cost.parseDouble(remainder);	  return    chiSquare    +    Cost.parseDouble(remainder);    	non-compiled	[CE]  cannot  find  symbol  remainder	120	None	replace
610	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.sqrt(variant);  [CE]  cannot  find  symbol  variant  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.sqrt(variant);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.sqrt(variant);	  return    chiSquare    +    1;    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  variant	155	None	replace
611	[BUG]  [BUGGY]  return  chiSquare  +  3;  double  chiSquare  =  Math.max(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  3;  double  chiSquare  =  Math.max(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    3;    double  chiSquare  =  Math.max(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	7	None	add
612	[BUG]  [BUGGY]  return  chiSquare  +  3;  chiSquare  =  Math.max(remainder,  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  3;  chiSquare  =  Math.max(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    3;    chiSquare  =  Math.max(remainder,  chiSquare);	  	non-compiled	[CE]  cannot  find  symbol  remainder	7	None	add
613	[BUG]  [BUGGY]  return  chiSquare  +  jiSquare;  [CE]  cannot  find  symbol  jiSquare  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  jiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  jiSquare;	  return    chiSquare    +    price;    	non-compiled	[CE]  cannot  find  symbol  jiSquare	24	None	replace
614	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	137	None	replace
615	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  cost);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  cost);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remainder  *  cost);	  chiSquare    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remainder	143	None	replace
616	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(rows  *  residual);  [CE]  cannot  find  symbol  residual  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(rows  *  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(rows  *  residual);	  chiSquare    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  residual	143	None	replace
617	[BUG]  [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.max(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2;  double  chiSquare  =  Math.max(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    *    2;    double  chiSquare  =  Math.max(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	146	None	add
618	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  cannot  find  symbol  remainder	40	None	replace
619	[BUG]  [BUGGY]  chiSquare  +=  remaining  *  residual  /  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  remaining  *  residual  /  residuals[i];  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  remaining  *  residual  /  residuals[i];	  chiSquare    +=    residual    *    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	122	None	replace
620	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	replace
621	[BUG]  [BUGGY]  return(this.period  <  =  chiSquare)?  this.period  :  chiSquare;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return(this.period  <  =  chiSquare)?  this.period  :  chiSquare;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return(this.period  <  =  chiSquare)?  this.period  :  chiSquare;	  return    this.period;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
622	[BUG]  [BUGGY]  return(this.period  <  =  chiSquare)?  this.period  :  residual;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return(this.period  <  =  chiSquare)?  this.period  :  residual;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return(this.period  <  =  chiSquare)?  this.period  :  residual;	  return    this.period;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
623	[BUG]  [BUGGY]  return  chiSquare  /  2  +  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2  +  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  2  +  Math.sqrt(remainder);	  return    chiSquare    /    2;    	non-compiled	[CE]  cannot  find  symbol  remainder	6	None	replace
624	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  not  a  statement	96	None	replace
625	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  not  a  statement  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  not  a  statement	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    j    	non-compiled	[CE]  not  a  statement	151	None	replace
626	[BUG]  [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	while(i  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
627	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(result  *  residual);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(result  *  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(result  *  residual);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  result	79	None	replace
628	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remainder	73	None	replace
629	[BUG]  [BUGGY]  return  chiSquare  *  2;  chiSquare  +=  2;  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2;  chiSquare  +=  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  2;  chiSquare  +=  2;	  return    chiSquare    +    2;    chiSquare    +=    2;    	non-compiled	[CE]  unreachable  statement	31	None	replace
630	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.max(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	161	None	replace
631	[BUG]  [BUGGY]  chiSquare  +=  Math.max(remainder,  i);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.max(remainder,  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.max(remainder,  i);	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.max(remainder,    i);    }    	non-compiled	[CE]  cannot  find  symbol  remainder	161	None	replace
632	[BUG]  [BUGGY]  restul  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  restul  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	restul  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  not  a  statement	119	None	replace
633	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
634	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
635	[BUG]  [BUGGY]  return  chiSquare  /  2;  double  chiSquare  /  2;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2;  double  chiSquare  /  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    2;    double  chiSquare  /  2;	  	non-compiled	[CE]  ';'  expected	5	None	add
636	[BUG]  [BUGGY]  return  chiSquare  /  2;  chiSquare  /  2  =  Math.max(remainder,  chiSquare);  [CE]  unexpected  type  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  2;  chiSquare  /  2  =  Math.max(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    2;    chiSquare  /  2  =  Math.max(remainder,  chiSquare);	  	non-compiled	[CE]  unexpected  type	5	None	add
637	[BUG]  [BUGGY]  return  jFrame.getChiSquare();  [CE]  cannot  find  symbol  jFrame  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  jFrame.getChiSquare();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  jFrame.getChiSquare();	  return    jF.getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  jFrame	55	None	replace
638	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement    	non-compiled	[CE]  not  a  statement	158	None	replace
639	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement;    }    	non-compiled	[CE]  not  a  statement	157	None	replace
640	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
641	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining  *  chiSquare);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining  *  chiSquare);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    chiSquare);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
642	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.cos(remainder  *  i);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.cos(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.cos(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	129	None	replace
643	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	36	None	replace
644	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	36	None	replace
645	[BUG]  [BUGGY]  double  chiSquare  =  Math.cos(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.cos(remainder);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.cos(remainder);	  double    chiSquare    =    Math.sqrt(period);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	92	None	replace
646	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  0;  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  0;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  0;	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    	non-compiled	[CE]  '.class'  expected	149	None	replace
647	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variant,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(variant,  jF);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(variant,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	28	None	replace
648	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  residual);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  residual);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
649	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
650	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  4;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  4;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  residual  *  /  4;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
651	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols    *    cols.length;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
652	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols  *  cols.length;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols  *  cols.length;  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols  *  cols.length;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols    *    cols.length;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
653	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols  *  cols.length;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols  *  cols.length;  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  chiSquare  +=  cols  *  cols.length;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols    *    cols.length;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
654	[BUG]  [BUGGY]  restul  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  restul  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	restul  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	103	None	replace
655	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    	non-compiled	[CE]  not  a  statement	95	None	replace
656	[BUG]  [BUGGY]  return  chiSquare  +  cost;  double  chiSquare  =  Math.sqrt(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  double  chiSquare  =  Math.sqrt(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    double  chiSquare  =  Math.sqrt(remainder);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	20	None	add
657	[BUG]  [BUGGY]  return  chiSquare  +  cost;  double  cost  =  Math.sqrt(remaining);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  cost;  double  cost  =  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    cost;    double  cost  =  Math.sqrt(remaining);	  	non-compiled	[CE]  cannot  find  symbol  remaining	20	None	add
658	[BUG]  [BUGGY]  chiSquare  +=  Math.min(remainder,  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.min(remainder,  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.min(remainder,  chiSquare);	  chiSquare    +=    Math.min(remainder,    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	160	None	replace
659	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
660	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder,  0,  0);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder,  0,  0);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.max(remainder,  0,  0);	  return    chiSquare    +    1;    chiSquare    +=    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  remainder	76	None	replace
661	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    resin    	non-compiled	[CE]  not  a  statement	141	None	replace
662	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    resin    	non-compiled	[CE]  ';'  expected	141	None	replace
663	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(reciterion);  [CE]  cannot  find  symbol  reciterion  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(reciterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(reciterion);	  return    chiSquare    +    1;    chiSquare    +=    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  reciterion	153	None	replace
664	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    jF.getVariables();    chiSquare    +=    jacobianEvaluations    *    residual    	non-compiled	[CE]  not  a  statement	139	None	replace
665	[BUG]  [BUGGY]  return  chiSquare  *  2  +  super.getChiSquare();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  *  2  +  super.getChiSquare();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  2  +  super.getChiSquare();	  return    chiSquare    *    2;    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
666	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare,  chiSquare  +=  jSquare  *  /  residuals  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare,  chiSquare  +=  jSquare  *  /  residuals  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare,  chiSquare  +=  jSquare  *  /  residuals	  final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
667	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	128	None	replace
668	[BUG]  [BUGGY]  luate(rows,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	128	None	replace
669	[BUG]  [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.max(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  1;  double  chiSquare  =  Math.max(remainder,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    /    1;    double  chiSquare  =  Math.max(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	29	None	add
670	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  4;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
671	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  0;  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  '.class'  expected	14	None	replace
672	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  0;  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  '.class'  expected	14	None	replace
673	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
674	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  not  a  statement	56	None	replace
675	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  col  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  col  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  col	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    chiSquare    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  not  a  statement	56	None	replace
676	[BUG]  [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    	non-compiled	[CE]  not  a  statement	86	None	replace
677	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    	non-compiled	[CE]  not  a  statement	70	None	replace
678	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  residual  /  residuals[i];  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  residual  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  residual  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    double    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	110	None	replace
679	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    double    *    /    residualsWeights[i];    }    	non-compiled	[CE]  ';'  expected	110	None	replace
680	[BUG]  [BUGGY]  remaining  +=  Math.sqrt(remaining);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  +=  Math.sqrt(remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  +=  Math.sqrt(remaining);	  return    chiSquare    +    1;    double    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  remaining	115	None	replace
681	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >=    not    a    statement    	non-compiled	[CE]  not  a  statement	105	None	replace
682	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  2);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  2);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  2);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  '.class'  expected	48	None	replace
683	[BUG]  [BUGGY]  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	replace
684	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(remainder,  0,  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(remainder,  0,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.max(remainder,  0,  chiSquare);	  return    chiSquare    +    1;    chiSquare    =    Math.max(remaining,    0);    	non-compiled	[CE]  cannot  find  symbol  remainder	77	None	replace
685	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  residuals.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  /  residuals.length;	  return    chiSquare    /    residuals;    	compilable	  [FE]  AssertionFailedError  	18	1	replace
686	[BUG]  [BUGGY]  return  chiSquare  /  residuals.length;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  /  residuals.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  residuals.length;	  return    chiSquare    /    residuals;    	compilable	  [FE]  AssertionFailedError  	18	1	replace
687	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  /  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  /  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  /  chiSquare);	  final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	156	None	replace
688	[BUG]  [BUGGY]  return  this.chiSquare.doubleValue();  [CE]  cannot  find  symbol  chiSquare  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  this.chiSquare.doubleValue();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  this.chiSquare.doubleValue();	  return    chiSquare.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  chiSquare	89	None	replace
689	[BUG]  [BUGGY]  return  jF.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  jF.doubleValue();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  jF.doubleValue();	  return    chiSquare.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
690	[BUG]  [BUGGY]  remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.max(remainder,    i);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
691	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  0;  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	13	None	replace
692	[BUG]  [BUGGY]  luate(rows,  chiSquare)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  chiSquare)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  chiSquare)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    residuals.length;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
693	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  cols;  ++i)  {  final  double  chiSquare  =  0;  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  '.class'  expected	16	None	replace
694	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.cos(remaining  *  residual);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.cos(remaining  *  residual);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.cos(remaining  *  residual);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
695	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  not  a  statement  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  >>  not  a  statement	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    j    	non-compiled	[CE]  not  a  statement	97	None	replace
696	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residual  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residual  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residual	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	150	None	replace
697	[BUG]  [BUGGY]  luate(rows,  i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    residual    *    /    residuals[i];    }    	non-compiled	[CE]  ';'  expected	124	None	replace
698	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	136	None	replace
699	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  4;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  4;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  4;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    	non-compiled	[CE]  '.class'  expected	44	None	replace
700	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.min(chiSquare,  residual);  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.min(chiSquare,  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  1;  chiSquare  =  Math.min(chiSquare,  residual);	  return    chiSquare    +    2;    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  residual	35	None	replace
701	[BUG]  [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.min(period,  chiSquare);  [CE]  cannot  find  symbol  period  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.min(period,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  2;  chiSquare  =  Math.min(period,  chiSquare);	  return    chiSquare    +    2;    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  period	35	None	replace
702	[BUG]  [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.min(chiSquare,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.min(chiSquare,  remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  2;  chiSquare  =  Math.min(chiSquare,  remaining);	  return    chiSquare    +    2;    chiSquare    =    Math.min(remaining,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remaining	35	None	replace
703	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(millis  *  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(millis  *  residual);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(millis  *  residual);	  double    chiSquare    =    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	66	None	replace
704	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    >>    not    a    statement    	non-compiled	[CE]  not  a  statement	104	None	replace
705	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(rows,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(rows,  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(rows,  i);	  double    chiSquare    =    Math.sqrt(remainder,    i);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	94	None	replace
706	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(jF,  residual,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  double  chiSquare  =  Math.sqrt(jF,  residual,  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(jF,  residual,  i);	  double    chiSquare    =    Math.sqrt(remainder,    i);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	94	None	replace
707	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  0;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  0;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	106	None	replace
708	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  0;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  0;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	106	None	replace
709	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  chiSquare;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	106	None	replace
710	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  0;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  0;  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  return  0;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	71	None	replace
711	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	144	None	replace
712	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	144	None	replace
713	[BUG]  [BUGGY]  luate(rows,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	144	None	replace
714	[BUG]  [BUGGY]  final  double  chiSquare  =  1.0;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  final  double  chiSquare  =  1.0;  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  1.0;	  final    double    chiSquare    =    0;    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	148	None	replace
715	[BUG]  [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	while(i  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    remaining    *    /    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
716	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	102	None	replace
717	[BUG]  [BUGGY]  remaining  *=  2  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  remaining  *=  2  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  *=  2  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	  remaining    *=    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
718	[BUG]  [BUGGY]  luate(rows,  1)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  luate(rows,  1)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  1)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    i;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
719	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS!=    not    a    statement    	non-compiled	[CE]  not  a  statement	47	None	replace
720	[BUG]  [BUGGY]  return  chiSquare,  chiSquare.doubleValues;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare,  chiSquare.doubleValues;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare,  chiSquare.doubleValues;	  return    chiSquare.doubleValues;    	non-compiled	[CE]  ';'  expected	90	None	replace
721	[BUG]  [BUGGY]  return  this.chiSquare.doubleValues;  [CE]  cannot  find  symbol  chiSquare  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  this.chiSquare.doubleValues;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  this.chiSquare.doubleValues;	  return    chiSquare.doubleValues;    	non-compiled	[CE]  cannot  find  symbol  chiSquare	90	None	replace
722	[BUG]  [BUGGY]  if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	  if(remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
723	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	37	None	replace
724	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(variable,  chiSquare);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  return  chiSquare  +  Math.sqrt(variable,  chiSquare);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(variable,  chiSquare);	  return    chiSquare    +    Math.sqrt(variable);    	non-compiled	[CE]  cannot  find  symbol  	100	None	replace
725	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  jF,  i);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }      [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  jF,  i);  [BUGGY]      return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remainder  *  jF,  i);	  chiSquare    +=    Math.sqrt(remainder    *    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	127	None	replace
