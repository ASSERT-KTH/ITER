bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	9	None	replace
2	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
3	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	9	None	replace
4	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiS  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiS  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiS	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  /  2;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  /  2;	  return    chiSquare    +    2;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
6	[BUG]  [BUGGY]  return  chiSquare  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  /  2;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  2;	  return    chiSquare    +    2;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  3;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  +  3;	  return    chiSquare    +    2;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
8	[BUG]  [BUGGY]  return  chiSquare  +  3;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  3;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  3;	  return    chiSquare    +    2;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
9	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
10	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
11	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
12	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  remaining);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  remaining);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  remaining);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	19	None	replace
14	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  0;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  columns	19	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  chiSquare  =  0;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	19	None	replace
17	[BUG]  [BUGGY]  return  chiSquare  /  residualsWeights;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  /  residualsWeights;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  residualsWeights;	  return    chiSquare    /    residual;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	15	None	replace
18	[BUG]  [BUGGY]  return  chiSquare  /  residuals;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  /  residuals;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  residuals;	  return    chiSquare    /    residual;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	15	None	replace
19	[BUG]  [BUGGY]  return  chiSquare  /  result;  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  /  result;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  result;	  return    chiSquare    /    residual;    	non-compiled	[CE]  cannot  find  symbol  result	15	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  cost;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  +  cost;	  return    chiSquare    +    residual;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
21	[BUG]  [BUGGY]  return  chiSquare  +  cost;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  cost;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  cost;	  return    chiSquare    +    residual;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
22	[BUG]  [BUGGY]  return  chiSquare  +  Cost;  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  Cost;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Cost;	  return    chiSquare    +    residual;    	non-compiled	[CE]  cannot  find  symbol  Cost	2	None	replace
23	[BUG]  [BUGGY]  return  chiSquare  +  result;  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  result;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  result;	  return    chiSquare    +    residual;    	non-compiled	[CE]  cannot  find  symbol  result	2	None	replace
24	[BUG]  [BUGGY]  return  chiSquare  +  price;  [CE]  cannot  find  symbol  price  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  price;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  price;	  return    chiSquare    +    residual;    	non-compiled	[CE]  cannot  find  symbol  price	2	None	replace
25	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  cost);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  cost);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	12	None	replace
26	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(period,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(period,  residual);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(period,  residual);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	12	None	replace
27	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(rows,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(rows,  residual);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(rows,  residual);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	12	None	replace
28	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(jF,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(jF,  residual);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(jF,  residual);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	12	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  /  1;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  /  1;	  return    chiSquare    +    1;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
30	[BUG]  [BUGGY]  return  chiSquare  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  /  1;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  1;	  return    chiSquare    +    1;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
31	[BUG]  [BUGGY]  return  chiSquare  +  2;  chiSquare  +=  2;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  2;  chiSquare  +=  2;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    2;    chiSquare  +=  2;	  	non-compiled	[CE]  unreachable  statement	16	None	add
32	[BUG]  [BUGGY]  return  chiSquare  +  2;  chiSquare  +  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  2;  chiSquare  +  2;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    2;    chiSquare  +  2;	  	non-compiled	[CE]  not  a  statement	16	None	add
33	[BUG]  [BUGGY]  return  chiSquare  +  2;  double  chiSquare  =  Math.sqrt(remaining);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  2;  double  chiSquare  =  Math.sqrt(remaining);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    2;    double  chiSquare  =  Math.sqrt(remaining);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	add
34	[BUG]  [BUGGY]  return  chiSquare  +  2;  double  chiSquare  =  Math.min(remaining,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  2;  double  chiSquare  =  Math.min(remaining,  chiSquare);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    2;    double  chiSquare  =  Math.min(remaining,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	add
35	[BUG]  [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.min(remaining,  chiSquare);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.min(remaining,  chiSquare);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    2;    chiSquare  =  Math.min(remaining,  chiSquare);	  	non-compiled	[CE]  cannot  find  symbol  remaining	16	None	add
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	10	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	10	None	replace
38	[BUG]  [BUGGY]  remaining  *=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  *=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  *=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
39	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	10	None	replace
40	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  '.class'  expected	11	None	replace
41	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
42	[BUG]  [BUGGY]  if(remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
44	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  '.class'  expected	18	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  return  chiSquare;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS!=  not  a  statement	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	18	None	replace
48	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
49	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
50	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
51	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
52	[BUG]  [BUGGY]  return  this.chiSquare;  [CE]  cannot  find  symbol  chiSquare  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  this.chiSquare;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  this.chiSquare;	  return    residual;    	non-compiled	[CE]  cannot  find  symbol  chiSquare	1	None	replace
53	[BUG]  [BUGGY]  return  result;  [CE]  cannot  find  symbol  result  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  result;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  result;	  return    residual;    	non-compiled	[CE]  cannot  find  symbol  result	1	None	replace
54	[BUG]  [BUGGY]  return  this.period;  [CE]  cannot  find  symbol  period  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  this.period;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  this.period;	  return    residual;    	non-compiled	[CE]  cannot  find  symbol  period	1	None	replace
55	[BUG]  [BUGGY]  return  jF.getChiSquare();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  jF.getChiSquare();  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  jF.getChiSquare();	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
56	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i];  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
57	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols  *  cols.length;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
58	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  chiSquare  +=  cols[i]  *  cols[i]	      	non-compiled	[CE]  ';'  expected	5	None	replace
59	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(reciterion);  [CE]  cannot  find  symbol  reciterion  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  Math.sqrt(reciterion);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(reciterion);	  return    chiSquare    +    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  reciterion	21	None	replace
60	[BUG]  [BUGGY]  return  residuals  +  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  residuals  +  Math.sqrt(remainder);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  residuals  +  Math.sqrt(remainder);	  return    chiSquare    +    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  remainder	21	None	replace
61	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(jF);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  Math.sqrt(jF);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(jF);	  return    chiSquare    +    Math.sqrt(remainder);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	21	None	replace
62	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
63	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
65	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  cost);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining,  cost);	      double    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	14	None	replace
66	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  *  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  *  residual);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining  *  residual);	      double    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	14	None	replace
67	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(remaining  +  1);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remaining  +  1);	      double    chiSquare    =    Math.sqrt(remaining);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	14	None	replace
68	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	20	None	replace
69	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residuals  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residuals  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residuals	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
70	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	20	None	replace
71	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	20	None	replace
72	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  '.class'  expected	7	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	7	None	replace
74	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
75	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
76	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining,  0);  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining,  0);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    chiSquare  +=  Math.max(remaining,  0);	  	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	add
77	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(remaining,  0);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.max(remaining,  0);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    chiSquare  =  Math.max(remaining,  0);	  	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	add
78	[BUG]  [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.min(remaining,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.min(remaining,  i);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    double  chiSquare  =  Math.min(remaining,  i);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	add
79	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  residual);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining  *  residual);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    chiSquare  +=  Math.max(remaining  *  residual);	  	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	add
80	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining,  i);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.max(remaining,  i);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    chiSquare  +=  Math.max(remaining,  i);	  	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	add
81	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  residuals;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
82	[BUG]  [BUGGY]  return  chiSquare  +  2;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  2;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    2;    double  chiSquare  =  Math.min(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	add
83	[BUG]  [BUGGY]  return  chiSquare  +  2;  double  chiSquare  =  Math.max(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  2;  double  chiSquare  =  Math.max(remainder,  chiSquare);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    2;    double  chiSquare  =  Math.max(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	add
84	[BUG]  [BUGGY]  return  chiSquare  +  2;  double  chiSquare  =  Math.sqrt(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  2;  double  chiSquare  =  Math.sqrt(remainder);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    2;    double  chiSquare  =  Math.sqrt(remainder);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	add
85	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
86	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
87	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
88	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
89	[BUG]  [BUGGY]  return  chiSquare.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare.doubleValue();  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare.doubleValue();	  return    residual;    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
90	[BUG]  [BUGGY]  return  chiSquare.doubleValues;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare.doubleValues;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare.doubleValues;	  return    residual;    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
91	[BUG]  [BUGGY]  return  chiSquare  /  residualsWights;  [CE]  cannot  find  symbol  residualsWights  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  /  residualsWights;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  residualsWights;	  return    chiSquare    /    residual;    	non-compiled	[CE]  cannot  find  symbol  residualsWights	15	None	replace
92	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(period);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(period);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(period);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	12	None	replace
93	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(ji,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(ji,  residual);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(ji,  residual);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	12	None	replace
94	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  i);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(remainder,  i);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	12	None	replace
95	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	20	None	replace
96	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	20	None	replace
97	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	20	None	replace
98	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(value);  [CE]  cannot  find  symbol  value  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  Math.sqrt(value);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(value);	  return    chiSquare    +    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  value	21	None	replace
99	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(period);  [CE]  cannot  find  symbol  period  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  Math.sqrt(period);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(period);	  return    chiSquare    +    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  period	21	None	replace
100	[BUG]  [BUGGY]  return  chiSquare  +  Math.sqrt(variable);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  Math.sqrt(variable);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Math.sqrt(variable);	  return    chiSquare    +    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  	21	None	replace
101	[BUG]  [BUGGY]  return  chiSquare  +  value;  [CE]  cannot  find  symbol  value  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  value;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  value;	  return    chiSquare    +    residual;    	non-compiled	[CE]  cannot  find  symbol  value	2	None	replace
102	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
103	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	18	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >=  not  a  statement	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	18	None	replace
106	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	18	None	replace
107	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
108	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
109	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.cos(remaining);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
110	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  double  *  /  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  residual  *  /  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
113	[BUG]  [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.min(remainder,  chiSquare);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    double  chiSquare  =  Math.min(remainder,  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	add
114	[BUG]  [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.sqrt(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.sqrt(remainder);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    double  chiSquare  =  Math.sqrt(remainder);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	add
115	[BUG]  [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.sqrt(remaining);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.sqrt(remaining);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    double  chiSquare  =  Math.sqrt(remaining);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	add
116	[BUG]  [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.max(result,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.max(result,  0);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    double  chiSquare  =  Math.max(result,  0);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	add
117	[BUG]  [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	add
118	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
119	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  0;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
120	[BUG]  [BUGGY]  return  chiSquare  +  Cost.parseDouble(remainder);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  Cost.parseDouble(remainder);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Cost.parseDouble(remainder);	  return    chiSquare    +    residual;    	non-compiled	[CE]  cannot  find  symbol  remainder	2	None	replace
121	[BUG]  [BUGGY]  return  chiSquare  +  Cost.doubleValue();  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  Cost.doubleValue();  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  +  Cost.doubleValue();	  return    chiSquare    +    residual;    	non-compiled	[CE]  cannot  find  symbol  Cost	2	None	replace
122	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  residualsWeights[i];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  chiSquare  +=  residual  *  /  residualsWeights[i];  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  residual  *  /  residualsWeights[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
123	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  remaining  *  /  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
124	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  residual  *  /  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    residual    *    /    residualsWeights[i];    }    	non-compiled	[CE]  ';'  expected	6	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  *  1;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  *  1;	  return    chiSquare    +    1;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
126	[BUG]  [BUGGY]  return  chiSquare  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  *  1;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  1;	  return    chiSquare    +    1;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
127	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  i);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  i);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remainder  *  i);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  cannot  find  symbol  remainder	13	None	replace
128	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
129	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remainder  *  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remainder    *    i);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  /  chiSquare;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  /  chiSquare;	  return    chiSquare    /    residual;    	compilable	  [FE]  AssertionFailedError  	15	1	replace
131	[BUG]  [BUGGY]  return  chiSquare  /  chiSquare;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  /  chiSquare;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  /  chiSquare;	  return    chiSquare    /    residual;    	compilable	  [FE]  AssertionFailedError  	15	1	replace
132	[BUG]  [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.max(remainder,  chiSquare);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  2;  chiSquare  =  Math.max(remainder,  chiSquare);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    2;    chiSquare  =  Math.max(remainder,  chiSquare);	  	non-compiled	[CE]  cannot  find  symbol  remainder	16	None	add
133	[BUG]  [BUGGY]  return  iSquare;  [CE]  cannot  find  symbol  iSquare  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  iSquare;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  iSquare;	  return    residual;    	non-compiled	[CE]  cannot  find  symbol  iSquare	1	None	replace
134	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(value);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(value);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(value);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	12	None	replace
135	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variant);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  double  chiSquare  =  Math.sqrt(variant);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	double  chiSquare  =  Math.sqrt(variant);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	12	None	replace
136	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
137	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.log(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.log(remaining    *    chiSquare);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
138	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(remaining  *  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(remaining    *    chiSquare);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
139	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  residual	      	non-compiled	[CE]  ';'  expected	5	None	replace
140	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
141	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  jF.getVariables();  chiSquare  +=  jacobianEvaluations  *  resin	      	non-compiled	[CE]  ';'  expected	5	None	replace
142	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining  *  residual);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
143	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  residual);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  chiSquare  +=  Math.sqrt(remaining  *  residual);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.sqrt(remaining  *  residual);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining    *    residual);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	8	None	replace
144	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
145	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  chiSquare  +=  Math.sqrt(remaining);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.sqrt(remaining);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  *  2;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	return  chiSquare  *  2;	  return    chiSquare    +    2;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
147	[BUG]  [BUGGY]  return  chiSquare  *  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  *  2;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return  chiSquare  *  2;	  return    chiSquare    +    2;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
148	[BUG]  [BUGGY]  final  double  chiSquare  =  0;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  final  double  chiSquare  =  0;  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  0;	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	19	None	replace
149	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  0;	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    0;    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
150	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residuals  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residuals  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  /  residuals	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	20	None	replace
151	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  j	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	20	None	replace
152	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiSquare  +=  jSquare  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiSquare    +=    jSquare    *    /    residuals    	non-compiled	[CE]  not  a  statement	20	None	replace
153	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(remaining);  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(remaining);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    chiSquare  +=  Math.sqrt(remaining);	  	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	add
154	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  chiSquare  +=  Math.sqrt(remainder);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    chiSquare  +=  Math.sqrt(remainder);	  	non-compiled	[CE]  cannot  find  symbol  remainder	3	None	add
155	[BUG]  [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.sqrt(remaining);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  return  chiSquare  +  1;  chiSquare  =  Math.sqrt(remaining);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	return    chiSquare    +    1;    chiSquare  =  Math.sqrt(remaining);	  	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	add
156	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	18	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	18	None	replace
158	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  chiS  >>  not  a  statement	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(remainder    *    chiSquare);    chiS    	non-compiled	[CE]  not  a  statement	18	None	replace
159	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.min(remainder,  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
160	[BUG]  [BUGGY]  chiSquare  +=  Math.min(remainder,  i);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  chiSquare  +=  Math.min(remainder,  i);  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	chiSquare  +=  Math.min(remainder,  i);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
161	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }  [BUGGY]    return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainder,  i);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    chiSquare    +=    Math.min(remainder,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
