bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i];  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i];	  double    sum    =(jTj    <    0)?    0    :    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
2	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  int  rows  =  getRowCount()  -  1;  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getRowCount()  -  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
3	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  int  rows  =  getRowCount()  +  1;  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getRowCount()  +  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
4	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  2;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  int  rows  =  getRowCount()  -  2;  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getRowCount()  -  2;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
5	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  jTj.length;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  int  rows  =  getRowCount()  +  jTj.length;  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getRowCount()  +  jTj.length;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
6	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	9	None	replace
7	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	9	None	replace
8	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  incompatible  types	9	None	replace
9	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length;	  double    sum    =(jTj    <    0)?    0    :    jTj.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
10	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i].length;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i].length;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i].length;	  double    sum    =(jTj    <    0)?    0    :    jTj.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	20	None	replace
11	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  +  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  +  1;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj.length  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	20	None	replace
12	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  i.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj,  i.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
13	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTjF.doubleValue();  [CE]  cannot  find  symbol  jTjF  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTjF.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTjF.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jTjF	15	None	replace
14	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  null)?  0  :  jTj.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
15	[BUG]  [BUGGY]  double  sum  =  jtj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  jtj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jtj.doubleValue();	  double    sum    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	4	None	replace
16	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  +  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  jTj.doubleValue()  +  jTj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  +  jTj.doubleValue();	  double    sum    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
17	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  jTj.doubleValue()  *  jTj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  *  jTj.doubleValue();	  double    sum    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
18	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][i];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][i];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[rows][i];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	14	None	replace
19	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][i];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][i];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][i];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	14	None	replace
20	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][j];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][j];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][j];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	14	None	replace
21	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][j];  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  cols  =  new  double[cols][j];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][j];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  incompatible  types	14	None	replace
22	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols].doubleValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][cols].doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols].doubleValue();	      double[][]    rows    =    new    double[cols][jTj].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
23	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  1].doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  1].doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  1].doubleValue();	      double[][]    rows    =    new    double[cols][jTj].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
24	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  jTj.doubleValue();  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  jTj.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  jTj.doubleValue();	      double[][]    rows    =    new    double[cols][jTj].doubleValue();    	non-compiled	[CE]  ']'  expected	8	None	replace
25	[BUG]  [BUGGY]  double  rows  =  jtj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  rows  =  jtj.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jtj.doubleValue();	      double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	11	None	replace
26	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  +  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  rows  =  jTj.doubleValue()  +  jTj.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj.doubleValue()  +  jTj.doubleValue();	      double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
27	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  *  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  rows  =  jTj.doubleValue()  *  jTj.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj.doubleValue()  *  jTj.doubleValue();	      double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
28	[BUG]  [BUGGY]  double[][]  rows  =  cols.getColumns();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  cols.getColumns();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  cols.getColumns();	      double[][]    rows    =    jTj.getColumns();    	non-compiled	[CE]  int  cannot  be  dereferenced	19	None	replace
29	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  cols.getColumns();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  jTj,  cols.getColumns();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj,  cols.getColumns();	      double[][]    rows    =    jTj.getColumns();    	non-compiled	[CE]  ';'  expected	19	None	replace
30	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  incompatible  types	10	None	replace
31	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	10	None	replace
32	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	10	None	replace
33	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
34	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i].doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i].doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	16	None	replace
35	[BUG]  [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTj.doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  1)?  0  :  jTj.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	16	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj  ==  null)?  0  :  jTj.length;	  double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
37	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj.length;	  double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
38	[BUG]  [BUGGY]  double  sum  =  1;  double  sum  =  1;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  1;  double  sum  =  1;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =    1;    double  sum  =  1;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	1	None	add
39	[BUG]  [BUGGY]  double  sum  =  1;  Double  sum  =  1;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  1;  Double  sum  =  1;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =    1;    Double  sum  =  1;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	1	None	add
40	[BUG]  [BUGGY]  double  sum  =  1;  int  sum  =  1;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  1;  int  sum  =  1;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =    1;    int  sum  =  1;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	1	None	add
41	[BUG]  [BUGGY]  double  sum  =  1;  long  sum  =  1;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  1;  long  sum  =  1;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =    1;    long  sum  =  1;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	1	None	add
42	[BUG]  [BUGGY]  int  rows  =  jTj.length();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  int  rows  =  jTj.length();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.length();	      int    rows    =    jTj.size();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
43	[BUG]  [BUGGY]  int  rows  =  cols.size();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  int  rows  =  cols.size();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  cols.size();	      int    rows    =    jTj.size();    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
44	[BUG]  [BUGGY]  int  rows  =  jTj.length;  [CE]  cannot  find  symbol  sum  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  int  rows  =  jTj.length;  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.length;	      int    rows    =    jTj.size();    	non-compiled	[CE]  cannot  find  symbol  sum	17	None	replace
45	[BUG]  [BUGGY]  double  sum  =(j  <  i)?  0  :  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(j  <  i)?  0  :  jTj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(j  <  i)?  0  :  jTj.doubleValue();	  double    sum    =(i    <    j)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
46	[BUG]  [BUGGY]  double  sum  =(jTj  <  i)?  0  :  jTj.doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  i)?  0  :  jTj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  i)?  0  :  jTj.doubleValue();	  double    sum    =(i    <    j)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	3	None	replace
47	[BUG]  [BUGGY]  double  sum  =(j  <  i)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(j  <  i)?  0  :  jTj,  i.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(j  <  i)?  0  :  jTj,  i.doubleValue();	  double    sum    =(i    <    j)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
48	[BUG]  [BUGGY]  double[][]  rows  =  jtj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  jtj.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jtj.doubleValue();	      double[][]    rows    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	12	None	replace
49	[BUG]  [BUGGY]  double[][]  rows  =  cols.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  cols.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  cols.doubleValue();	      double[][]    rows    =    jTj.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
50	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  jTj,  i.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj,  i.doubleValue();	      double[][]    rows    =    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
51	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[rows][cols];	      double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	13	None	replace
52	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][cols];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols];	      double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	13	None	replace
53	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  1];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  -  1];	      double[][]    rows    =    new    double[cols][jTj.length];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	7	None	replace
54	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  1];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  +  1];	      double[][]    rows    =    new    double[cols][jTj.length];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	7	None	replace
55	[BUG]  [BUGGY]  double[][]  rows  =  jTj.getCols();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  jTj.getCols();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj.getCols();	      double[][]    rows    =    jTj.getRows();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
56	[BUG]  [BUGGY]  double[][]  rows  =  cols.getRows();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  cols.getRows();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  cols.getRows();	      double[][]    rows    =    jTj.getRows();    	non-compiled	[CE]  int  cannot  be  dereferenced	6	None	replace
57	[BUG]  [BUGGY]  double[][]  rows  =  jTjF.getRows();  [CE]  cannot  find  symbol  jTjF  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  jTjF.getRows();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTjF.getRows();	      double[][]    rows    =    jTj.getRows();    	non-compiled	[CE]  cannot  find  symbol  jTjF	6	None	replace
58	[BUG]  [BUGGY]  double  rows  =  jTjF.doubleValue();  [CE]  cannot  find  symbol  jTjF  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  rows  =  jTjF.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTjF.doubleValue();	      double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jTjF	11	None	replace
59	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj.doubleValue();  [CE]  incomparable  types:  double[][]  and  int  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	16	None	replace
60	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  incompatible  types	9	None	replace
61	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length];  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][jTj.length];	      	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	5	None	replace
62	[BUG]  [BUGGY]  int  rows  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  int  rows  =  getColumnCount();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getColumnCount();	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
63	[BUG]  [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  :  0;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  :  0;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  >  0)?  jTj.doubleValue()  :  0;	  double    sum    =    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
64	[BUG]  [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  :  1;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  :  1;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  >  0)?  jTj.doubleValue()  :  1;	  double    sum    =    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(i  <  jTj.length)?  0  :  0;	  double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
66	[BUG]  [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  <  jTj.length)?  0  :  0;	  double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
67	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  -  1].doubleValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  -  1].doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  -  1].doubleValue();	      double[][]    rows    =    new    double[cols][jTj].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
68	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  i].doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  i].doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  i].doubleValue();	      double[][]    rows    =    new    double[cols][jTj].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
69	[BUG]  [BUGGY]  double[][]  rows  =  jTjF.getColumns();  [CE]  cannot  find  symbol  jTjF  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  jTjF.getColumns();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTjF.getColumns();	      double[][]    rows    =    jTj.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jTjF	19	None	replace
70	[BUG]  [BUGGY]  double  sum  =(i  <  jTj)?  0  :  jTj.doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(i  <  jTj)?  0  :  jTj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  <  jTj)?  0  :  jTj.doubleValue();	  double    sum    =(i    <    j)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	3	None	replace
71	[BUG]  [BUGGY]  int  rows  =  jTj.size()  +  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  int  rows  =  jTj.size()  +  1;  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.size()  +  1;	      int    rows    =    jTj.size();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
72	[BUG]  [BUGGY]  double  sum  =  jTjF.doubleValue();  [CE]  cannot  find  symbol  jTjF  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  jTjF.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTjF.doubleValue();	  double    sum    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jTjF	4	None	replace
73	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  +  i;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  jTj.doubleValue()  +  i;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  +  i;	  double    sum    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
74	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][i];  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  cols  =  new  double[cols][i];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][i];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  incompatible  types	14	None	replace
75	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  cols  =  new  double[cols][cols];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][cols];	      double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	13	None	replace
76	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  i.getColumns();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  jTj,  i.getColumns();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj,  i.getColumns();	      double[][]    rows    =    jTj.getColumns();    	non-compiled	[CE]  ';'  expected	19	None	replace
77	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jtj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jtj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  0  :  jtj.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	15	None	replace
78	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  [CE]  cannot  find  symbol  sum  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  row  =  new  double[cols][cols];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][cols];	      double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  cannot  find  symbol  sum	13	None	replace
79	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	10	None	replace
80	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  row  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	10	None	replace
81	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	10	None	replace
82	[BUG]  [BUGGY]  int  rows  =  jTj.getRowCount();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  int  rows  =  jTj.getRowCount();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.getRowCount();	      int    rows    =    jTj.size();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
83	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][i];  [CE]  cannot  find  symbol  sum  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  row  =  new  double[cols][i];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][i];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  cannot  find  symbol  sum	14	None	replace
84	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  i.getRows();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  jTj,  i.getRows();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj,  i.getRows();	      double[][]    rows    =    jTj.getRows();    	non-compiled	[CE]  ';'  expected	6	None	replace
85	[BUG]  [BUGGY]  double[][]  jacobian[][j]  =  jTj.doubleValue();  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  jacobian[][j]  =  jTj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jacobian[][j]  =  jTj.doubleValue();	      	non-compiled	[CE]  ']'  expected	5	None	replace
86	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][i].doubleValue();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][i].doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][i].doubleValue();	      	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	5	None	replace
87	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][j].doubleValue();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][j].doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][j].doubleValue();	      	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	5	None	replace
88	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jtj].doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][jtj].doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jtj].doubleValue();	      double[][]    rows    =    new    double[cols][jTj].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	8	None	replace
89	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  i.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
90	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jtj.doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jtj.doubleValue();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jtj.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	16	None	replace
91	[BUG]  [BUGGY]  double  sum  =  1;  int  rows  =  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  1;  int  rows  =  jTj.length;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =    1;    int  rows  =  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	1	None	add
92	[BUG]  [BUGGY]  double  sum  =  1;  int  rows  =  jTj.size();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  1;  int  rows  =  jTj.size();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =    1;    int  rows  =  jTj.size();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
93	[BUG]  [BUGGY]  double  sum  =  1;  int  rows  =  j.getRowCount();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =  1;  int  rows  =  j.getRowCount();  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =    1;    int  rows  =  j.getRowCount();	  	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	add
94	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols].length;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][cols].length;  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols].length;	      double[][]    rows    =    new    double[cols][jTj.length];    	non-compiled	[CE]  incompatible  types	7	None	replace
95	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols.length];  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  rows  =  new  double[cols][cols.length];  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols.length];	      double[][]    rows    =    new    double[cols][jTj.length];    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
96	[BUG]  [BUGGY]  double  rows  =  cols.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  rows  =  cols.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  cols.doubleValue();	      double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	11	None	replace
97	[BUG]  [BUGGY]  double  rows  =  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  rows  =  jTj,  i.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj,  i.doubleValue();	      double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	11	None	replace
98	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double[][]  row  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	      double[][]    rows    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	9	None	replace
99	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  rows;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  rows;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  rows;	  double    sum    =(jTj    <    0)?    0    :    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
100	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols;	  double    sum    =(jTj    <    0)?    0    :    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
101	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.length;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.length;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  i.length;	  double    sum    =(jTj    <    0)?    0    :    jTj.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;	  double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
103	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;	  double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  0)?  jTj.length  :  0;	  double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
105	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  0)?  jTj.length  :  0;	  double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;	  double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
107	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {    [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  [BUGGY]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;	  double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
