bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()].doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()].doubleValue();	  double[][]    rows    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
2	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][i].doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][i].doubleValue();	  double[][]    rows    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
3	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    rows    =    new    double[cols][jTj.length    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	31	None	replace
4	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    rows    =    new    double[cols][jTj.length    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  incompatible  types	31	None	replace
5	[BUG]  [BUGGY]  Double  sum  =  1;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  Double  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	Double  sum  =  1;	  double    sum    =    1;    Double    sum    =    1;    	non-compiled	[CE]  incompatible  types	39	None	replace
6	[BUG]  [BUGGY]  Double  sum  =  0;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  Double  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	Double  sum  =  0;	  double    sum    =    1;    Double    sum    =    1;    	non-compiled	[CE]  incompatible  types	39	None	replace
7	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  i;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  i;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  i;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	100	None	replace
8	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols,  jTj;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols,  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  cols,  jTj;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	100	None	replace
9	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i];  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i];	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols;    	non-compiled	[CE]  ']'  expected	100	None	replace
10	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  i);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  i);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  i);	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols;    	non-compiled	[CE]  ';'  expected	100	None	replace
11	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][j];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][j];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][j];	  double[][]    jTj    =    new    double[cols][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	20	None	replace
12	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][j];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][j];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[rows][j];	  double[][]    jTj    =    new    double[cols][j];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	20	None	replace
13	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    rows    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	79	None	replace
14	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    double  sum  =(jTj.length  >  0)?  jTj.length  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	104	None	add
15	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  Double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  Double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    Double  sum  =(jTj.length  >  0)?  jTj.length  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	104	None	add
16	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  int  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  int  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    int  sum  =(jTj.length  >  0)?  jTj.length  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	104	None	add
17	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  int  jTj.length  >  0)?  jTj.length  :  0;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  int  jTj.length  >  0)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    int  jTj.length  >  0)?  jTj.length  :  0;	  	non-compiled	[CE]  ';'  expected	104	None	add
18	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj];	  double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	52	None	replace
19	[BUG]  [BUGGY]  double[][]  rows  =  new  double[jTj][cols];  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[jTj][cols];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[jTj][cols];	  double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	52	None	replace
20	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jtj];  [CE]  cannot  find  symbol  jtj  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jtj];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jtj];	  double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  cannot  find  symbol  jtj	52	None	replace
21	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols];  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[rows][cols];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[rows][cols];	  double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	52	None	replace
22	[BUG]  [BUGGY]  double  sum  =(jTj.length)?  0  :  0;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length)?  0  :  0;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	non-compiled	[CE]  incompatible  types	66	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj.length)?  1  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(i  <  jTj.length)?  1  :  0;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	compilable	  [FE]  AssertionFailedError  	66	2	replace
24	[BUG]  [BUGGY]  double  sum  =(i  <  jTj.length)?  1  :  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj.length)?  1  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  <  jTj.length)?  1  :  0;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	compilable	  [FE]  AssertionFailedError  	66	2	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  <  i)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  <  i)?  0  :  0;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
26	[BUG]  [BUGGY]  double  sum  =(jTj.length  <  i)?  0  :  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  <  i)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  <  i)?  0  :  0;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
27	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj[i].doubleValue();  [CE]  incomparable  types:  double[][]  and  int  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj[i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj[i].doubleValue();	  double    sum    =(jTj    ==    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	59	None	replace
28	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    ==    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	59	None	replace
29	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jtj.doubleValue();  [CE]  incomparable  types:  double[][]  and  int  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jtj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  0)?  0  :  jtj.doubleValue();	  double    sum    =(jTj    ==    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	59	None	replace
30	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  +  1];  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  +  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols.length  +  1];	  double[][]    rows    =    new    double[cols][cols.length];    	non-compiled	[CE]  int  cannot  be  dereferenced	95	None	replace
31	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  1];  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols.length  -  1];	  double[][]    rows    =    new    double[cols][cols.length];    	non-compiled	[CE]  int  cannot  be  dereferenced	95	None	replace
32	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  cols.getRows();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jTj,  cols.getRows();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj,  cols.getRows();	  double[][]    rows    =    jTj,    i.getRows();    	non-compiled	[CE]  ';'  expected	84	None	replace
33	[BUG]  [BUGGY]  int  rows  =  cols.size()  -  1;  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  cols.size()  -  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  cols.size()  -  1;	  int    rows    =    cols.size();    	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
34	[BUG]  [BUGGY]  int  rows  =  cols.size()  -  2;  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  cols.size()  -  2;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  cols.size()  -  2;	  int    rows    =    cols.size();    	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
35	[BUG]  [BUGGY]  int[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  incompatible  types	30	None	replace
36	[BUG]  [BUGGY]  [][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  [][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
37	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  jtj.doubleValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  jtj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  *  jtj.doubleValue();	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
38	[BUG]  [BUGGY]  double  sum  =  jtj.doubleValue()  *  jTj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jtj.doubleValue()  *  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jtj.doubleValue()  *  jTj.doubleValue();	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	17	None	replace
39	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  jSquare.doubleValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  jSquare.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  *  jSquare.doubleValue();	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
40	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  i;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  i;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  *  i;	  double    sum    =    jTj.doubleValue()    +    i;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
41	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  +  jTj;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  +  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  +  jTj;	  double    sum    =    jTj.doubleValue()    +    i;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
42	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  *  jTj.doubleValue();  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  *  jTj.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  *  jTj.doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    /    jTj.doubleValue();    	non-compiled	[CE]  ']'  expected	24	None	replace
43	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  jTj.doubleValue();  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  jTj.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  jTj.doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    /    jTj.doubleValue();    	non-compiled	[CE]  ']'  expected	24	None	replace
44	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  jTj.doubleValue()  +  1;  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  jTj.doubleValue()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  jTj.doubleValue()  +  1;	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    /    jTj.doubleValue();    	non-compiled	[CE]  ']'  expected	24	None	replace
45	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj    ==    null)?    0    :    jTj.length;    double  sum  =(jTj  ==  null)?  0  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	36	None	add
46	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  Double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  Double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj    ==    null)?    0    :    jTj.length;    Double  sum  =(jTj  ==  null)?  0  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	36	None	add
47	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj!=  null)?  0  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj!=  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj    ==    null)?    0    :    jTj.length;    double  sum  =(jTj!=  null)?  0  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	36	None	add
48	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj  >=  null)?  0  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj  >=  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj    ==    null)?    0    :    jTj.length;    double  sum  =(jTj  >=  null)?  0  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	36	None	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[0][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  1)?  jTj[0][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
50	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[0][j]  :  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[0][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  1)?  jTj[0][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  1)?  jTj[i][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
52	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[i][j]  :  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  1)?  jTj[i][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  1)?  jTj[j][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
54	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[j][j]  :  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  1)?  jTj[j][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
55	[BUG]  [BUGGY]  double[][]  rows  =  jtj.getColumns();  [CE]  cannot  find  symbol  jtj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jtj.getColumns();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jtj.getColumns();	  double[][]    rows    =    cols.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jtj	28	None	replace
56	[BUG]  [BUGGY]  double[][]  rows  =  i.getColumns();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  i.getColumns();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  i.getColumns();	  double[][]    rows    =    cols.getColumns();    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
57	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	  double[][]    row    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	98	None	replace
58	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	  double[][]    row    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	98	None	replace
59	[BUG]  [BUGGY]  int  rows  =  cols.length();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  cols.length();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  cols.length();	  int    rows    =    jTj.length();    	non-compiled	[CE]  int  cannot  be  dereferenced	42	None	replace
60	[BUG]  [BUGGY]  int  rows  =(jTj  ==  null)?  jTj.length()  :  cols.length();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =(jTj  ==  null)?  jTj.length()  :  cols.length();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =(jTj  ==  null)?  jTj.length()  :  cols.length();	  int    rows    =    jTj.length();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
61	[BUG]  [BUGGY]  int  rows  =(jTj  ==  null)?  jTj.length()  :  jTj.length();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =(jTj  ==  null)?  jTj.length()  :  jTj.length();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =(jTj  ==  null)?  jTj.length()  :  jTj.length();	  int    rows    =    jTj.length();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
62	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	102	None	add
63	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  Double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  Double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    Double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	102	None	add
64	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  double  sum  =(jTj.length  >  0)?  jacobian[i][j]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  double  sum  =(jTj.length  >  0)?  jacobian[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    double  sum  =(jTj.length  >  0)?  jacobian[i][j]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	102	None	add
65	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  int  jTj  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  int  jTj  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    int  jTj  =(jTj.length  >  0)?  jTj[i][j]  :  0;	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	102	None	add
66	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  int  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  int  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    int  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	102	None	add
67	[BUG]  [BUGGY]  double  sum  =(jtj  ==  null)?  0  :  jTj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jtj  ==  null)?  0  :  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jtj  ==  null)?  0  :  jTj.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jtj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	77	None	replace
68	[BUG]  [BUGGY]  double  sum  =(jtj  ==  null)?  0  :  jtj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jtj  ==  null)?  0  :  jtj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jtj  ==  null)?  0  :  jtj.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jtj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	77	None	replace
69	[BUG]  [BUGGY]  double  sum  =  j.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  j.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  j.doubleValue();	  double    sum    =    jTjF.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	72	None	replace
70	[BUG]  [BUGGY]  int  rows  =  cols.size()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  cols.size()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  cols.size()  +  1;	  int    rows    =    jTj.size()    +    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	71	None	replace
71	[BUG]  [BUGGY]  int  rows  =  jTj.length()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  jTj.length()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.length()  +  1;	  int    rows    =    jTj.size()    +    1;    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
72	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue().doubleValue()].doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue().doubleValue()].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue().doubleValue()].doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    -    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
73	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue().doubleValue().doubleValue();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue().doubleValue().doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue().doubleValue().doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    -    1].doubleValue();    	non-compiled	[CE]  ']'  expected	67	None	replace
74	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj,  i.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	89	None	replace
75	[BUG]  [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTj,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  1)?  0  :  jTj,  i.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	89	None	replace
76	[BUG]  [BUGGY]  double[][]  rows  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jF.getColumns();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jF.getColumns();	  double[][]    rows    =    jTjF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
77	[BUG]  [BUGGY]  double  sum  =(j  <  0)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(j  <  0)?  0  :  jTj,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(j  <  0)?  0  :  jTj,  i.doubleValue();	  double    sum    =(j    <    i)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	47	None	replace
78	[BUG]  [BUGGY]  double  sum  =(i  <  j)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  j)?  0  :  jTj,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  <  j)?  0  :  jTj,  i.doubleValue();	  double    sum    =(j    <    i)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	47	None	replace
79	[BUG]  [BUGGY]  double  sum  =(i  <  jTj)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj)?  0  :  jTj,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  <  jTj)?  0  :  jTj,  i.doubleValue();	  double    sum    =(j    <    i)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	47	None	replace
80	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i].length;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i].length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ']'  expected	9	None	replace
81	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  -  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  -  1;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ';'  expected	9	None	replace
82	[BUG]  [BUGGY]  double  sum  =(cols  <  0)?  0  :  jTj,  cols.length;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(cols  <  0)?  0  :  jTj,  cols.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(cols  <  0)?  0  :  jTj,  cols.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ';'  expected	9	None	replace
83	[BUG]  [BUGGY]  double  sum  =(jTj  >  0)?  jTj.doubleValue()  :  0;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  >  0)?  jTj.doubleValue()  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  >  0)?  jTj.doubleValue()  :  0;	  double    sum    =(i    >    0)?    jTj.doubleValue()    :    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	63	None	replace
84	[BUG]  [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  *  jTj.doubleValue()  :  0;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  *  jTj.doubleValue()  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  >  0)?  jTj.doubleValue()  *  jTj.doubleValue()  :  0;	  double    sum    =(i    >    0)?    jTj.doubleValue()    :    0;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
85	[BUG]  [BUGGY]  double  sum  =(jtj  <  0)?  0  :  jTj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jtj  <  0)?  0  :  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jtj  <  0)?  0  :  jTj.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jtj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	90	None	replace
86	[BUG]  [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jtj.doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jtj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  1)?  0  :  jtj.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jtj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	90	None	replace
87	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][i];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[rows][i];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[rows][i];	  double[][]    jTj    =    new    double[rows][i];    	non-compiled	[CE]  incompatible  types	18	None	replace
88	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  ';'  expected	11	None	replace
89	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i].length  +  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i].length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i].length  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	11	None	replace
90	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i  +  1]  +  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i  +  1]  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i  +  1]  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	11	None	replace
91	[BUG]  [BUGGY]  double  rows  =  jtj.doubleValue()  +  jTj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  jtj.doubleValue()  +  jTj.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jtj.doubleValue()  +  jTj.doubleValue();	  double    rows    =    jTj.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	26	None	replace
92	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  +  jtj.doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  jTj.doubleValue()  +  jtj.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj.doubleValue()  +  jtj.doubleValue();	  double    rows    =    jTj.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  1)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	2	replace
94	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj.length  :  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  1)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	2	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  <  2)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  <  2)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	1	replace
96	[BUG]  [BUGGY]  double  sum  =(jTj.length  <  2)?  jTj.length  :  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  <  2)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  <  2)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	1	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  0)?  jTj.length  :  1;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	2	replace
98	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  0)?  jTj.length  :  1;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	2	replace
99	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  +  jtj.doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  +  jtj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  +  jtj.doubleValue();	  double    sum    =    jTj.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
100	[BUG]  [BUGGY]  double  sum  =  jtj.doubleValue()  +  jTj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jtj.doubleValue()  +  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jtj.doubleValue()  +  jTj.doubleValue();	  double    sum    =    jTj.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	16	None	replace
101	[BUG]  [BUGGY]  double  sum  =(jTj  <  i)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  i)?  0  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  i)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    <    i)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	46	None	replace
102	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	75	None	replace
103	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[rows][cols];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	75	None	replace
104	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jtj];  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jtj];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jtj];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	75	None	replace
105	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  -  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  -  1;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	101	None	replace
106	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  i.length;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  i.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj,  i.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	101	None	replace
107	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	101	None	replace
108	[BUG]  [BUGGY]  double  rows  =  jTj.length;  [CE]  cannot  find  symbol  sum  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj.length;	  double    sum    =    1;    int    rows    =    jTj.length;    	non-compiled	[CE]  cannot  find  symbol  sum	91	None	replace
109	[BUG]  [BUGGY]  double  jTj  =  1;  int  rows  =  jTj.length;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  jTj  =  1;  int  rows  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  jTj  =  1;  int  rows  =  jTj.length;	  double    sum    =    1;    int    rows    =    jTj.length;    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	91	None	replace
110	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  1].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  1].doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    +    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
111	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  *  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  *  1].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  *  1].doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    +    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
112	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  *  i].doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  *  i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  *  i].doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    +    i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
113	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  j.doubleValue()].doubleValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  j.doubleValue()].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  j.doubleValue()].doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    +    i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
114	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  i].doubleValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  /  i].doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    +    i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
115	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue();	  double[][]    jTj    =    new    double[cols][j].doubleValue();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	87	None	replace
116	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][j].doubleValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][j].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][j].doubleValue();	  double[][]    jTj    =    new    double[cols][j].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
117	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][j].doubleValue();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][j].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[rows][j].doubleValue();	  double[][]    jTj    =    new    double[cols][j].doubleValue();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	87	None	replace
118	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][j].doubleValue();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][j].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][j].doubleValue();	  double[][]    jTj    =    new    double[cols][j].doubleValue();    	non-compiled	[CE]  incompatible  types	87	None	replace
119	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    jTj    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	81	None	replace
120	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  +  jTj.length;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getColumnCount()  +  jTj.length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getColumnCount()  +  jTj.length;	  int    rows    =    getRowCount()    +    jTj.length;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
121	[BUG]  [BUGGY]  int  rows  =  getRowCount()  *  jTj.length;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getRowCount()  *  jTj.length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getRowCount()  *  jTj.length;	  int    rows    =    getRowCount()    +    jTj.length;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
122	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  cols.length;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getRowCount()  +  cols.length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getRowCount()  +  cols.length;	  int    rows    =    getRowCount()    +    jTj.length;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
123	[BUG]  [BUGGY]  int  rows  =  getColsCount();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getColsCount();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getColsCount();	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
124	[BUG]  [BUGGY]  int  rows  =  getColsCount()  -  2;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getColsCount()  -  2;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getColsCount()  -  2;	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
125	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][cols.length];	  double[][]    cols    =    new    double[cols][j];    	non-compiled	[CE]  incompatible  types	21	None	replace
126	[BUG]  [BUGGY]  double  rows  =  cols.doubleValue()  +  jTj.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  cols.doubleValue()  +  jTj.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  cols.doubleValue()  +  jTj.doubleValue();	  double    rows    =    cols.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	96	None	replace
127	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  1  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  1  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  1  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  ';'  expected	33	None	replace
128	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i].doubleValue();  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i].doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  ']'  expected	33	None	replace
129	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  *  jtj.doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  jTj.doubleValue()  *  jtj.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj.doubleValue()  *  jtj.doubleValue();	  double    rows    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
130	[BUG]  [BUGGY]  double  rows  =  jtj.doubleValue()  *  jTj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  jtj.doubleValue()  *  jTj.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jtj.doubleValue()  *  jTj.doubleValue();	  double    rows    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	27	None	replace
131	[BUG]  [BUGGY]  double  rows  =(jTj.doubleValue()  *  jTj.doubleValue());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =(jTj.doubleValue()  *  jTj.doubleValue());  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =(jTj.doubleValue()  *  jTj.doubleValue());	  double    rows    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
132	[BUG]  [BUGGY]  int  rows  =  jTj.getColumnCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  jTj.getColumnCount();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.getColumnCount();	  int    rows    =    jTj.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
133	[BUG]  [BUGGY]  int  rows  =  cols.getRowCount();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  cols.getRowCount();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  cols.getRowCount();	  int    rows    =    jTj.getRowCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	82	None	replace
134	[BUG]  [BUGGY]  int  rows  =  jTj.getColumnsCount();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  jTj.getColumnsCount();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.getColumnsCount();	  int    rows    =    jTj.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
135	[BUG]  [BUGGY]  double  sum  =(jtj  <  i)?  0  :  jTj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jtj  <  i)?  0  :  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jtj  <  i)?  0  :  jTj.doubleValue();	  double    sum    =(i    <    jTj)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	70	None	replace
136	[BUG]  [BUGGY]  int  rows  =  jTj.length  -  1;  [CE]  cannot  find  symbol  sum  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  jTj.length  -  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.length  -  1;	  int    rows    =    jTj.length;    	non-compiled	[CE]  cannot  find  symbol  sum	44	None	replace
137	[BUG]  [BUGGY]  int  rows  =  jTj.length  -  cols;  [CE]  cannot  find  symbol  sum  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  jTj.length  -  cols;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.length  -  cols;	  int    rows    =    jTj.length;    	non-compiled	[CE]  cannot  find  symbol  sum	44	None	replace
138	[BUG]  [BUGGY]  int  rows  =  jTj.length  +  1;  [CE]  cannot  find  symbol  sum  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  jTj.length  +  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.length  +  1;	  int    rows    =    jTj.length;    	non-compiled	[CE]  cannot  find  symbol  sum	44	None	replace
139	[BUG]  [BUGGY]  double[][]  rows  =  i.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  i.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  i.doubleValue();	  double[][]    rows    =    cols.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	49	None	replace
140	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  incompatible  types	8	None	replace
141	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  incompatible  types	8	None	replace
142	[BUG]  [BUGGY]  int[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  incompatible  types	8	None	replace
143	[BUG]  [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  double  sum  =(i  <  jTj.length)?  0  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  double  sum  =(i  <  jTj.length)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(i    <    jTj.length)?    0    :    0;    double  sum  =(i  <  jTj.length)?  0  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	65	None	add
144	[BUG]  [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  Double  sum  =(i  <  jTj.length)?  0  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  Double  sum  =(i  <  jTj.length)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(i    <    jTj.length)?    0    :    0;    Double  sum  =(i  <  jTj.length)?  0  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	65	None	add
145	[BUG]  [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  int  sum  =(i  <  jTj.length)?  0  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  int  sum  =(i  <  jTj.length)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(i    <    jTj.length)?    0    :    0;    int  sum  =(i  <  jTj.length)?  0  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	65	None	add
146	[BUG]  [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  double  sum  =(i  >=  jTj.length)?  0  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  double  sum  =(i  >=  jTj.length)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(i    <    jTj.length)?    0    :    0;    double  sum  =(i  >=  jTj.length)?  0  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	65	None	add
147	[BUG]  [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  double  sum  =(jTj.length)?  0  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  0;  double  sum  =(jTj.length)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(i    <    jTj.length)?    0    :    0;    double  sum  =(jTj.length)?  0  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	65	None	add
148	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  null)?  0  :  jTj,  i.doubleValue();	  double    sum    =(jTj!=    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
149	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	  double[][]    rows    =    new    double[cols][jTj.length    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	7	None	replace
150	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	  double[][]    rows    =    new    double[cols][jTj.length    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	7	None	replace
151	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getColumnCount()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getColumnCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
152	[BUG]  [BUGGY]  int  rows  =  getColsCount()  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getColsCount()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getColsCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
153	[BUG]  [BUGGY]  double[][]  rows  =  cols,  jTj.getColumns();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  cols,  jTj.getColumns();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  cols,  jTj.getColumns();	  double[][]    rows    =    jTj,    cols.getColumns();    	non-compiled	[CE]  ';'  expected	29	None	replace
154	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
155	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  0,  i.doubleValue();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  0,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj,  0,  i.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
156	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cost;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cost;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  cost;	  double    sum    =(jTj    <    0)?    0    :    jTj[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	1	None	replace
157	[BUG]  [BUGGY]  double[][]  rows  =  cols.getCols();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  cols.getCols();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  cols.getCols();	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  int  cannot  be  dereferenced	55	None	replace
158	[BUG]  [BUGGY]  double[][]  rows  =  jTjF.getCols();  [CE]  cannot  find  symbol  jTjF  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jTjF.getCols();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTjF.getCols();	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  cannot  find  symbol  jTjF	55	None	replace
159	[BUG]  [BUGGY]  double  rows  =  j.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  j.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  j.doubleValue();	  double    rows    =    jTjF.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	58	None	replace
160	[BUG]  [BUGGY]  double  sum  =  i.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  i.doubleValue();	  double    sum    =    jtj.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
161	[BUG]  [BUGGY]  int  rows  =  j.getRowCount();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  j.getRowCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  j.getRowCount();	  double    sum    =    1;    int    rows    =    j.getRowCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	93	None	replace
162	[BUG]  [BUGGY]  int  rows  =  j.getColumnCount();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  j.getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  j.getColumnCount();	  double    sum    =    1;    int    rows    =    j.getRowCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	93	None	replace
163	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jTj];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][jTj];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][jTj];	  double[][]    row    =    new    double[cols][i];    	non-compiled	[CE]  incompatible  types	83	None	replace
164	[BUG]  [BUGGY]  double[][]  row  =  new  double[rows][i];  [CE]  cannot  find  symbol  sum  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[rows][i];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[rows][i];	  double[][]    row    =    new    double[cols][i];    	non-compiled	[CE]  cannot  find  symbol  sum	83	None	replace
165	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  columns;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  columns;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  columns;	  double    sum    =(jTj    <    0)?    0    :    jTj,    rows;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	99	None	replace
166	[BUG]  [BUGGY]  double  sum  =(rows  <  0)?  0  :  jTj,  jTj;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(rows  <  0)?  0  :  jTj,  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(rows  <  0)?  0  :  jTj,  jTj;	  double    sum    =(jTj    <    0)?    0    :    jTj,    rows;    	non-compiled	[CE]  incompatible  types	99	None	replace
167	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  0,  cols;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  0,  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  0,  cols;	  double    sum    =(jTj    <    0)?    0    :    jTj,    rows;    	non-compiled	[CE]  <identifier>  expected	99	None	replace
168	[BUG]  [BUGGY]  double  sum  =(j  <  i)?  0  :  jTj[i].doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(j  <  i)?  0  :  jTj[i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(j  <  i)?  0  :  jTj[i].doubleValue();	  double    sum    =(j    <    i)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
169	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getColumnCount()  -  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getColumnCount()  -  1;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
170	[BUG]  [BUGGY]  int  rows  =  i.getColumnCount();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  i.getColumnCount();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  i.getColumnCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
171	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getColumnCount()  -  2;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getColumnCount()  -  2;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
172	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cost.doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cost.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  cost.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  ';'  expected	34	None	replace
173	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][jTj.doubleValue();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i][jTj.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  ']'  expected	34	None	replace
174	[BUG]  [BUGGY]  double[][]  rows  =  jtj.getRows();  [CE]  cannot  find  symbol  jtj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jtj.getRows();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jtj.getRows();	  double[][]    rows    =    cols.getRows();    	non-compiled	[CE]  cannot  find  symbol  jtj	56	None	replace
175	[BUG]  [BUGGY]  double[][]  rows  =  i.getRows();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  i.getRows();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  i.getRows();	  double[][]    rows    =    cols.getRows();    	non-compiled	[CE]  int  cannot  be  dereferenced	56	None	replace
176	[BUG]  [BUGGY]  double  rows  =  jTj,  i.doubleValue()  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  jTj,  i.doubleValue()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj,  i.doubleValue()  +  1;	  double    rows    =    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	97	None	replace
177	[BUG]  [BUGGY]  double  rows  =  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  jTj,  cols.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj,  cols.doubleValue();	  double    rows    =    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	97	None	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  1;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  AssertionFailedError  	37	2	replace
179	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  1;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  AssertionFailedError  	37	2	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj!=  null)?  0  :  jTj.length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  AssertionFailedError  	37	1	replace
181	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  null)?  0  :  jTj.length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  AssertionFailedError  	37	1	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj  ==  null)?  0  :  jTj[i].length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  AssertionFailedError  	37	2	replace
183	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj[i].length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj[i].length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  AssertionFailedError  	37	2	replace
184	[BUG]  [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  1)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    <    1)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	35	None	replace
185	[BUG]  [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTj[i].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTj[i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  1)?  0  :  jTj[i].doubleValue();	  double    sum    =(jTj    <    1)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	35	None	replace
186	[BUG]  [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTjF.doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTjF.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  1)?  0  :  jTjF.doubleValue();	  double    sum    =(jTj    <    1)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	35	None	replace
187	[BUG]  [BUGGY]  int  rows  =  getColsCount()  -  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getColsCount()  -  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getColsCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =  jTj.length;	  double    sum    =    1;    double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	38	2	replace
189	[BUG]  [BUGGY]  double  sum  =  jTj.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.length;	  double    sum    =    1;    double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	38	2	replace
190	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  2];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  2];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  -  2];	  double[][]    rows    =    new    double[cols][jTj.length    -    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	53	None	replace
191	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  /  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  /  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  /  1];	  double[][]    rows    =    new    double[cols][jTj.length    -    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	53	None	replace
192	[BUG]  [BUGGY]  double[][]  row  =  new  double[rows][cols];  [CE]  cannot  find  symbol  sum  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[rows][cols];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[rows][cols];	  double[][]    row    =    new    double[cols][cols];    	non-compiled	[CE]  cannot  find  symbol  sum	78	None	replace
193	[BUG]  [BUGGY]  double  sum  =(jTj  >  0)?  jTj.doubleValue()  :  1;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  >  0)?  jTj.doubleValue()  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  >  0)?  jTj.doubleValue()  :  1;	  double    sum    =(i    >    0)?    jTj.doubleValue()    :    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	64	None	replace
194	[BUG]  [BUGGY]  double  sum  =(i  >  0)?  jTj,  jTj.doubleValue()  :  1;  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  >  0)?  jTj,  jTj.doubleValue()  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  >  0)?  jTj,  jTj.doubleValue()  :  1;	  double    sum    =(i    >    0)?    jTj.doubleValue()    :    1;    	non-compiled	[CE]  :  expected	64	None	replace
195	[BUG]  [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  *  jTj.doubleValue()  :  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  *  jTj.doubleValue()  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  >  0)?  jTj.doubleValue()  *  jTj.doubleValue()  :  1;	  double    sum    =(i    >    0)?    jTj.doubleValue()    :    1;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
196	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    rows    =    new    double[cols][jTj.length    -    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  incompatible  types	32	None	replace
197	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    rows    =    new    double[cols][jTj.length    -    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	32	None	replace
198	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	106	None	add
199	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  Double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  Double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    Double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	106	None	add
200	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  double  sum  =(jTj.length  >  0)?  jacobian[j][j]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  double  sum  =(jTj.length  >  0)?  jacobian[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    double  sum  =(jTj.length  >  0)?  jacobian[j][j]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	106	None	add
201	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  int  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  int  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    int  sum  =(jTj.length  >  0)?  jTj[j][j]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	106	None	add
202	[BUG]  [BUGGY]  double[][]  rows  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jF.getRows();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jF.getRows();	  double[][]    rows    =    jTjF.getRows();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
203	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jTj,  cols.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj,  cols.doubleValue();	  double[][]    rows    =    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	50	None	replace
204	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  i.doubleValue()  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jTj,  i.doubleValue()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj,  i.doubleValue()  +  1;	  double[][]    rows    =    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	50	None	replace
205	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  j.doubleValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jTj,  j.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj,  j.doubleValue();	  double[][]    rows    =    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	50	None	replace
206	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][j].length;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][j].length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i][j].length;	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	10	None	replace
207	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj[i].length;  [CE]  incomparable  types:  double[][]  and  int  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj[i].length;	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	10	None	replace
208	[BUG]  [BUGGY]  double[][]  jacobian[][j]  =  jTj.doubleValue()  +  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian[][j]  =  jTj.doubleValue()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jacobian[][j]  =  jTj.doubleValue()  +  1;	  double[][]    jacobian[][j]    =    jTj.doubleValue();    	non-compiled	[CE]  ']'  expected	85	None	replace
209	[BUG]  [BUGGY]  double[][]  jacobian[][j]  =  sum.doubleValue();  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian[][j]  =  sum.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jacobian[][j]  =  sum.doubleValue();	  double[][]    jacobian[][j]    =    jTj.doubleValue();    	non-compiled	[CE]  ']'  expected	85	None	replace
210	[BUG]  [BUGGY]  double  sum  =  0;  int  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  int  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  0;  int  sum  =  0;	  double    sum    =    1;    int    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	40	None	replace
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	int  sum  =  1;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	40	2	replace
212	[BUG]  [BUGGY]  int  sum  =  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  sum  =  1;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	40	2	replace
213	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	int  sum  =  0;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  OptimizationException  	40	1	replace
214	[BUG]  [BUGGY]  int  sum  =  0;  [FE]  OptimizationException  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  sum  =  0;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  OptimizationException  	40	1	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	int  sum  =  jTj.length;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	40	2	replace
216	[BUG]  [BUGGY]  int  sum  =  jTj.length;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  sum  =  jTj.length;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	40	2	replace
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[i][j]  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  1)?  jTj[i][j]  :  1;	  double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	103	1	replace
218	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[i][j]  :  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj[i][j]  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  1)?  jTj[i][j]  :  1;	  double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	103	1	replace
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  <  2)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  <  2)?  jTj[i][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	103	1	replace
220	[BUG]  [BUGGY]  double  sum  =(jTj.length  <  2)?  jTj[i][j]  :  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  <  2)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  <  2)?  jTj[i][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	103	1	replace
221	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj].length;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj].length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj].length;	  double[][]    rows    =    new    double[cols][cols].length;    	non-compiled	[CE]  incompatible  types	94	None	replace
222	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  1].length;  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  1].length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols.length  -  1].length;	  double[][]    rows    =    new    double[cols][cols].length;    	non-compiled	[CE]  int  cannot  be  dereferenced	94	None	replace
223	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols].length  -  1;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][cols].length  -  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols].length  -  1;	  double[][]    rows    =    new    double[cols][cols].length;    	non-compiled	[CE]  incompatible  types	94	None	replace
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  long  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	long  sum  =  1;	  double    sum    =    1;    long    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	41	2	replace
225	[BUG]  [BUGGY]  long  sum  =  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  long  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	long  sum  =  1;	  double    sum    =    1;    long    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	41	2	replace
226	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  -  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	  double[][]    rows    =    new    double[cols][jTj.length    -    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	6	None	replace
227	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][i].doubleValue();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[rows][i].doubleValue();	  double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	86	None	replace
228	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][i];  [CE]  cannot  find  symbol  sum  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[rows][i];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[rows][i];	  double[][]    cols    =    new    double[cols][i];    	non-compiled	[CE]  cannot  find  symbol  sum	74	None	replace
229	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length];	  double[][]    cols    =    new    double[cols][i];    	non-compiled	[CE]  incompatible  types	74	None	replace
230	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(cols,    jTj.length);    }    	non-compiled	[CE]  incompatible  types	60	None	replace
231	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(cols,    jTj.length);    }    	non-compiled	[CE]  incompatible  types	60	None	replace
232	[BUG]  [BUGGY]  int[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(cols,    jTj.length);    }    	non-compiled	[CE]  incompatible  types	60	None	replace
233	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  2];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  2];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  +  2];	  double[][]    rows    =    new    double[cols][jTj.length    +    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	54	None	replace
234	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  3];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  3];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  +  3];	  double[][]    rows    =    new    double[cols][jTj.length    +    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	54	None	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  int  rows  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =  0;  int  rows  =  jTj.length;	  double    sum    =    1;    int    rows    =    jTj.length;    	compilable	  [FE]  AssertionFailedError  	91	1	replace
236	[BUG]  [BUGGY]  double  sum  =  0;  int  rows  =  jTj.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  int  rows  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  0;  int  rows  =  jTj.length;	  double    sum    =    1;    int    rows    =    jTj.length;    	compilable	  [FE]  AssertionFailedError  	91	1	replace
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  2;  int  rows  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =  2;  int  rows  =  jTj.length;	  double    sum    =    1;    int    rows    =    jTj.length;    	compilable	  [FE]  AssertionFailedError  	91	2	replace
238	[BUG]  [BUGGY]  double  sum  =  2;  int  rows  =  jTj.length;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  2;  int  rows  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  2;  int  rows  =  jTj.length;	  double    sum    =    1;    int    rows    =    jTj.length;    	compilable	  [FE]  AssertionFailedError  	91	2	replace
239	[BUG]  [BUGGY]  double  sum  =(jTj!=  0)?  0  :  jTj.doubleValue();  [CE]  incomparable  types:  double[][]  and  int  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  0)?  0  :  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  0)?  0  :  jTj.doubleValue();	  double    sum    =(jTj    ==    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	59	None	replace
240	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  1  :  jTj.doubleValue();  [CE]  incomparable  types:  double[][]  and  int  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  1  :  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  0)?  1  :  jTj.doubleValue();	  double    sum    =(jTj    ==    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	59	None	replace
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  2;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =  2;	  double    sum    =    1;    double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	38	2	replace
242	[BUG]  [BUGGY]  double  sum  =  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  2;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  2;	  double    sum    =    1;    double    sum    =    1;    	compilable	  [FE]  AssertionFailedError  	38	2	replace
243	[BUG]  [BUGGY]  double[][]  rows  =  i,  jTj.getRows();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  i,  jTj.getRows();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  i,  jTj.getRows();	  double[][]    rows    =    jTj,    i.getColumns();    	non-compiled	[CE]  ';'  expected	76	None	replace
244	[BUG]  [BUGGY]  double  rows  =  i.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  i.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  i.doubleValue();	  double    rows    =    jtj.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	25	None	replace
245	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj;	  double[][]    rows    =    new    double[cols][i];    	non-compiled	[CE]  ']'  expected	19	None	replace
246	[BUG]  [BUGGY]  double[][]  rows  =  cols,  jTj.getRows();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  cols,  jTj.getRows();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  cols,  jTj.getRows();	  double[][]    rows    =    jTj,    cols.getColumns();    	non-compiled	[CE]  ';'  expected	29	None	replace
247	[BUG]  [BUGGY]  double  sum  =(i  ==  null)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  ==  null)?  0  :  jTj,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  ==  null)?  0  :  jTj,  i.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
248	[BUG]  [BUGGY]  double  sum  =  1;  int  rows  =  jTj.getRowCount();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1;  int  rows  =  jTj.getRowCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  1;  int  rows  =  jTj.getRowCount();	  double    sum    =    1;    int    rows    =    jTj.size();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
249	[BUG]  [BUGGY]  double  sum  =(i  <  0)?  0  :  jTj,  i.length;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  0)?  0  :  jTj,  i.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  <  0)?  0  :  jTj,  i.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	101	None	replace
250	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  *  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  *  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  *  1];	  double[][]    rows    =    new    double[cols][jTj.length    +    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	54	None	replace
251	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    rows    =    new    double[cols][jTj.length    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	31	None	replace
252	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][0].length;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][0].length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i][0].length;	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	10	None	replace
253	[BUG]  [BUGGY]  double  sum  =(jTj!=  0)?  0  :  jTj[i].length;  [CE]  incomparable  types:  double[][]  and  int  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  0)?  0  :  jTj[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  0)?  0  :  jTj[i].length;	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	10	None	replace
254	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i  +  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i  +  1];  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i  +  1];	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	11	None	replace
255	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  *  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  *  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj.length  *  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	11	None	replace
256	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  ';'  expected	11	None	replace
257	[BUG]  [BUGGY]  double  sum  =(jTj  <  1?  0  :  jTj.doubleValue();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  1?  0  :  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  1?  0  :  jTj.doubleValue();	  double    sum    =(jTj    <    1)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ')'  expected	35	None	replace
258	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][0].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][0].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i][0].doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	34	None	replace
259	[BUG]  [BUGGY]  double  sum  =(jTj!=  0)?  0  :  jTj[i].doubleValue();  [CE]  incomparable  types:  double[][]  and  int  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  0)?  0  :  jTj[i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  0)?  0  :  jTj[i].doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	34	None	replace
260	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  jTj  =(jTj  ==  null)?  0  :  jTj.length;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  jTj  =(jTj  ==  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj    ==    null)?    0    :    jTj.length;    double  jTj  =(jTj  ==  null)?  0  :  jTj.length;	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	36	None	add
261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(i  <  jTj.length)?  0  :  1;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
262	[BUG]  [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj.length)?  0  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  <  jTj.length)?  0  :  1;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj  ==  null)?  0  :  0;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
264	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  0  :  0;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj!=  null)?  0  :  0;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
266	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  null)?  0  :  0;	  double    sum    =(i    <    jTj.length)?    0    :    0;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
267	[BUG]  [BUGGY]  double  sum  =(i  >  0)?  jTj,  i.doubleValue()  :  0;  [CE]  :  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  >  0)?  jTj,  i.doubleValue()  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  >  0)?  jTj,  i.doubleValue()  :  0;	  double    sum    =(i    >    0)?    jTj.doubleValue()    :    0;    	non-compiled	[CE]  :  expected	63	None	replace
268	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    row    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	80	None	replace
269	[BUG]  [BUGGY]  int  rows  =  getRowCount()  /  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getRowCount()  /  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getRowCount()  /  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
270	[BUG]  [BUGGY]  int  rows  =(jTj  ==  null)?  cols.length()  :  jTj.length();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =(jTj  ==  null)?  cols.length()  :  jTj.length();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =(jTj  ==  null)?  cols.length()  :  jTj.length();	  int    rows    =    jTj.length();    	non-compiled	[CE]  int  cannot  be  dereferenced	42	None	replace
271	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  +  i.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  jTj.doubleValue()  +  i.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj.doubleValue()  +  i.doubleValue();	  double    rows    =    jTj.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
272	[BUG]  [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  :  2;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  :  2;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  >  0)?  jTj.doubleValue()  :  2;	  double    sum    =(i    >    0)?    jTj.doubleValue()    :    1;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
273	[BUG]  [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  *  jTj  :  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  >  0)?  jTj.doubleValue()  *  jTj  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  >  0)?  jTj.doubleValue()  *  jTj  :  1;	  double    sum    =(i    >    0)?    jTj.doubleValue()    :    1;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
274	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  i.getRows()  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jTj,  i.getRows()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj,  i.getRows()  +  1;	  double[][]    rows    =    jTj,    i.getRows();    	non-compiled	[CE]  ';'  expected	84	None	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj!=  null)?  jTj[i][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	103	1	replace
276	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  jTj[i][j]  :  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  null)?  jTj[i][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	103	1	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj  ==  null)?  jTj[i][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	103	1	replace
278	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  jTj[i][j]  :  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  jTj[i][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	103	1	replace
279	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  /  0;  [CE]  :  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  /  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  0)?  jTj[i][j]  /  0;	  double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    	non-compiled	[CE]  :  expected	103	None	replace
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  jTj[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj!=  null)?  jTj[j][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
281	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  jTj[j][j]  :  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  jTj[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  null)?  jTj[j][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  jTj[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj  ==  null)?  jTj[j][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
283	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  jTj[j][j]  :  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  jTj[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  jTj[j][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[0][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  0)?  jTj[0][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
285	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[0][j]  :  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[0][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  0)?  jTj[0][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
286	[BUG]  [BUGGY]  double[][]  rows  =  jt.getColumns();  [CE]  cannot  find  symbol  jt  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jt.getColumns();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jt.getColumns();	  double[][]    rows    =    jTjF.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jt	69	None	replace
287	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj[i];  [CE]  incomparable  types:  double[][]  and  int  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj[i];  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj[i];	  double    sum    =(jTj    <    0)?    0    :    jTj[i];    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	1	None	replace
288	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[0];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[0];  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[0];	  double    sum    =(jTj    <    0)?    0    :    jTj[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	1	None	replace
289	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols,  jTj.length;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols,  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  cols,  jTj.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ';'  expected	9	None	replace
290	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  -  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    rows    =    new    double[cols][jTj.length    -    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	32	None	replace
291	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  j].doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  j].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue()  +  j].doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    +    i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
292	[BUG]  [BUGGY]  double  sum  =(i  <  jTj)?  0  :  jTj[i].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  jTj)?  0  :  jTj[i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  <  jTj)?  0  :  jTj[i].doubleValue();	  double    sum    =(i    <    jTj)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	70	None	replace
293	[BUG]  [BUGGY]  double  sum  =(i  <  0)?  0  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  0)?  0  :  jTj,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  <  0)?  0  :  jTj,  i.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	89	None	replace
294	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][jtj.length];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][jtj.length];  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][jtj.length];	  double[][]    jTj    =    new    double[cols][jTj.length];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	61	None	replace
295	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj[i];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj[i];  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  incompatible  types	30	None	replace
296	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj[i].length;  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj[i].length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj[i].length;  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  incompatible  types	30	None	replace
297	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jTj.length];  [CE]  cannot  find  symbol  sum  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][jTj.length];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][jTj.length];	  double[][]    row    =    new    double[cols][i];    	non-compiled	[CE]  cannot  find  symbol  sum	83	None	replace
298	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];	  double[][]    cols    =    new    double[cols][j];    	non-compiled	[CE]  incompatible  types	21	None	replace
299	[BUG]  [BUGGY]  int  rows  =  jTj.getRowCount()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  jTj.getRowCount()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.getRowCount()  +  1;	  int    rows    =    jTj.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
300	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  jTj;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getRowCount()  +  jTj;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getRowCount()  +  jTj;	  int    rows    =    getRowCount()    +    jTj.length;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
301	[BUG]  [BUGGY]  double[][]  rows  =  i,  jTj.doubleValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  i,  jTj.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  i,  jTj.doubleValue();	  double[][]    rows    =    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	50	None	replace
302	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  i.getCols();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  jTj,  i.getCols();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  jTj,  i.getCols();	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  ';'  expected	55	None	replace
303	[BUG]  [BUGGY]  int  rows  =  this.getRowCount();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  this.getRowCount();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  this.getRowCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
304	[BUG]  [BUGGY]  double  sum  =(cols  <  0)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(cols  <  0)?  0  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(cols  <  0)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  ';'  expected	33	None	replace
305	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  double  sum  =(jTj.length  >  0)?  jTj.length  :  1;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  double  sum  =(jTj.length  >  0)?  jTj.length  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    double  sum  =(jTj.length  >  0)?  jTj.length  :  1;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	104	None	add
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj!=  null)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	2	replace
307	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  jTj.length  :  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  null)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	2	replace
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj  ==  null)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	1	replace
309	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  jTj.length  :  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	1	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i].length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj.length  >  0)?  jTj[i].length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	2	replace
311	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i].length  :  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i].length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj.length  >  0)?  jTj[i].length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  AssertionFailedError  	105	2	replace
312	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][j.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][j.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][j.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    jTj    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	81	None	replace
313	[BUG]  [BUGGY]  double[][]  jcobian[][j]  =  jTj.doubleValue();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jcobian[][j]  =  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jcobian[][j]  =  jTj.doubleValue();	  double[][]    jacobian[][j]    =    jTj.doubleValue();    	non-compiled	[CE]  ']'  expected	85	None	replace
314	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1].length;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1].length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols  -  1].length;	  double[][]    rows    =    new    double[cols][cols].length;    	non-compiled	[CE]  incompatible  types	94	None	replace
315	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  +  i.doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  +  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  +  i.doubleValue();	  double    sum    =    jTj.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
316	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj;	  double[][]    cols    =    new    double[cols][i];    	non-compiled	[CE]  ']'  expected	74	None	replace
317	[BUG]  [BUGGY]  double  sum  =  2;  int  sum  =  2;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  2;  int  sum  =  2;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  2;  int  sum  =  2;	  double    sum    =    1;    int    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	40	None	replace
318	[BUG]  [BUGGY]  double  sum  =  0;  int  sum  =  1;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  int  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  0;  int  sum  =  1;	  double    sum    =    1;    int    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	40	None	replace
319	[BUG]  [BUGGY]  double  sum  =  1;  int  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1;  int  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  1;  int  sum  =  0;	  double    sum    =    1;    int    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	40	None	replace
320	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    rows    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	79	None	replace
321	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jF];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jF];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jF];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	75	None	replace
322	[BUG]  [BUGGY]  double  sum  =  0;  long  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  long  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  0;  long  sum  =  0;	  double    sum    =    1;    long    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	41	None	replace
323	[BUG]  [BUGGY]  double  sum  =  0;  long  sum  =  1;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  long  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  0;  long  sum  =  1;	  double    sum    =    1;    long    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	41	None	replace
324	[BUG]  [BUGGY]  int  rows  =  this.cols.size();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  this.cols.size();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  this.cols.size();	  int    rows    =    cols.size();    	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
325	[BUG]  [BUGGY]  int  rows  =  jTj.length  -  2;  [CE]  cannot  find  symbol  sum  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  jTj.length  -  2;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  jTj.length  -  2;	  int    rows    =    jTj.length;    	non-compiled	[CE]  cannot  find  symbol  sum	44	None	replace
326	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  1],  cols;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  -  1],  cols;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  -  1],  cols;	  double[][]    rows    =    new    double[cols][jTj.length    -    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	53	None	replace
327	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jtj.length  -  1];  [CE]  cannot  find  symbol  jtj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jtj.length  -  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jtj.length  -  1];	  double[][]    rows    =    new    double[cols][jTj.length    -    1];    	non-compiled	[CE]  cannot  find  symbol  jtj	53	None	replace
328	[BUG]  [BUGGY]  double  sum  =(jTj  <  i)?  0  :  jTj[i].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  i)?  0  :  jTj[i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  i)?  0  :  jTj[i].doubleValue();	  double    sum    =(jTj    <    i)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	46	None	replace
329	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    rows    =    new    double[cols][jTj.length    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	31	None	replace
330	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  jTj[j][j]  :  0;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  jTj[j][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  jTj[j][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[j][j]    :    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	107	None	replace
331	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][j].doubleValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][j].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][j].doubleValue();	  double[][]    jTj    =    new    double[cols][j].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
332	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  incompatible  types	30	None	replace
333	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  incompatible  types	30	None	replace
334	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  incompatible  types	30	None	replace
335	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols;	  double    sum    =(jTj    <    0)?    0    :    jTj[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	1	None	replace
336	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  rows;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  rows;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  rows;	  double    sum    =(jTj    <    0)?    0    :    jTj[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	1	None	replace
337	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  +  ji;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  +  ji;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  +  ji;	  double    sum    =    jTj.doubleValue()    +    i;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
338	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i,  rows;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i,  rows;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  i,  rows;	  double    sum    =(jTj    <    0)?    0    :    jTj,    rows;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	99	None	replace
339	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  rows,  i);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  rows,  i);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  rows,  i);	  double    sum    =(jTj    <    0)?    0    :    jTj,    rows;    	non-compiled	[CE]  ';'  expected	99	None	replace
340	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  iTj.doubleValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  iTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  jTj.doubleValue()  *  iTj.doubleValue();	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
341	[BUG]  [BUGGY]  double  sum  =  0,  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0,  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =  0,  sum  =  0;	  double    sum    =    1;    double    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances()	38	None	replace
342	[BUG]  [BUGGY]  double[][]  row  =  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  jTj.doubleValue();	  double[][]    jacobian[][j]    =    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
343	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  jTj[i][j]  :  0;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  jTj[i][j]  :  0;	  double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	103	None	replace
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  1  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	double  sum  =(jTj  ==  null)?  1  :  jTj.length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  AssertionFailedError  	37	2	replace
345	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  1  :  jTj.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  1  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  ==  null)?  1  :  jTj.length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  AssertionFailedError  	37	2	replace
346	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  int  rows  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj[i][j]  :  0;  int  rows  =(jTj.length  >  0)?  jTj[i][j]  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double    sum    =(jTj.length    >    0)?    jTj[i][j]    :    0;    int  rows  =(jTj.length  >  0)?  jTj[i][j]  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	102	None	add
347	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  1  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  1  :  jTj,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  1  :  jTj,  i.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	89	None	replace
348	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  rows.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  rows.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  rows.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  ';'  expected	33	None	replace
349	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.doubleValue()  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.doubleValue()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols.doubleValue()  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  ';'  expected	33	None	replace
350	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  /  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  /  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj.length  /  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	11	None	replace
351	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  i  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  ';'  expected	11	None	replace
352	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  -  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj.length  -  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	11	None	replace
353	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(rows,  jTj.length);  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(rows,    jTj.length);    }    	non-compiled	[CE]  incompatible  types	8	None	replace
354	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jtj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jtj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj!=  null)?  0  :  jtj.doubleValue();	  double    sum    =(jTj!=    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	14	None	replace
355	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols.doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  ';'  expected	34	None	replace
356	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols[i].doubleValue();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols[i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols[i].doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  ']'  expected	34	None	replace
357	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  1  :  jTj,  i.length;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  1  :  jTj,  i.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  1  :  jTj,  i.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	101	None	replace
358	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    row    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	80	None	replace
359	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  cannot  find  symbol  jtj  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    row    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  cannot  find  symbol  jtj	80	None	replace
360	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  1],  cols;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.length  +  1],  cols;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.length  +  1],  cols;	  double[][]    rows    =    new    double[cols][jTj.length    +    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	54	None	replace
361	[BUG]  [BUGGY]  double  sum  =(j  <  i)?  1  :  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(j  <  i)?  1  :  jTj,  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(j  <  i)?  1  :  jTj,  i.doubleValue();	  double    sum    =(j    <    i)?    0    :    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	47	None	replace
362	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols.length;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols.length;	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  ';'  expected	10	None	replace
363	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  jTj  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  jTj.length;  }	  double[][]    rows    =    new    double[cols][jTj.length    -    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	32	None	replace
364	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  Math.min(cols,  jTj.length);  }	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    Math.min(cols,    jTj.length);    }    	non-compiled	[CE]  incompatible  types	60	None	replace
365	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  *  iTj.doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  jTj.doubleValue()  *  iTj.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj.doubleValue()  *  iTj.doubleValue();	  double    rows    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
366	[BUG]  [BUGGY]  double  rows  =  cols.doubleValue()  *  jTj.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  cols.doubleValue()  *  jTj.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  cols.doubleValue()  *  jTj.doubleValue();	  double    rows    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
367	[BUG]  [BUGGY]  double[][]  rowTj  =  new  double[rows][i];  [CE]  cannot  find  symbol  sum  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rowTj  =  new  double[rows][i];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rowTj  =  new  double[rows][i];	  double[][]    jTj    =    new    double[rows][i];    	non-compiled	[CE]  cannot  find  symbol  sum	18	None	replace
368	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols.length];  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols.length];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][cols.length];	  double[][]    rows    =    new    double[cols][cols.length];    	non-compiled	[CE]  int  cannot  be  dereferenced	95	None	replace
369	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  cols.length;  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  cols.length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  *=  cols.length;  }	  double[][]    jTj    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    *=    jTj.length;    }    	non-compiled	[CE]  incompatible  types	81	None	replace
370	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][j];  [CE]  cannot  find  symbol  sum  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][j];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][j];	  double[][]    jTj    =    new    double[cols][j];    	non-compiled	[CE]  cannot  find  symbol  sum	20	None	replace
371	[BUG]  [BUGGY]  double[][]  rowTj  =  new  double[cols][j];  [CE]  cannot  find  symbol  sum  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rowTj  =  new  double[cols][j];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rowTj  =  new  double[cols][j];	  double[][]    jTj    =    new    double[cols][j];    	non-compiled	[CE]  cannot  find  symbol  sum	20	None	replace
372	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols  -  1];	  double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	52	None	replace
373	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  +  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][cols  +  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][cols  +  1];	  double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	52	None	replace
374	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  jTj,  i.length;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getRowCount()  +  jTj,  i.length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getRowCount()  +  jTj,  i.length;	  int    rows    =    getRowCount()    +    jTj.length;    	non-compiled	[CE]  ';'  expected	5	None	replace
375	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  jTj.getColumnCount();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  getRowCount()  +  jTj.getColumnCount();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  getRowCount()  +  jTj.getColumnCount();	  int    rows    =    getRowCount()    +    jTj.length;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
376	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue().doubleValue()  -  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  rows  =  new  double[cols][jTj.doubleValue().doubleValue()  -  1].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  rows  =  new  double[cols][jTj.doubleValue().doubleValue()  -  1].doubleValue();	  double[][]    rows    =    new    double[cols][jTj.doubleValue()    -    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
377	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][i].doubleValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  row  =  new  double[cols][i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  row  =  new  double[cols][i].doubleValue();	  double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
378	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][i].doubleValue();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][i].doubleValue();	  double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  incompatible  types	86	None	replace
379	[BUG]  [BUGGY]  int  rows  =  cols.length;  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  rows  =  cols.length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	int  rows  =  cols.length;	  int    rows    =    jTj.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	44	None	replace
380	[BUG]  [BUGGY]  double  sum  =(i  >  0)?  jTj,  i.doubleValue()  :  1;  [CE]  :  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  >  0)?  jTj,  i.doubleValue()  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  >  0)?  jTj,  i.doubleValue()  :  1;	  double    sum    =(i    >    0)?    jTj.doubleValue()    :    1;    	non-compiled	[CE]  :  expected	64	None	replace
381	[BUG]  [BUGGY]  double  sum  =(i  >  0)?  jTj,  cols.doubleValue()  :  1;  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  >  0)?  jTj,  cols.doubleValue()  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(i  >  0)?  jTj,  cols.doubleValue()  :  1;	  double    sum    =(i    >    0)?    jTj.doubleValue()    :    1;    	non-compiled	[CE]  :  expected	64	None	replace
382	[BUG]  [BUGGY]  double  sum  =(jtj  <  0)?  0  :  jtj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jtj  <  0)?  0  :  jtj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jtj  <  0)?  0  :  jtj.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jtj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	90	None	replace
383	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];	  double[][]    cols    =    new    double[cols][j];    	non-compiled	[CE]  incompatible  types	21	None	replace
384	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  jTj.length  :  0;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  sum  =(jTj  <  0)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	105	None	replace
385	[BUG]  [BUGGY]  double  rows  =  jTj,  j.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  rows  =  jTj,  j.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	double  rows  =  jTj,  j.doubleValue();	  double    rows    =    jTj,    i.doubleValue();    	non-compiled	[CE]  ';'  expected	97	None	replace
