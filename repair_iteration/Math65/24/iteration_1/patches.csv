bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  cols  =  jTj.cols();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jTj.cols();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jTj.cols();	      double[][]    cols    =    jTj.getRows();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
2	[BUG]  [BUGGY]  double[][]  cols  =  jTjF.getRows();  [CE]  cannot  find  symbol  jTjF  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jTjF.getRows();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jTjF.getRows();	      double[][]    cols    =    jTj.getRows();    	non-compiled	[CE]  cannot  find  symbol  jTjF	9	None	replace
3	[BUG]  [BUGGY]  double[][]  jTj  =  Math.sqrt(sum  +  1);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  Math.sqrt(sum  +  1);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  Math.sqrt(sum  +  1);	      double[][]    jTj    =    Math.sqrt(sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	22	None	replace
4	[BUG]  [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  coefficient);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  coefficient);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  Math.sqrt(sum,  coefficient);	      double[][]    jTj    =    Math.sqrt(sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	22	None	replace
5	[BUG]  [BUGGY]  double[][]  jTj  =  Math.sqrt(sum  +  1,  sum);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  Math.sqrt(sum  +  1,  sum);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  Math.sqrt(sum  +  1,  sum);	      double[][]    jTj    =    Math.sqrt(sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	22	None	replace
6	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().reverse();  [CE]  cannot  find  symbol  sum  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().reverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().reverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().reverse();    	non-compiled	[CE]  cannot  find  symbol  sum	15	None	replace
7	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().reverse();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().reverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().reverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().reverse();    	non-compiled	[CE]  ';'  expected	15	None	replace
8	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().reverse();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().reverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().reverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().reverse();    	non-compiled	[CE]  ';'  expected	15	None	replace
9	[BUG]  [BUGGY]  double[][]  jTj  =  sum.getValue();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  sum.getValue();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  sum.getValue();	      double[][]    jTj    =    sum.getData();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	replace
10	[BUG]  [BUGGY]  double[][]  jTj  =  sum.getValues();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  sum.getValues();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  sum.getValues();	      double[][]    jTj    =    sum.getData();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	replace
11	[BUG]  [BUGGY]  double[][]  jTj  =  sum.getDataRemaining();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  sum.getDataRemaining();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  sum.getDataRemaining();	      double[][]    jTj    =    sum.getData();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	replace
12	[BUG]  [BUGGY]  MultivariateVectorialFunction  function  =  function.getMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  function  =  function.getMultivariateVectorialFunction();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  function  =  function.getMultivariateVectorialFunction();	      MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
13	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorFunction();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorFunction();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorFunction();	      MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
14	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.remainings.get(jTj);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.remainings.get(jTj);  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.remainings.get(jTj);	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
15	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.getValue();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.getValue();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
16	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(jTj);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(jTj);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(jTj);	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)this.rows.get(k);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
17	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(k  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(k  +  1);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(k  +  1);	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)this.rows.get(k);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
18	[BUG]  [BUGGY]  double[][]  cols  =  jtj.getColumns();  [CE]  cannot  find  symbol  jtj  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jtj.getColumns();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jtj.getColumns();	      double[][]    cols    =    sum.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jtj	6	None	replace
19	[BUG]  [BUGGY]  double[][]  sumTj  =  Math.sqrt(sum,  sum);  [CE]  cannot  find  symbol  sum  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  sumTj  =  Math.sqrt(sum,  sum);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  sumTj  =  Math.sqrt(sum,  sum);	      double[][]    jTj    =    Math.sqrt(sum,    sum);    	non-compiled	[CE]  cannot  find  symbol  sum	21	None	replace
20	[BUG]  [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  sum,  coefficient);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  sum,  coefficient);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  Math.sqrt(sum,  sum,  coefficient);	      double[][]    jTj    =    Math.sqrt(sum,    sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	21	None	replace
21	[BUG]  [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  sum  +  1);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  sum  +  1);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  Math.sqrt(sum,  sum  +  1);	      double[][]    jTj    =    Math.sqrt(sum,    sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	21	None	replace
22	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.getValues();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.getValues();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.getValues();	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)super.getValues();    	non-compiled	[CE]  not  a  statement	11	None	replace
23	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)function.getValues();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)function.getValues();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)function.getValues();	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)super.getValues();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
24	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.remainings.getValues();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.remainings.getValues();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.remainings.getValues();	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)super.getValues();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
25	[BUG]  [BUGGY]  double[][]  jTj  =  sum.doubleValue()  +  1;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  sum.doubleValue()  +  1;  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  sum.doubleValue()  +  1;	      double[][]    jTj    =    sum.doubleValue();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	20	None	replace
26	[BUG]  [BUGGY]  double[][]  jTj  =  sum.doubleValue()  +  2;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  sum.doubleValue()  +  2;  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  sum.doubleValue()  +  2;	      double[][]    jTj    =    sum.doubleValue();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	20	None	replace
27	[BUG]  [BUGGY]  double[][]  jTj  =  value.doubleValue();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  value.doubleValue();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  value.doubleValue();	      double[][]    jTj    =    sum.doubleValue();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	20	None	replace
28	[BUG]  [BUGGY]  Integer  jTj  =  Math.max(sum,  residuals);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  Integer  jTj  =  Math.max(sum,  residuals);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	Integer  jTj  =  Math.max(sum,  residuals);	      Integer    jTj    =    Math.max(remainder,    sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	24	None	replace
29	[BUG]  [BUGGY]  Integer  jTj  =  Math.min(sum,  residuals);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  Integer  jTj  =  Math.min(sum,  residuals);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	Integer  jTj  =  Math.min(sum,  residuals);	      Integer    jTj    =    Math.max(remainder,    sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	24	None	replace
30	[BUG]  [BUGGY]  Integer  jTj  =  Math.min(remainder,  sum);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  Integer  jTj  =  Math.min(remainder,  sum);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	Integer  jTj  =  Math.min(remainder,  sum);	      Integer    jTj    =    Math.max(remainder,    sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	24	None	replace
31	[BUG]  [BUGGY]  double[][]  cols  =  jTj.columns();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jTj.columns();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jTj.columns();	      double[][]    cols    =    jTj.getColumns();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
32	[BUG]  [BUGGY]  double[][]  cols  =  jTjF.getColumns();  [CE]  cannot  find  symbol  jTjF  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jTjF.getColumns();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jTjF.getColumns();	      double[][]    cols    =    jTj.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jTjF	5	None	replace
33	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  factor).getSolver().getInverse();  [CE]  cannot  find  symbol  factor  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  factor).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  factor).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),    sum).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  factor	1	None	replace
34	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  coefficient).getSolver().getInverse();  [CE]  cannot  find  symbol  coefficient  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  coefficient).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  coefficient).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),    sum).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  coefficient	1	None	replace
35	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  function).getSolver().getInverse();  [CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,DifferentiableMultivariateVectorialFunction)  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  function).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  function).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),    sum).getSolver().getInverse();    	non-compiled	[CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,DifferentiableMultivariateVectorialFunction)	1	None	replace
36	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  cost)).getSolver().getInverse();  [CE]  no  suitable  method  found  for  createRealMatrix(double[][],double)  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  cost)).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  cost)).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,    sum)).getSolver().getInverse();    	non-compiled	[CE]  no  suitable  method  found  for  createRealMatrix(double[][],double)	19	None	replace
37	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  coefficient)).getSolver().getInverse();  [CE]  cannot  find  symbol  coefficient  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  coefficient)).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  coefficient)).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,    sum)).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  coefficient	19	None	replace
38	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  factor)).getSolver().getInverse();  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  factor)).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  factor)).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,    sum)).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  factor	19	None	replace
39	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.getData();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.getData();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.getData();	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)super.getData();    	non-compiled	[CE]  not  a  statement	12	None	replace
40	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)function.getData();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)function.getData();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)function.getData();	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)super.getData();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
41	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.super.getData();  [CE]  '('  expected  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.super.getData();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.super.getData();	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)super.getData();    	non-compiled	[CE]  '('  expected	12	None	replace
42	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getRange();  [CE]  cannot  find  symbol  sum  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getRange();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getRange();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getRange();    	non-compiled	[CE]  cannot  find  symbol  sum	3	None	replace
43	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().getRange();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().getRange();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().getRange();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getRange();    	non-compiled	[CE]  ';'  expected	3	None	replace
44	[BUG]  [BUGGY]  double[][]  cols  =  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jTj.doubleValue();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jTj.doubleValue();	      double[][]    cols    =    sum.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
45	[BUG]  [BUGGY]  double[][]  cols  =  jtj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jtj.doubleValue();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jtj.doubleValue();	      double[][]    cols    =    sum.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	8	None	replace
46	[BUG]  [BUGGY]  double[][]  cols  =  ji.doubleValue();  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  ji.doubleValue();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  ji.doubleValue();	      double[][]    cols    =    sum.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  ji	8	None	replace
47	[BUG]  [BUGGY]  double[][]  cols  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jF.getRows();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jF.getRows();	      double[][]    cols    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
48	[BUG]  [BUGGY]  double[][]  cols  =  jf.getColumns();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jf.getColumns();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jf.getColumns();	      double[][]    cols    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jf	7	None	replace
49	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i  +  1);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i  +  1);	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)this.rows.get(i);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
50	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i-1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i-1);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i-1);	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)this.rows.get(i);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
51	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i,  sum);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i,  sum);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i,  sum);	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)this.rows.get(i);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
52	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getVariance();  [CE]  cannot  find  symbol  sum  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getVariance();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getVariance();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getVariance();    	non-compiled	[CE]  cannot  find  symbol  sum	16	None	replace
53	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getVariance();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getVariance();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getVariance();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getVariance();    	non-compiled	[CE]  ';'  expected	16	None	replace
54	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().getVariance();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().getVariance();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().getVariance();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getVariance();    	non-compiled	[CE]  ';'  expected	16	None	replace
55	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getInterverse();  [CE]  cannot  find  symbol  sum  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getInterverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getInterverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInterverse();    	non-compiled	[CE]  cannot  find  symbol  sum	2	None	replace
56	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().getInterverse();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().getInterverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum).getSolver().getInterverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInterverse();    	non-compiled	[CE]  ';'  expected	2	None	replace
57	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getIntersect();  [CE]  cannot  find  symbol  sum  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getIntersect();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getIntersect();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getIntersect();    	non-compiled	[CE]  cannot  find  symbol  sum	17	None	replace
58	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getIntersect();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getIntersect();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getIntersect();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getIntersect();    	non-compiled	[CE]  ';'  expected	17	None	replace
59	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum,  jF).getSolver().getInverse();  [CE]  cannot  find  symbol  sum  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum,  jF).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum,  jF).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),    jF).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  sum	18	None	replace
60	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  sum),  jF).getSolver().getInverse();  [CE]  cannot  find  symbol  sum  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  sum),  jF).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  sum),  jF).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),    jF).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  sum	18	None	replace
61	[BUG]  [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  jTj);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  jTj);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  Math.sqrt(sum,  jTj);	      double[][]    jTj    =    Math.sqrt(sum,    sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	21	None	replace
62	[BUG]  [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  jF);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  jF);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  Math.sqrt(sum,  jF);	      double[][]    jTj    =    Math.sqrt(sum,    sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	21	None	replace
63	[BUG]  [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  sum)+  1;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  sum)+  1;  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  Math.sqrt(sum,  sum)+  1;	      double[][]    jTj    =    Math.sqrt(sum,    sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	21	None	replace
64	[BUG]  [BUGGY]  double[][]  jTj  =  Math.sqrt(sum  +  2);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  Math.sqrt(sum  +  2);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  Math.sqrt(sum  +  2);	      double[][]    jTj    =    Math.sqrt(sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	22	None	replace
65	[BUG]  [BUGGY]  Integer  jTj  =  Math.max(remainder,  sum  +  1);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  Integer  jTj  =  Math.max(remainder,  sum  +  1);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	Integer  jTj  =  Math.max(remainder,  sum  +  1);	      Integer    jTj    =    Math.max(remainder,    sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	24	None	replace
66	[BUG]  [BUGGY]  double[][]  cols  =  jF.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jF.doubleValue();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jF.doubleValue();	      double[][]    cols    =    sum.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
67	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)sum.getData();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)sum.getData();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)sum.getData();	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)super.getData();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
68	[BUG]  [BUGGY]  double[][]  jTj  =  sum.getDataRemainder();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  sum.getDataRemainder();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  sum.getDataRemainder();	      double[][]    jTj    =    sum.getData();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	replace
69	[BUG]  [BUGGY]  double[][]  jTj  =  sum.getDataItem(0);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  sum.getDataItem(0);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  sum.getDataItem(0);	      double[][]    jTj    =    sum.getData();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	replace
70	[BUG]  [BUGGY]  double[][]  cols  =  jF.columns();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jF.columns();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jF.columns();	      double[][]    cols    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
71	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.remainders.getValues();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.remainders.getValues();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.remainders.getValues();	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)super.getValues();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
72	[BUG]  [BUGGY]  MultivariateVectorialFunction  inverse  =  function.getMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  inverse  =  function.getMultivariateVectorialFunction();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  inverse  =  function.getMultivariateVectorialFunction();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
73	[BUG]  [BUGGY]  MultivariateVectorialFunction  inverse  =  function.getMultivariateVectorialFunction(jTj);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  inverse  =  function.getMultivariateVectorialFunction(jTj);  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  inverse  =  function.getMultivariateVectorialFunction(jTj);	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
74	[BUG]  [BUGGY]  MultivariateVectorialFunction  inverse  =  function.getRealMatrix();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  inverse  =  function.getRealMatrix();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  inverse  =  function.getRealMatrix();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
75	[BUG]  [BUGGY]  MultivariateVectorialFunction  inverse  =  function.getOptionalVectorialFunction(jTj);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  inverse  =  function.getOptionalVectorialFunction(jTj);  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  inverse  =  function.getOptionalVectorialFunction(jTj);	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
76	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getRange();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getRange();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getRange();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getRange();    	non-compiled	[CE]  ';'  expected	3	None	replace
77	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  i)).getSolver().getInverse();  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  i)).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  i)).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,    sum)).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
78	[BUG]  [BUGGY]  double[][]  cols  =  function.getColumns();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  function.getColumns();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  function.getColumns();	      double[][]    cols    =    sum.getColumns();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
79	[BUG]  [BUGGY]  MultivariateVectorFunction  jTj  =  function.getMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorFunction  jTj  =  function.getMultivariateVectorialFunction();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorFunction  jTj  =  function.getMultivariateVectorialFunction();	      MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
80	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().reverse();  [CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().reverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().reverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().reverse();    	non-compiled	[CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)	15	None	replace
81	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(k-1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(k-1);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(k-1);	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)this.rows.get(k);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
82	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(jF);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(jF);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(jF);	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)this.rows.get(k);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
83	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getInterverse();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getInterverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)),  sum.getSolver().getInterverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInterverse();    	non-compiled	[CE]  ';'  expected	2	None	replace
84	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver(),  sum.getInterverse();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver(),  sum.getInterverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver(),  sum.getInterverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInterverse();    	non-compiled	[CE]  ';'  expected	2	None	replace
85	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getIntersect();  [CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getIntersect();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getIntersect();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getIntersect();    	non-compiled	[CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)	17	None	replace
86	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jf).getSolver().getIntersect();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jf).getSolver().getIntersect();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jf).getSolver().getIntersect();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getIntersect();    	non-compiled	[CE]  cannot  find  symbol  jf	17	None	replace
87	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =  function,  sum.getMultivariateVectorialFunction();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =  function,  sum.getMultivariateVectorialFunction();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =  function,  sum.getMultivariateVectorialFunction();	      MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  ';'  expected	10	None	replace
88	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  ji).getSolver().getInverse();  [CE]  cannot  find  symbol  ji  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  ji).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  ji).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),    sum).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  ji	1	None	replace
89	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.values.getValues();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.values.getValues();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.values.getValues();	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)super.getValues();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
90	[BUG]  [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  ji);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  jTj  =  Math.sqrt(sum,  ji);  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  jTj  =  Math.sqrt(sum,  ji);	      double[][]    jTj    =    Math.sqrt(sum,    sum);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	21	None	replace
91	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getInterverse();  [CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getInterverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getInterverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInterverse();    	non-compiled	[CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)	2	None	replace
92	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  ji).getSolver().getInterverse();  [CE]  cannot  find  symbol  ji  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  ji).getSolver().getInterverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  ji).getSolver().getInterverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInterverse();    	non-compiled	[CE]  cannot  find  symbol  ji	2	None	replace
93	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.function.getData();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.function.getData();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.function.getData();	      MultivariateVectorialFunction    jTj    =(MultivariateVectorialFunction)super.getData();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
94	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getRange();  [CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getRange();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getRange();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getRange();    	non-compiled	[CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)	3	None	replace
95	[BUG]  [BUGGY]  double[][]  cols  =  jTj,  jTj.getColumns();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  cols  =  jTj,  jTj.getColumns();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  cols  =  jTj,  jTj.getColumns();	      double[][]    cols    =    jTj.getColumns();    	non-compiled	[CE]  ';'  expected	5	None	replace
96	[BUG]  [BUGGY]  RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();	      	non-compiled	[CE]  ';'  expected	4	None	replace
97	[BUG]  [BUGGY]  RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  super.getData();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  super.getData();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  super.getData();	      	non-compiled	[CE]  ';'  expected	4	None	replace
98	[BUG]  [BUGGY]  RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  sum;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  sum;  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  sum;	      	non-compiled	[CE]  ';'  expected	4	None	replace
99	[BUG]  [BUGGY]  RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();	      	non-compiled	[CE]  ';'  expected	4	None	replace
100	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  ji).getSolver().reverse();  [CE]  cannot  find  symbol  ji  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  ji).getSolver().reverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  ji).getSolver().reverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().reverse();    	non-compiled	[CE]  cannot  find  symbol  ji	15	None	replace
101	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jf).getSolver().reverse();  [CE]  cannot  find  symbol  jf  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jf).getSolver().reverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jf).getSolver().reverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().reverse();    	non-compiled	[CE]  cannot  find  symbol  jf	15	None	replace
102	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getVariance();  [CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getVariance();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getVariance();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getVariance();    	non-compiled	[CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)	16	None	replace
103	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jf).getSolver().getVariance();  [CE]  cannot  find  symbol  jf  [FE]            AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jf).getSolver().getVariance();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jf).getSolver().getVariance();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getVariance();    	non-compiled	[CE]  cannot  find  symbol  jf	16	None	replace
104	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  criterion)).getSolver().getInverse();  [CE]  cannot  find  symbol  criterion  [FE]          AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  criterion)).getSolver().getInverse();  [BUGGY]    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  criterion)).getSolver().getInverse();	  RealMatrix    inverse    =    new    LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,    sum)).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  criterion	19	None	replace
105	[BUG]  [BUGGY]  double[][]  sum  =  sum.doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {      [BUGGY]  double[][]  sum  =  sum.doubleValue();  [BUGGY]    RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	double[][]  sum  =  sum.doubleValue();	      double[][]    jTj    =    sum.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
