bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getInverse();  [CE]  cannot  find  symbol  sum  [FE]    AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getInverse();  [BUGGY]  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  sum).getSolver().getInverse();	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  	non-compiled	[CE]  cannot  find  symbol  sum	47	None	replace
2	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInterverse();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInterverse();  [BUGGY]  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInterverse();	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  	non-compiled	[CE]  cannot  find  symbol	47	None	replace
3	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getRange();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getRange();  [BUGGY]  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getRange();	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  	non-compiled	[CE]  cannot  find  symbol	47	None	replace
4	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  inverse  [FE]          AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    [BUGGY]  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	  	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  	non-compiled	[CE]  cannot  find  symbol  inverse	47	None	replace
5	[BUG]  [BUGGY]    double[][]  cols  =  jTj.getColumns();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    double[][]  cols  =  jTj.getColumns();  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    double[][]  cols  =  jTj.getColumns();		non-compiled	[CE]  cannot  find  symbol	48	None	add
6	[BUG]  [BUGGY]    double[][]  cols  =  sum.getColumns();  [CE]  cannot  find  symbol  sum  [FE]      AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    double[][]  cols  =  sum.getColumns();  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    double[][]  cols  =  sum.getColumns();		non-compiled	[CE]  cannot  find  symbol  sum	48	None	add
7	[BUG]  [BUGGY]    double[][]  cols  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    double[][]  cols  =  jF.getColumns();  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    double[][]  cols  =  jF.getColumns();		non-compiled	[CE]  cannot  find  symbol	48	None	add
8	[BUG]  [BUGGY]    double[][]  cols  =  sum.doubleValue();  [CE]  cannot  find  symbol  sum  [FE]          AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    double[][]  cols  =  sum.doubleValue();  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    double[][]  cols  =  sum.doubleValue();		non-compiled	[CE]  cannot  find  symbol  sum	48	None	add
9	[BUG]  [BUGGY]    double[][]  cols  =  jTj.getRows();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    double[][]  cols  =  jTj.getRows();  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    double[][]  cols  =  jTj.getRows();		non-compiled	[CE]  cannot  find  symbol	48	None	add
10	[BUG]  [BUGGY]    MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();		non-compiled	[CE]  cannot  find  symbol	48	None	add
11	[BUG]  [BUGGY]    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.getValues();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.getValues();  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.getValues();		non-compiled	[CE]  cannot  find  symbol	48	None	add
12	[BUG]  [BUGGY]    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.getData();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.getData();  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)super.getData();		non-compiled	[CE]  cannot  find  symbol	48	None	add
13	[BUG]  [BUGGY]    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i);  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(i);		non-compiled	[CE]  cannot  find  symbol	48	None	add
14	[BUG]  [BUGGY]    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(k);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(k);  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    MultivariateVectorialFunction  jTj  =(MultivariateVectorialFunction)this.rows.get(k);		non-compiled	[CE]  cannot  find  symbol	48	None	add
15	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().reverse();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().reverse();  [BUGGY]  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().reverse();	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  	non-compiled	[CE]  cannot  find  symbol	47	None	replace
16	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getVariance();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getVariance();  [BUGGY]  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getVariance();	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  	non-compiled	[CE]  cannot  find  symbol	47	None	replace
17	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getIntersect();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getIntersect();  [BUGGY]  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getIntersect();	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  	non-compiled	[CE]  cannot  find  symbol	47	None	replace
18	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getInverse();  [CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)  [FE]    AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getInverse();  [BUGGY]  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj),  jF).getSolver().getInverse();	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  	non-compiled	[CE]  no  suitable  constructor  found  for  LUDecompositionImpl(RealMatrix,MultivariateMatrixFunction)	47	None	replace
19	[BUG]  [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  sum)).getSolver().getInverse();  [CE]  cannot  find  symbol  sum  [FE]      AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  sum)).getSolver().getInverse();  [BUGGY]  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj,  sum)).getSolver().getInverse();	RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  	non-compiled	[CE]  cannot  find  symbol  sum	47	None	replace
20	[BUG]  [BUGGY]    double[][]  jTj  =  sum.doubleValue();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    double[][]  jTj  =  sum.doubleValue();  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    double[][]  jTj  =  sum.doubleValue();		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	48	None	add
21	[BUG]  [BUGGY]    double[][]  jTj  =  Math.sqrt(sum,  sum);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    double[][]  jTj  =  Math.sqrt(sum,  sum);  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    double[][]  jTj  =  Math.sqrt(sum,  sum);		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	48	None	add
22	[BUG]  [BUGGY]    double[][]  jTj  =  Math.sqrt(sum);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    double[][]  jTj  =  Math.sqrt(sum);  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    double[][]  jTj  =  Math.sqrt(sum);		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	48	None	add
23	[BUG]  [BUGGY]    double[][]  jTj  =  sum.getData();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    double[][]  jTj  =  sum.getData();  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    double[][]  jTj  =  sum.getData();		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	48	None	add
24	[BUG]  [BUGGY]    Integer  jTj  =  Math.max(remainder,  sum);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError  [CONTEXT]  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {    [BUGGY]    Integer  jTj  =  Math.max(remainder,  sum);  [BUGGY]  RealMatrix  inverse  =    new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	    Integer  jTj  =  Math.max(remainder,  sum);		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	48	None	add
