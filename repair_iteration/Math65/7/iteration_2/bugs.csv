bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  ';'  expected	12	None	replace
3	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][    	non-compiled	[CE]  ';'  expected	10	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  ';'  expected	13	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	      for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  ';'  expected	21	None	replace
10	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols  -  1];  double[]  errors  =  new  double[cols  -  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  -  1];  double[]  errors  =  new  double[cols  -  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[cols    -    1];    double[]  errors  =  new  double[cols  -  1];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	6	None	add
11	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols  -  1];  final  double[]  errors  =  new  double[cols  -  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  -  1];  final  double[]  errors  =  new  double[cols  -  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[cols    -    1];    final  double[]  errors  =  new  double[cols  -  1];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	6	None	add
12	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols  -  1];  Double[]  errors  =  new  double[cols  -  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  -  1];  Double[]  errors  =  new  double[cols  -  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[cols    -    1];    Double[]  errors  =  new  double[cols  -  1];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	6	None	add
13	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int[]  cols  =  getCols();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int[]  cols  =  getCols();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[cols    -    1];    int[]  cols  =  getCols();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
14	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int  cols  =  getCols();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int  cols  =  getCols();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[cols    -    1];    int  cols  =  getCols();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	15	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  ';'  expected	15	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	      for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	      for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	      for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  <identifier>  expected	19	None	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	double[]  errors  =  new  double[rows  -  1];	  double[]    errors    =    new    double[cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
21	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]  errors  =  new  double[rows  -  1];	  double[]    errors    =    new    double[cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols  -  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	final  double[]  errors  =  new  double[cols  -  1];	  double[]    errors    =    new    double[cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
23	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[cols  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols  -  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final  double[]  errors  =  new  double[cols  -  1];	  double[]    errors    =    new    double[cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  *  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	double[]  errors  =  new  double[cols  *  1];	  double[]    errors    =    new    double[cols    -    1];    	compilable	  [FE]  AssertionFailedError  	7	1	replace
25	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols  *  1];  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  *  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]  errors  =  new  double[cols  *  1];	  double[]    errors    =    new    double[cols    -    1];    	compilable	  [FE]  AssertionFailedError  	7	1	replace
26	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[rows  -  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	final  double[]  errors  =  new  double[rows  -  cols];	  double[]    errors    =    new    double[rows    -    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
27	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[rows  -  cols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[rows  -  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final  double[]  errors  =  new  double[rows  -  cols];	  double[]    errors    =    new    double[rows    -    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
28	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  *  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	double[]  errors  =  new  double[rows  *  cols];	  double[]    errors    =    new    double[rows    -    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
29	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  *  cols];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  *  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]  errors  =  new  double[rows  *  cols];	  double[]    errors    =    new    double[rows    -    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
30	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows];  double[]  errors  =  new  double[rows];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows];  double[]  errors  =  new  double[rows];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows];    double[]  errors  =  new  double[rows];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	4	None	add
31	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows];  final  double[]  errors  =  new  double[rows];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows];  final  double[]  errors  =  new  double[rows];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows];    final  double[]  errors  =  new  double[rows];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	4	None	add
32	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows];  Double[]  errors  =  new  double[rows];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows];  Double[]  errors  =  new  double[rows];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows];    Double[]  errors  =  new  double[rows];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	4	None	add
33	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows];  int[]  cols  =  getColumns();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows];  int[]  cols  =  getColumns();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows];    int[]  cols  =  getColumns();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
34	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows];  int[]  rows  =  getRows();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows];  int[]  rows  =  getRows();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows];    int[]  rows  =  getRows();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
36	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
37	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
39	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[cols];  final  double[]  errors  =  new  double[cols];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols];  final  double[]  errors  =  new  double[cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final    double[]    errors    =    new    double[cols];    final  double[]  errors  =  new  double[cols];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	1	None	add
40	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[cols];  Final  double[]  errors  =  new  double[cols];  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols];  Final  double[]  errors  =  new  double[cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final    double[]    errors    =    new    double[cols];    Final  double[]  errors  =  new  double[cols];	  	non-compiled	[CE]  not  a  statement	1	None	add
41	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[cols];  final  double[]  errors  =  new  double[cols]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols];  final  double[]  errors  =  new  double[cols]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final    double[]    errors    =    new    double[cols];    final  double[]  errors  =  new  double[cols]);	  	non-compiled	[CE]  ';'  expected	1	None	add
42	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[rows];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	final  double[]  errors  =  new  double[rows];	  final    double[]    errors    =    new    double[cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
43	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[rows];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[rows];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final  double[]  errors  =  new  double[rows];	  final    double[]    errors    =    new    double[cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
44	[BUG]  [BUGGY]  final  int[]  errors  =  new  int[cols];  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  int[]  errors  =  new  int[cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final  int[]  errors  =  new  int[cols];	  final    double[]    errors    =    new    double[cols];    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols  +  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	final  double[]  errors  =  new  double[cols  +  1];	  final    double[]    errors    =    new    double[cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
46	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[cols  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols  +  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final  double[]  errors  =  new  double[cols  +  1];	  final    double[]    errors    =    new    double[cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
47	[BUG]  [BUGGY]  long[]  errors  =  new  long[cols];  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  long[]  errors  =  new  long[cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	long[]  errors  =  new  long[cols];	  int[]    errors    =    new    int[cols];    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
48	[BUG]  [BUGGY]  float[]  errors  =  new  float[cols];  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  float[]  errors  =  new  float[cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	float[]  errors  =  new  float[cols];	  int[]    errors    =    new    int[cols];    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
49	[BUG]  [BUGGY]  int[]  errors  =  new  int[cols  -  1];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  int[]  errors  =  new  int[cols  -  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	int[]  errors  =  new  int[cols  -  1];	  int[]    errors    =    new    int[cols];    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	16	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	16	None	replace
52	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  double[]  errors  =  new  double[rows  -  cols];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  double[]  errors  =  new  double[rows  -  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows    -    cols];    double[]  errors  =  new  double[rows  -  cols];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	17	None	add
53	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  final  double[]  errors  =  new  double[rows  -  cols];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  final  double[]  errors  =  new  double[rows  -  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows    -    cols];    final  double[]  errors  =  new  double[rows  -  cols];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	17	None	add
54	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  Double[]  errors  =  new  double[rows  -  cols];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  Double[]  errors  =  new  double[rows  -  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows    -    cols];    Double[]  errors  =  new  double[rows  -  cols];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	17	None	add
55	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  int[]  cols  =  getColumns();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  int[]  cols  =  getColumns();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows    -    cols];    int[]  cols  =  getColumns();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
56	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  int  cols  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  int  cols  =  getColumnCount();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows    -    cols];    int  cols  =  getColumnCount();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {	      for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.size();  ++i)  {	      for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
60	[BUG]  [BUGGY]  int[]  errors  =  new  int[rows];  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  int[]  errors  =  new  int[rows];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	int[]  errors  =  new  int[rows];	  double[]    errors    =    new    double[rows];    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
61	[BUG]  [BUGGY]  long[]  errors  =  new  long[rows];  [CE]  possible  loss  of  precision  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  long[]  errors  =  new  long[rows];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	long[]  errors  =  new  long[rows];	  double[]    errors    =    new    double[rows];    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
62	[BUG]  [BUGGY]  Double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  Double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	Double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
63	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows];  int[]  errors  =  new  double[rows];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows];  int[]  errors  =  new  double[rows];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows];    int[]  errors  =  new  double[rows];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	4	None	add
64	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows];  int  cols  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows];  int  cols  =  getColumnCount();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows];    int  cols  =  getColumnCount();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
65	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols  *  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	final  double[]  errors  =  new  double[cols  *  cols];	  final    double[]    errors    =    new    double[cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
66	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[cols  *  cols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols  *  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final  double[]  errors  =  new  double[cols  *  cols];	  final    double[]    errors    =    new    double[cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
67	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	16	None	replace
68	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols.length];  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols.length];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]  errors  =  new  double[cols.length];	  double[]    errors    =    new    double[rows];    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
69	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	15	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
72	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	13	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	13	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	      for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  ';'  expected	21	None	replace
76	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[cols];  double[]  errors  =  new  double[cols];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols];  double[]  errors  =  new  double[cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final    double[]    errors    =    new    double[cols];    double[]  errors  =  new  double[cols];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	1	None	add
77	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[cols];  final  double[]  errors  =  new  double[Cols];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols];  final  double[]  errors  =  new  double[Cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final    double[]    errors    =    new    double[cols];    final  double[]  errors  =  new  double[Cols];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	1	None	add
78	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  cols  +  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	double[]  errors  =  new  double[rows  -  cols  +  1];	  double[]    errors    =    new    double[rows    -    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
79	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  -  cols  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  cols  +  1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]  errors  =  new  double[rows  -  cols  +  1];	  double[]    errors    =    new    double[rows    -    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
80	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int  cols  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int  cols  =  getColumnCount();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[cols    -    1];    int  cols  =  getColumnCount();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
81	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int  cols  -  1  =  getColumnCount();  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int  cols  -  1  =  getColumnCount();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[cols    -    1];    int  cols  -  1  =  getColumnCount();	  	non-compiled	[CE]  ';'  expected	6	None	add
82	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  int[]  errors  =  new  double[rows  -  cols];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  int[]  errors  =  new  double[rows  -  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows    -    cols];    int[]  errors  =  new  double[rows  -  cols];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	17	None	add
84	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  2];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	double[]  errors  =  new  double[rows  -  2];	  double[]    errors    =    new    double[cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
85	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  -  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  2];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]  errors  =  new  double[rows  -  2];	  double[]    errors    =    new    double[cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [BUGGY]    double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  ']'  expected	12	None	replace
87	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int  cols  -  1]  =  Math.min(getChiSquare()  /(rows  -  cols));  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int  cols  -  1]  =  Math.min(getChiSquare()  /(rows  -  cols));  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[cols    -    1];    int  cols  -  1]  =  Math.min(getChiSquare()  /(rows  -  cols));	  	non-compiled	[CE]  ';'  expected	6	None	add
88	[BUG]  [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int  cols  -  1]  =  Math.min(getChiSquare(),  cols);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[cols  -  1];  int  cols  -  1]  =  Math.min(getChiSquare(),  cols);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[cols    -    1];    int  cols  -  1]  =  Math.min(getChiSquare(),  cols);	  	non-compiled	[CE]  ';'  expected	6	None	add
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i]  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i]  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i]	      	non-compiled	[CE]  ')'  expected	8	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[2];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	double[]  errors  =  new  double[2];	  double[]    errors    =    new    double[rows];    	compilable	  [FE]  AssertionFailedError  	5	1	replace
92	[BUG]  [BUGGY]  double[]  errors  =  new  double[2];  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[2];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]  errors  =  new  double[2];	  double[]    errors    =    new    double[rows];    	compilable	  [FE]  AssertionFailedError  	5	1	replace
93	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	double[]  errors  =  new  double[1];	  double[]    errors    =    new    double[rows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
94	[BUG]  [BUGGY]  double[]  errors  =  new  double[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[1];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]  errors  =  new  double[1];	  double[]    errors    =    new    double[rows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
95	[BUG]  [BUGGY]  final  double[]  errors  =  new  double[cols];  int  cols  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  final  double[]  errors  =  new  double[cols];  int  cols  =  getColumnCount();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	final    double[]    errors    =    new    double[cols];    int  cols  =  getColumnCount();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
96	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  /  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	double[]  errors  =  new  double[rows  /  cols];	  double[]    errors    =    new    double[rows    -    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
97	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  /  cols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  /  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]  errors  =  new  double[rows  /  cols];	  double[]    errors    =    new    double[rows    -    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
98	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  double[]  errors  =  new  double[cols  -  cols];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows  -  cols];  double[]  errors  =  new  double[cols  -  cols];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows    -    cols];    double[]  errors  =  new  double[cols  -  cols];	  	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	17	None	add
99	[BUG]  [BUGGY]  double[]  errors  =  new  double[rows];  int[]  rows  =  new  double[rows];  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }    [BUGGY]  double[]  errors  =  new  double[rows];  int[]  rows  =  new  double[rows];  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	double[]    errors    =    new    double[rows];    int[]  rows  =  new  double[rows];	  	non-compiled	[CE]  incompatible  types	4	None	add
