bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  sum  +=  jTj.length  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    jTj.length    *    jacobian[k][i];    sum  +=  jTj.length  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	37	2	add
2	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  sum  +=  jTj.length  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  sum  +=  jTj.length  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj.length    *    jacobian[k][i];    sum  +=  jTj.length  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	37	2	add
3	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj.length  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj.length  *  jacobian[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj.length    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj.length  *  jacobian[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	37	None	add
4	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.length  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.length  *  jacobian[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj.length    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.length  *  jacobian[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	37	None	add
5	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  Sum  +=  jTj.length  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]          OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  Sum  +=  jTj.length  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj.length    *    jacobian[k][i];    Sum  +=  jTj.length  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	37	None	add
6	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj.length  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj.length  *  jacobian[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj.length    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj.length  *  jacobian[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	37	None	add
7	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	41	None	replace
8	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	41	None	replace
9	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                          AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	41	None	replace
10	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	70	None	replace
11	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	70	None	replace
12	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
13	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.getValue();    }    	non-compiled	[CE]  incompatible  types	2	None	replace
14	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.getValue();    }    	non-compiled	[CE]  incompatible  types	2	None	replace
15	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.getValue();    }    	non-compiled	[CE]  incompatible  types	2	None	replace
16	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	2	None	replace
17	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][j];  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][j];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][j];	  double[][]    jTj    =    new    double[cols][j];    	non-compiled	[CE]  incompatible  types	4	None	replace
18	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	73	None	replace
19	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	73	None	replace
20	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	73	None	replace
21	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	1	None	replace
22	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  incompatible  types	1	None	replace
23	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	1	None	replace
24	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	88	None	replace
25	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	88	None	replace
26	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	88	None	replace
27	[BUG]  [BUGGY]  double[][]  row  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	101	None	replace
28	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	101	None	replace
29	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	101	None	replace
30	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jCoords[k][0];  [CE]  cannot  find  symbol  jCoords  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jCoords[k][0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jCoords[k][0];	  sum    +=    jTj[i]    *    jCoords[k][j];    	non-compiled	[CE]  cannot  find  symbol  jCoords	104	None	replace
31	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jCoords[k][i];  [CE]  cannot  find  symbol  jCoords  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jCoords[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jCoords[k][i];	  sum    +=    jTj[i]    *    jCoords[k][j];    	non-compiled	[CE]  cannot  find  symbol  jCoords	104	None	replace
32	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jSquare[k][j];  [CE]  cannot  find  symbol  jSquare  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jSquare[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jSquare[k][j];	  sum    +=    jTj[i]    *    jCoords[k][j];    	non-compiled	[CE]  cannot  find  symbol  jSquare	104	None	replace
33	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	74	None	replace
34	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	74	None	replace
35	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	74	None	replace
36	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    	non-compiled	[CE]  ';'  expected	76	None	replace
37	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	22	None	replace
38	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][k];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][k];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][k];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	22	None	replace
39	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	22	None	replace
40	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][0];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][0];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  incompatible  types	77	None	replace
41	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][0];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	77	None	replace
42	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	77	None	replace
43	[BUG]  [BUGGY]  Sum  +=  rows  *  jTj[k][i];  [CE]  cannot  find  symbol  Sum  [FE]          OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  Sum  +=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	Sum  +=  rows  *  jTj[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	replace
44	[BUG]  [BUGGY]  Sum  +=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]            OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  Sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	Sum  +=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	replace
45	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]              OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	replace
46	[BUG]  [BUGGY]  Sum  +=  cols  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]                OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  Sum  +=  cols  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	Sum  +=  cols  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	replace
47	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	56	None	replace
48	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  incompatible  types	56	None	replace
49	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jTj[i];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  incompatible  types	56	None	replace
50	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >=  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >=  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >=  ';'	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >=    ';'    	non-compiled	[CE]  ';'  expected	10	None	replace
51	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	23	None	replace
52	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	23	None	replace
53	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	23	None	replace
54	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	23	None	replace
55	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	97	None	replace
56	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	97	None	replace
57	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	97	None	replace
58	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jcobian[k][j];  jTj[k][i]  *  jcobian[k][j];  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jcobian[k][j];  jTj[k][i]  *  jcobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jcobian[k][j];  jTj[k][i]  *  jcobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  not  a  statement	20	None	replace
59	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  jTj[0][i]  *  jacobian[0][j];  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  jTj[0][i]  *  jacobian[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jacobian[0][j];  jTj[0][i]  *  jacobian[0][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  not  a  statement	20	None	replace
60	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jcobian[k][j];  jTj[k][i]  *  jtj[k][j];  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jcobian[k][j];  jTj[k][i]  *  jtj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jcobian[k][j];  jTj[k][i]  *  jtj[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  not  a  statement	20	None	replace
61	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jcobian[k][j];  jTj[k][i]  *  jacobian[k][j];  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jcobian[k][j];  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jcobian[k][j];  jTj[k][i]  *  jacobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  not  a  statement	20	None	replace
62	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	107	None	replace
63	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	107	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
65	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jTj[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jTj[k][i];  sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
67	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jTj[k][i];  sum  +=  rows  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jTj[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jTj[k][i];  sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
68	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  columns  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  columns  [FE]        AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  columns  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  columns  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  columns	11	None	add
69	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  jTj  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  jTj  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  jTj  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	11	None	add
70	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]            AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    Sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	11	None	add
71	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	replace
72	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][j];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][j];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][j];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	replace
73	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	replace
74	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[i][i]  *  jacobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum    +=    jTj[k][i]    *    jacobian[k][j];    	compilable	  [FE]  OptimizationException  	18	1	replace
75	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  jacobian[k][j];  [FE]  OptimizationException  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  jacobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum    +=    jTj[k][i]    *    jacobian[k][j];    	compilable	  [FE]  OptimizationException  	18	1	replace
76	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[0][i]  *  jacobian[1][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum    +=    jTj[k][i]    *    jacobian[k][j];    	compilable	  [FE]  OptimizationException  	18	1	replace
77	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[1][j];  [FE]  OptimizationException  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jacobian[1][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum    +=    jTj[k][i]    *    jacobian[k][j];    	compilable	  [FE]  OptimizationException  	18	1	replace
78	[BUG]  [BUGGY]  sum  +=  cols[i]  /  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i]  /  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  /  jTj[k][j];	  sum    +=    cols[i]    /    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	44	None	replace
79	[BUG]  [BUGGY]  sum  +=  cols[i]  /  jtj[k][j];  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i]  /  jtj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  /  jtj[k][j];	  sum    +=    cols[i]    /    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	44	None	replace
80	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[k][0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jTj[k][0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[k][0];	  sum    +=    jTj[i]    *    jtj[k][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	29	None	replace
81	[BUG]  [BUGGY]  sum  +=  jtj[i]  *  jTj[k][i];  [CE]  cannot  find  symbol  jtj  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jtj[i]  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jtj[i]  *  jTj[k][i];	  sum    +=    jTj[i]    *    jtj[k][j];    	non-compiled	[CE]  cannot  find  symbol  jtj	29	None	replace
82	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];	  sum    +=    rows    *    jacobian[k][i];    double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	67	None	replace
83	[BUG]  [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];	  sum    +=    rows    *    jacobian[k][i];    double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	67	None	replace
84	[BUG]  [BUGGY]  sum  +=  cols  *  jTj;  double[][]  jTj  =  new  double[cols][cols];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj;  double[][]  jTj  =  new  double[cols][cols];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols  *  jTj;  double[][]  jTj  =  new  double[cols][cols];	  sum    +=    rows    *    jacobian[k][i];    double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	67	None	replace
85	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i]    *    jTj[i];    }    	non-compiled	[CE]  incompatible  types	109	None	replace
86	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	109	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum        +=        jTj[k][i]        *        jacobian[k][j];        sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];	  	compilable	  [FE]  AssertionFailedError  	17	2	add
88	[BUG]  [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        jTj[k][i]        *        jacobian[k][j];        sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];	  	compilable	  [FE]  AssertionFailedError  	17	2	add
89	[BUG]  [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        jTj[k][i]        *        jacobian[k][j];        sum    +=    jTj[k][i]    *    jacobian[k][j];    jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];	  	non-compiled	[CE]  not  a  statement	17	None	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  -=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum        +=        jTj[k][i]        *        jacobian[k][j];        sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  -=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];	  	compilable	  [FE]  AssertionFailedError  	17	2	add
91	[BUG]  [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  -=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  -=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        jTj[k][i]        *        jacobian[k][j];        sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  -=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];	  	compilable	  [FE]  AssertionFailedError  	17	2	add
92	[BUG]  [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  Sum  +=  jTj[k][i]  *  jacobian[k][j];  [CE]  cannot  find  symbol  Sum  [FE]          AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  Sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        jTj[k][i]        *        jacobian[k][j];        sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  Sum  +=  jTj[k][i]  *  jacobian[k][j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	17	None	add
93	[BUG]  [BUGGY]  sum  +=  jtj[i]  *  jTj[k][j];  [CE]  cannot  find  symbol  jtj  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jtj[i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jtj[i]  *  jTj[k][j];	  sum    +=    jTj[i]    *    jcobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jtj	75	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum        +=        rows        *        jacobian[k][i];        sum    -=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	93	1	add
95	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    -=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	93	1	add
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum        +=        rows        *        jacobian[k][i];        sum    -=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	93	2	add
97	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    -=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	93	2	add
98	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]        AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    -=    rows    *    jacobian[k][i];    Sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	93	None	add
99	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  columns  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  columns  [FE]          AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  columns  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    -=    rows    *    jacobian[k][i];    sum  +=  columns  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  columns	93	None	add
100	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  sum  -=  columns  *  jacobian[k][i];  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  sum  -=  columns  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    -=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  -=  columns  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  columns	93	None	add
101	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][k];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][k];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][k];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	39	None	replace
102	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][j];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][j];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][j];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	39	None	replace
103	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	87	None	replace
104	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	87	None	replace
105	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	87	None	replace
106	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	6	None	replace
107	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][k];  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][k];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][k];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	6	None	replace
108	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols  -  1];  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols  -  1];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[rows][cols  -  1];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	6	None	replace
109	[BUG]  [BUGGY]  sum  +=  cols[i]  *  jTj[i][j];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i]  *  jTj[i][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  *  jTj[i][j];	  sum    +=    cols[i]    *    jtj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	27	None	replace
110	[BUG]  [BUGGY]  sum  +=  jtj[i]  *  cols[k][j];  [CE]  cannot  find  symbol  jtj  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jtj[i]  *  cols[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jtj[i]  *  cols[k][j];	  sum    +=    cols[i]    *    jtj[k][j];    	non-compiled	[CE]  cannot  find  symbol  jtj	27	None	replace
111	[BUG]  [BUGGY]  sum  +=  cols[i]  *  jTj[j];  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i]  *  jTj[j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  *  jTj[j];	  sum    +=    cols[i]    *    jtj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	27	None	replace
112	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jacobian[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	62	None	replace
113	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jacobian[i]    *    jTj;    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	62	None	replace
114	[BUG]  [BUGGY]  Sum  +=  jTj[k][i]  *  jacobian[k][j];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  Sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	Sum  +=  jTj[k][i]  *  jacobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    Sum    +=    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  Sum	19	None	replace
115	[BUG]  [BUGGY]  Sum  +=  jTj[i][i]  *  jacobian[k][j];  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  Sum  +=  jTj[i][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	Sum  +=  jTj[i][i]  *  jacobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    Sum    +=    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  Sum	19	None	replace
116	[BUG]  [BUGGY]  sum  +=  cols[k][i]  *  jcobian[k][j];  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[k][i]  *  jcobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[k][i]  *  jcobian[k][j];	  sum    +=    rows[k][i]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	99	None	replace
117	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  rows[k][j];  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  rows[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[k][i]  *  rows[k][j];	  sum    +=    rows[k][i]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	99	None	replace
118	[BUG]  [BUGGY]  sum  +=  rows[k][i]  *  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[k][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[k][i]  *  jTj[k][j];	  sum    +=    rows[k][i]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	99	None	replace
119	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[cols][0];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	3	None	replace
120	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[cols][0];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	3	None	replace
121	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jTj[i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[i];	  sum    +=    jTj[i]    *    jcobian[j][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	103	None	replace
122	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jSquare[j][i];  [CE]  cannot  find  symbol  jSquare  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jSquare[j][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jSquare[j][i];	  sum    +=    jTj[i]    *    jcobian[j][i];    	non-compiled	[CE]  cannot  find  symbol  jSquare	103	None	replace
123	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][i];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][i];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][i];	  double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	78	None	replace
124	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][i];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][i];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][i];	  double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  incompatible  types	78	None	replace
125	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jF[k][i];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jF[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jF[k][i];	  sum    +=    jTj[i]    *    jtj[k][i];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	83	None	replace
126	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[j][k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jTj[j][k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[j][k];	  sum    +=    jTj[i]    *    jTj[j][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	31	None	replace
127	[BUG]  [BUGGY]  sum  +=  cols[i]  *  jTj[j][i];  [CE]  array  required,  but  int  found  [FE]                        AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i]  *  jTj[j][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  *  jTj[j][i];	  sum    +=    jTj[i]    *    jTj[j][i];    	non-compiled	[CE]  array  required,  but  int  found	31	None	replace
128	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[ki][j];  [CE]  cannot  find  symbol  ki  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[ki][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[k][i]  *  jacobian[ki][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum    +=    jTj[k][i]    *    jacobian[ki][j];    	non-compiled	[CE]  cannot  find  symbol  ki	21	None	replace
129	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  jacobian[ki][j];  [CE]  cannot  find  symbol  ki  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jacobian[ki][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  jacobian[ki][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum    +=    jTj[k][i]    *    jacobian[ki][j];    	non-compiled	[CE]  cannot  find  symbol  ki	21	None	replace
130	[BUG]  [BUGGY]  sum  +=  rows  *  jtj[k][i];  [CE]  cannot  find  symbol  jtj  [FE]              OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jtj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows  *  jtj[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    +=    rows    *    jcobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  jtj	15	None	replace
131	[BUG]  [BUGGY]  sum  +=  rows  *  cols[k][i];  [CE]  array  required,  but  int  found  [FE]                OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  cols[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows  *  cols[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    +=    rows    *    jcobian[k][i];    	non-compiled	[CE]  array  required,  but  int  found	15	None	replace
132	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[j][0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jTj[j][0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[j][0];	  sum    +=    jTj[i]    *    jTj[k][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	28	None	replace
133	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	71	None	replace
134	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	71	None	replace
135	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
136	[BUG]  [BUGGY]  sum  +=  cols[0][i]  *  jTj[1][j];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[0][i]  *  jTj[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[0][i]  *  jTj[1][j];	  sum    +=    cols[0][i]    *    jTj[0][j];    	non-compiled	[CE]  array  required,  but  int  found	90	None	replace
137	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  cols[0][j];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  cols[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  cols[0][j];	  sum    +=    cols[0][i]    *    jTj[0][j];    	non-compiled	[CE]  array  required,  but  int  found	90	None	replace
138	[BUG]  [BUGGY]  sum  +=  cols[0][i]  /  jTj[0][j];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[0][i]  /  jTj[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[0][i]  /  jTj[0][j];	  sum    +=    cols[0][i]    *    jTj[0][j];    	non-compiled	[CE]  array  required,  but  int  found	90	None	replace
139	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	9	None	replace
140	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  /  2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	9	None	replace
141	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  }  ';'  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  }  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  }  ';'	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	9	None	replace
142	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	For(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  '.class'  expected	24	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  i  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  i  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	24	None	replace
144	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  0;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  j  =  i;  j  <  0;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  j  =  i;  j  <  0;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	24	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  sum  +=  cols  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    cols    *    jTj[k][i];    sum  +=  cols  *  jTj[k][i];	  	compilable	  [FE]  AssertionFailedError  	33	2	add
146	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  sum  +=  cols  *  jTj[k][i];  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  sum  +=  cols  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jTj[k][i];    sum  +=  cols  *  jTj[k][i];	  	compilable	  [FE]  AssertionFailedError  	33	2	add
147	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols  *  jTj[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols  *  jTj[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jTj[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols  *  jTj[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	33	None	add
148	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jTj[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jTj[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jTj[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jTj[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	33	None	add
149	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols  *  jTj[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols  *  jTj[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jTj[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols  *  jTj[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	33	None	add
150	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][k];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols  *  jTj[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][k];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols  *  jTj[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jTj[k][i];    double[][]  jTj  =  new  double[cols][k];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols  *  jTj[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	33	None	add
151	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][0];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	65	None	replace
152	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][0];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	65	None	replace
153	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][0];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	65	None	replace
154	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jtj];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jtj];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jtj];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	63	None	replace
155	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][rows];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][rows];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][rows];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	63	None	replace
156	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	7	None	replace
157	[BUG]  [BUGGY]  sum  +=  jTj  *  cols[k][i];  [CE]  array  required,  but  int  found  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  cols[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  cols[k][i];	  sum    +=    cols    *    jacobian[k][i];    	non-compiled	[CE]  array  required,  but  int  found	36	None	replace
158	[BUG]  [BUGGY]  sum  +=  cols  *  jtj[k][i];  [CE]  cannot  find  symbol  jtj  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jtj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols  *  jtj[k][i];	  sum    +=    cols    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  jtj	36	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    rows    *    jTj[k][i];    sum  +=  rows  *  jTj[k][i];	  	compilable	  [FE]  AssertionFailedError  	79	2	add
160	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  rows  *  jTj[k][i];  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jTj[k][i];    sum  +=  rows  *  jTj[k][i];	  	compilable	  [FE]  AssertionFailedError  	79	2	add
161	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  Sum  +=  rows  *  jTj[k][i];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  Sum  +=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jTj[k][i];    Sum  +=  rows  *  jTj[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	79	None	add
162	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  jTj  +=  rows  *  jTj[k][i];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  jTj  +=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jTj[k][i];    jTj  +=  rows  *  jTj[k][i];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	79	None	add
163	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  columns  *  jTj[k][i];  [CE]  cannot  find  symbol  columns  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  columns  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jTj[k][i];    sum  +=  columns  *  jTj[k][i];	  	non-compiled	[CE]  cannot  find  symbol  columns	79	None	add
164	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  total  +=  rows  *  jTj[k][i];  [CE]  cannot  find  symbol  total  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  total  +=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jTj[k][i];    total  +=  rows  *  jTj[k][i];	  	non-compiled	[CE]  cannot  find  symbol  total	79	None	add
165	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jTj[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[0][i]  *  jTj[0][j];	  sum    +=    jTj[k][i]    *    jTj[k][j];    	compilable	  [FE]  OptimizationException  	49	1	replace
166	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jTj[0][j];  [FE]  OptimizationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jTj[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jTj[0][j];	  sum    +=    jTj[k][i]    *    jTj[k][j];    	compilable	  [FE]  OptimizationException  	49	1	replace
167	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[i][i]  *  jTj[k][j];	  sum    +=    jTj[k][i]    *    jTj[k][j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	replace
168	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  jTj[k][j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  jTj[k][j];	  sum    +=    jTj[k][i]    *    jTj[k][j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	replace
169	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jTj[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[0][i]  *  jTj[1][j];	  sum    +=    jTj[k][i]    *    jTj[k][j];    	compilable	  [FE]  OptimizationException  	49	1	replace
170	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jTj[1][j];  [FE]  OptimizationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jTj[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jTj[1][j];	  sum    +=    jTj[k][i]    *    jTj[k][j];    	compilable	  [FE]  OptimizationException  	49	1	replace
171	[BUG]  [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    -=    rows    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	94	None	replace
172	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  -=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    -=    rows    *    jacobian[k][i];    	compilable	  [FE]  OptimizationException  	94	1	replace
173	[BUG]  [BUGGY]  sum  -=  rows  *  jacobian[k][i];  [FE]  OptimizationException  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  -=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    -=    rows    *    jacobian[k][i];    	compilable	  [FE]  OptimizationException  	94	1	replace
174	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][k];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][k];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][k];	  double[][]    jTj    =    new    double[cols][k];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	5	None	replace
175	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  cols;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[k][i]  *  cols;	  sum    +=    cols    *    jTj[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	replace
176	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  cols;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  cols;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[k][i]  *  cols;	  sum    +=    cols    *    jTj[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	replace
177	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols  *  jTj[i];	  sum    +=    cols    *    jTj[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	34	None	replace
178	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[cols][0];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	89	None	replace
179	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    jTj    =    new    double[cols][0];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	89	None	replace
180	[BUG]  [BUGGY]  sum  +=  jTj  *  jcobian[k][i];  [CE]  cannot  find  symbol  jcobian  [FE]        OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jcobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jcobian[k][i];	  sum    +=    jTj    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  jcobian	32	None	replace
181	[BUG]  [BUGGY]  sum  +=  jTj  *  jTj[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jTj[k][i];	  sum    +=    jTj    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	32	None	replace
182	[BUG]  [BUGGY]  sum  +=  jTj  *  jTj[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jTj[i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jTj[i];	  sum    +=    jTj    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	32	None	replace
183	[BUG]  [BUGGY]  sum  +=  jTj  *  cols[i];  [CE]  array  required,  but  int  found  [FE]              OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  cols[i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  cols[i];	  sum    +=    jTj    *    jacobian[k][i];    	non-compiled	[CE]  array  required,  but  int  found	32	None	replace
184	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    cols[i];    }    	non-compiled	[CE]  incompatible  types	55	None	replace
185	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][k];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][k];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][k];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    cols[i];    }    	non-compiled	[CE]  incompatible  types	55	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    cols[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	55	None	replace
187	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    cols[i];    }    	non-compiled	[CE]  incompatible  types	55	None	replace
188	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jtj[0][j];  [CE]  cannot  find  symbol  jtj  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jtj[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jtj[0][j];	  sum    +=    jTj[0][i]    *    jacobian[0][j];    	non-compiled	[CE]  cannot  find  symbol  jtj	47	None	replace
189	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    cols[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	40	None	replace
190	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    cols[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	40	None	replace
191	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][k];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][k];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][k];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    cols[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	40	None	replace
192	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    cols[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	40	None	replace
193	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	69	None	replace
194	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	69	None	replace
195	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  incompatible  types	69	None	replace
196	[BUG]  [BUGGY]  sum  +=  jtj[i]  *  jTj[j][i];  [CE]  cannot  find  symbol  jtj  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jtj[i]  *  jTj[j][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jtj[i]  *  jTj[j][i];	  sum    +=    jTj[i]    *    jtj[j][i];    	non-compiled	[CE]  cannot  find  symbol  jtj	105	None	replace
197	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jF[j][i];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jF[j][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jF[j][i];	  sum    +=    jTj[i]    *    jtj[j][i];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	105	None	replace
198	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  jtj[k][j];  [CE]  cannot  find  symbol  jtj  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jtj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  jtj[k][j];	  sum    +=    jTj[i][i]    *    jcobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jtj	50	None	replace
199	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  jJacobian[k][j];  [CE]  cannot  find  symbol  jJacobian  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jJacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  jJacobian[k][j];	  sum    +=    jTj[i][i]    *    jcobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jJacobian	50	None	replace
200	[BUG]  [BUGGY]  sum  +=  jtj[i][i]  *  jTj[k][j];  [CE]  cannot  find  symbol  jtj  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jtj[i][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jtj[i][i]  *  jTj[k][j];	  sum    +=    jTj[i][i]    *    jcobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jtj	50	None	replace
201	[BUG]  [BUGGY]  double[][]  jacobian  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jacobian  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jacobian  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }	  double[][]    jacobian    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jacobian[i]    *    jTj;    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	102	None	replace
202	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }	  double[][]    jacobian    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jacobian[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	102	None	replace
203	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[k][i];	  sum    +=    rows    *    jTj[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	replace
204	[BUG]  [BUGGY]  sum  +=  jTj[k][i];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[k][i];	  sum    +=    rows    *    jTj[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	replace
205	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj.length  *  jTj[k][i];	  sum    +=    rows    *    jTj[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	replace
206	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jTj[k][i];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj.length  *  jTj[k][i];	  sum    +=    rows    *    jTj[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	replace
207	[BUG]  [BUGGY]  Sum  -=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]        OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  Sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	Sum  -=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    -=    rows    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  Sum	66	None	replace
208	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]          OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    -=    rows    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  Sum	66	None	replace
209	[BUG]  [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    -=    rows    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	66	None	replace
210	[BUG]  [BUGGY]  Sum  -=  cols  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]              OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  Sum  -=  cols  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	Sum  -=  cols  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    -=    rows    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  Sum	66	None	replace
211	[BUG]  [BUGGY]  sum  +=  cols[i][j]  *  jTj[k][k];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i][j]  *  jTj[k][k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][j]  *  jTj[k][k];	  sum    +=    cols[i][j]    *    jacobian[k][k];    	non-compiled	[CE]  array  required,  but  int  found	54	None	replace
212	[BUG]  [BUGGY]  sum  +=  cols[i][j]  *  jtj[k][k];  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i][j]  *  jtj[k][k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][j]  *  jtj[k][k];	  sum    +=    cols[i][j]    *    jacobian[k][k];    	non-compiled	[CE]  array  required,  but  int  found	54	None	replace
213	[BUG]  [BUGGY]  sum  +=  cols[i][j]  /  jacobian[k][k];  [CE]  array  required,  but  int  found  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i][j]  /  jacobian[k][k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][j]  /  jacobian[k][k];	  sum    +=    cols[i][j]    *    jacobian[k][k];    	non-compiled	[CE]  array  required,  but  int  found	54	None	replace
214	[BUG]  [BUGGY]  sum  -=  cols[i][j]  *  jTj[k][k];  [CE]  array  required,  but  int  found  [FE]                        AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  -=  cols[i][j]  *  jTj[k][k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  -=  cols[i][j]  *  jTj[k][k];	  sum    +=    cols[i][j]    *    jacobian[k][k];    	non-compiled	[CE]  array  required,  but  int  found	54	None	replace
215	[BUG]  [BUGGY]  sum  +=  cols[j][i]  *  jTj[j];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[j][i]  *  jTj[j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[j][i]  *  jTj[j];	  sum    +=    cols[j][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	53	None	replace
216	[BUG]  [BUGGY]  sum  +=  cols[j][i]  *  jTj[0][j];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[j][i]  *  jTj[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[j][i]  *  jTj[0][j];	  sum    +=    cols[j][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	53	None	replace
217	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  cols[j];  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  cols[j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  cols[j];	  sum    +=    cols[j][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	53	None	replace
218	[BUG]  [BUGGY]  sum  +=  cols[j][i]  *  jTj[j][0];  [CE]  array  required,  but  int  found  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[j][i]  *  jTj[j][0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[j][i]  *  jTj[j][0];	  sum    +=    cols[j][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	53	None	replace
219	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jacobian[k][i];	  sum    +=    jTj.length    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	38	None	replace
220	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jTj[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jTj[i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj.length  *  jTj[i];	  sum    +=    jTj.length    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	38	None	replace
221	[BUG]  [BUGGY]  sum  +=  jTj.length  *  cols[k][i];  [CE]  array  required,  but  int  found  [FE]        OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  cols[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj.length  *  cols[k][i];	  sum    +=    jTj.length    *    jacobian[k][i];    	non-compiled	[CE]  array  required,  but  int  found	38	None	replace
222	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	64	None	replace
223	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	64	None	replace
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  sum  +=  jTj[k][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    jTj[k][i]    *    jTj[k][j];    sum  +=  jTj[k][i]  *  jTj[k][j];	  	compilable	  [FE]  AssertionFailedError  	48	2	add
225	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  sum  +=  jTj[k][i]  *  jTj[k][j];  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  sum  +=  jTj[k][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jTj[k][j];    sum  +=  jTj[k][i]  *  jTj[k][j];	  	compilable	  [FE]  AssertionFailedError  	48	2	add
226	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  Sum  +=  jTj[k][i]  *  jTj[k][j];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  Sum  +=  jTj[k][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jTj[k][j];    Sum  +=  jTj[k][i]  *  jTj[k][j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	48	None	add
227	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  jTj[k][i]  *  jTj[k][j];  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  jTj[k][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jTj[k][j];    jTj[k][i]  *  jTj[k][j];	  	non-compiled	[CE]  not  a  statement	48	None	add
228	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  jTj  +=  jTj[k][i]  *  jTj[k][j];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  jTj  +=  jTj[k][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jTj[k][j];    jTj  +=  jTj[k][i]  *  jTj[k][j];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	48	None	add
229	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double[][]  jTj  =  new  double[cols][cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double[][]  jTj  =  new  double[cols][cols];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jTj[k][j];    double[][]  jTj  =  new  double[cols][cols];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	48	None	add
230	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	60	None	replace
231	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	60	None	replace
232	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][j];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][j];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][j];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	60	None	replace
233	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  cols[cols][j];  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  cols[cols][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  cols[cols][j];	  sum    +=    jTj[i]    *    cols[k][j];    	non-compiled	[CE]  array  required,  but  int  found	45	None	replace
234	[BUG]  [BUGGY]  sum  -=  cols[i]  *  jTj[i][j];  [CE]  array  required,  but  int  found  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  -=  cols[i]  *  jTj[i][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  -=  cols[i]  *  jTj[i][j];	  sum    +=    jTj[i]    *    cols[k][j];    	non-compiled	[CE]  array  required,  but  int  found	45	None	replace
235	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	85	None	replace
236	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jacobian[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jacobian[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jacobian[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	85	None	replace
237	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[0][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jTj[0][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[0][i];	  sum    +=    jTj[i]    *    jTj[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	82	None	replace
238	[BUG]  [BUGGY]  Sum  sum  +=  jTj[i]  *  jTj[j][i];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  Sum  sum  +=  jTj[i]  *  jTj[j][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	Sum  sum  +=  jTj[i]  *  jTj[j][i];	  sum    +=    jTj[i]    *    jTj[k][i];    	non-compiled	[CE]  ';'  expected	82	None	replace
239	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  cols[i];	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
240	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	86	None	replace
241	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  double[][]  row  =  new  double[cols][cols];  [CE]  variable  row  is  already  defined  in  method  getCovariances()  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols];  double[][]  row  =  new  double[cols][cols];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]    row    =    new    double[cols][cols];    double[][]  row  =  new  double[cols][cols];	  	non-compiled	[CE]  variable  row  is  already  defined  in  method  getCovariances()	91	None	add
242	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  double[][]  row  =  new  double[cols][cols];  [CE]  illegal  start  of  expression  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  double[][]  row  =  new  double[cols][cols];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]    row    =    new    double[cols][cols];    for(int  k  =  0;  k  <  cols;  ++k)  {  double[][]  row  =  new  double[cols][cols];	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
243	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  double[][]  row  =  new  double[cols][cols];  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]        OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  double[][]  row  =  new  double[cols][cols];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]    row    =    new    double[cols][cols];    for(int  k  =  0;  k  <  cols;  ++k)  {  double[][]  row  =  new  double[cols][cols];  }	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	91	None	add
244	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  Double[][]  row  =  new  double[cols][cols];  [CE]  variable  row  is  already  defined  in  method  getCovariances()  [FE]          OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols];  Double[][]  row  =  new  double[cols][cols];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]    row    =    new    double[cols][cols];    Double[][]  row  =  new  double[cols][cols];	  	non-compiled	[CE]  variable  row  is  already  defined  in  method  getCovariances()	91	None	add
245	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  int[][]  row  =  new  double[cols][cols];  [CE]  variable  row  is  already  defined  in  method  getCovariances()  [FE]            OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols];  int[][]  row  =  new  double[cols][cols];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]    row    =    new    double[cols][cols];    int[][]  row  =  new  double[cols][cols];	  	non-compiled	[CE]  variable  row  is  already  defined  in  method  getCovariances()	91	None	add
246	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jTj];  [CE]  incompatible  types  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][jTj];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][jTj];	  double[][]    row    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	92	None	replace
247	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[rows][cols];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	double[][]  row  =  new  double[rows][cols];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	92	1	replace
248	[BUG]  [BUGGY]  double[][]  row  =  new  double[rows][cols];  [FE]  OptimizationException  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[rows][cols];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[rows][cols];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	92	1	replace
249	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]        OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][k];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	double[][]  row  =  new  double[cols][k];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	92	1	replace
250	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][k];  [FE]  OptimizationException  [FE]        OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][k];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][k];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	92	1	replace
251	[BUG]  [BUGGY]  double[][]  row  =  new  double[jTj][cols];  [CE]  incompatible  types  [FE]          OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[jTj][cols];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[jTj][cols];	  double[][]    row    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	92	None	replace
252	[BUG]  [BUGGY]  sum  +=  cols[i][i]  *  jTj[j];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i][i]  *  jTj[j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][i]  *  jTj[j];	  sum    +=    cols[i][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	52	None	replace
253	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  cols[k][j];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  cols[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  cols[k][j];	  sum    +=    cols[i][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	52	None	replace
254	[BUG]  [BUGGY]  sum  +=  cols[i][i]  *  jTj[0][j];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i][i]  *  jTj[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][i]  *  jTj[0][j];	  sum    +=    cols[i][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	52	None	replace
255	[BUG]  [BUGGY]  sum  +=  rows[i]  *  jTj[i][j];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i]  *  jTj[i][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i]  *  jTj[i][j];	  sum    +=    rows[i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	26	None	replace
256	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    cols[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	61	None	replace
257	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    cols[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	61	None	replace
258	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj].for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj].for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj].for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    cols[i]    *    jTj;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
259	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    cols[i]    *    jTj;    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	61	None	replace
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  sum  +=  jTj[0][i]  *  jacobian[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    jTj[0][i]    *    jacobian[0][j];    sum  +=  jTj[0][i]  *  jacobian[0][j];	  	compilable	  [FE]  AssertionFailedError  	46	2	add
261	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  sum  +=  jTj[0][i]  *  jacobian[0][j];  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  sum  +=  jTj[0][i]  *  jacobian[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[0][i]    *    jacobian[0][j];    sum  +=  jTj[0][i]  *  jacobian[0][j];	  	compilable	  [FE]  AssertionFailedError  	46	2	add
262	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  Sum  +=  jTj[0][i]  *  jacobian[0][j];  [CE]  cannot  find  symbol  Sum  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  Sum  +=  jTj[0][i]  *  jacobian[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[0][i]    *    jacobian[0][j];    Sum  +=  jTj[0][i]  *  jacobian[0][j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	46	None	add
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  sum  +=  jTj[0][i]  *  jacobian[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    jTj[0][i]    *    jacobian[0][j];    sum  +=  jTj[0][i]  *  jacobian[1][j];	  	compilable	  [FE]  AssertionFailedError  	46	2	add
264	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  sum  +=  jTj[0][i]  *  jacobian[1][j];  [FE]  AssertionFailedError  [FE]        OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  sum  +=  jTj[0][i]  *  jacobian[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[0][i]    *    jacobian[0][j];    sum  +=  jTj[0][i]  *  jacobian[1][j];	  	compilable	  [FE]  AssertionFailedError  	46	2	add
265	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  double[][]  jTj  =  new  double[cols][cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  double[][]  jTj  =  new  double[cols][cols];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[0][i]    *    jacobian[0][j];    double[][]  jTj  =  new  double[cols][cols];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	46	None	add
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  sum  +=  cols  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    cols    *    jacobian[k][i];    sum  +=  cols  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	35	2	add
267	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  sum  +=  cols  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  sum  +=  cols  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jacobian[k][i];    sum  +=  cols  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	35	2	add
268	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols  *  jacobian[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols  *  jacobian[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	35	None	add
269	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jacobian[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jacobian[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	35	None	add
270	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jacobian[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jacobian[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	35	None	add
271	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  Sum  +=  cols  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]            OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  Sum  +=  cols  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jacobian[k][i];    Sum  +=  cols  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	35	None	add
272	[BUG]  [BUGGY]  sum  +=  columns  *  jacobian[k][i];  [CE]  cannot  find  symbol  columns  [FE]                OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  columns  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  columns  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    +=    columns    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  columns	16	None	replace
273	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jF[j][0];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jF[j][0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jF[j][0];	  sum    +=    jTj[i]    *    jF[k][j];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	81	None	replace
274	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jF[j][k];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jF[j][k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jF[j][k];	  sum    +=    jTj[i]    *    jF[k][j];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	81	None	replace
275	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jF[0][j];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jF[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jF[0][j];	  sum    +=    jTj[i]    *    jF[k][j];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	81	None	replace
276	[BUG]  [BUGGY]  double[][]  row  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	110	None	replace
277	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	110	None	replace
278	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.getValue();    }    	non-compiled	[CE]  incompatible  types	110	None	replace
279	[BUG]  [BUGGY]  sum  +=  jtj[0][i]  *  jTj[0][j];  [CE]  cannot  find  symbol  jtj  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jtj[0][i]  *  jTj[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jtj[0][i]  *  jTj[0][j];	  sum    +=    jTj[0][i]    *    jcobian[0][j];    	non-compiled	[CE]  cannot  find  symbol  jtj	100	None	replace
280	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jJacobian[0][j];  [CE]  cannot  find  symbol  jJacobian  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jJacobian[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jJacobian[0][j];	  sum    +=    jTj[0][i]    *    jcobian[0][j];    	non-compiled	[CE]  cannot  find  symbol  jJacobian	100	None	replace
281	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jTj[k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[k];	  sum    +=    jTj[i]    *    jTj[j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
282	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj;	  sum    +=    jTj[i]    *    jTj[j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
283	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    jTj    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	14	None	replace
284	[BUG]  [BUGGY]  jTj  +=  rows  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  jTj  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	jTj  +=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    jTj    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	14	None	replace
285	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	57	None	replace
286	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	57	None	replace
287	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    cols);    }    	non-compiled	[CE]  incompatible  types	58	None	replace
288	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    cols);    }    	non-compiled	[CE]  incompatible  types	58	None	replace
289	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    cols);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	58	None	replace
290	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    cols);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	58	None	replace
291	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	106	None	replace
292	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  i;  k  <  cols;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  i;  k  <  cols;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  i;  k  <  cols;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	106	None	replace
293	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
294	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  ';'  expected	106	None	replace
295	[BUG]  [BUGGY]  sum  +=  cols[i][j]  *  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i][j]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][j]  *  jTj[k][j];	  sum    +=    cols[i][j]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	108	None	replace
296	[BUG]  [BUGGY]  sum  +=  cols[i][j]  *  jtj[k][j];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i][j]  *  jtj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][j]  *  jtj[k][j];	  sum    +=    cols[i][j]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	108	None	replace
297	[BUG]  [BUGGY]  sum  +=  cols[i][j]  *  jTj[j];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i][j]  *  jTj[j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][j]  *  jTj[j];	  sum    +=    cols[i][j]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	108	None	replace
298	[BUG]  [BUGGY]  sum  +=  jTj[i][j]  *  cols[k][j];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][j]  *  cols[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][j]  *  cols[k][j];	  sum    +=    cols[i][j]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	108	None	replace
299	[BUG]  [BUGGY]  sum  +=  cols[i]  *  jTj[0][j];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i]  *  jTj[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  *  jTj[0][j];	  sum    +=    cols[i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	25	None	replace
300	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
301	[BUG]  [BUGGY]  sum  +=  cols[k][i]  *  jTj[j];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[k][i]  *  jTj[j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[k][i]  *  jTj[j];	  sum    +=    cols[k][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	51	None	replace
302	[BUG]  [BUGGY]  sum  +=  cols[j][i]  *  jTj[k][i];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[j][i]  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[j][i]  *  jTj[k][i];	  sum    +=    cols[k][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	51	None	replace
303	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    rows    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	95	None	replace
304	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  rows  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    rows    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	95	None	replace
305	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	59	None	replace
306	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  For(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	For(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  '.class'  expected	59	None	replace
307	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  columns;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  k  =  0;  k  <  columns;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  k  =  0;  k  <  columns;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	59	None	replace
308	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	84	None	replace
309	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	84	None	replace
310	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	107	None	replace
311	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	107	None	replace
312	[BUG]  [BUGGY]  sum  +=  jTj.length  *  rows[k][i];  [CE]  array  required,  but  int  found  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  rows[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj.length  *  rows[k][i];	  sum    +=    jTj.length    *    jacobian[k][i];    	non-compiled	[CE]  array  required,  but  int  found	38	None	replace
313	[BUG]  [BUGGY]  sum  +=  jTj.length  *  cols[j][i];  [CE]  array  required,  but  int  found  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  cols[j][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj.length  *  cols[j][i];	  sum    +=    jTj.length    *    jacobian[k][i];    	non-compiled	[CE]  array  required,  but  int  found	38	None	replace
314	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jTj[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jTj[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jTj[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jTj[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	33	None	add
315	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jTj[k][i];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jTj[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jTj[k][i];	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
316	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jTj[k][i];  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jTj[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jTj[k][i];	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
317	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[cols][0];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	3	None	replace
318	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	74	None	replace
319	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	74	None	replace
320	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	84	None	replace
321	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  ']'  expected	84	None	replace
322	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jF[i][j];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jF[i][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jF[i][j];	  sum    +=    jTj[i]    *    jF[k][j];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	81	None	replace
323	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[i][i]  *  jTj[k][i];	  sum    +=    jTj[i][i]    *    jcobian[k][j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	replace
324	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  jTj[k][i];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  jTj[k][i];	  sum    +=    jTj[i][i]    *    jcobian[k][j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	replace
325	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  jF[k][j];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jF[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  jF[k][j];	  sum    +=    jTj[i][i]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	50	None	replace
326	[BUG]  [BUGGY]  sum  +=  cols[i][j]  /  jcobian[k][j];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i][j]  /  jcobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][j]  /  jcobian[k][j];	  sum    +=    cols[i][j]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	108	None	replace
327	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	71	None	replace
328	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  ']'  expected	42	None	replace
329	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
330	[BUG]  [BUGGY]  sum  +=  cols[i][i]  /  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i][i]  /  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][i]  /  jTj[k][j];	  sum    +=    cols[i][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	52	None	replace
331	[BUG]  [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  Jacobian[k][j];  [CE]  cannot  find  symbol  Jacobian  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  Jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        jTj[k][i]        *        jacobian[k][j];        sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  Jacobian[k][j];	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	17	None	add
332	[BUG]  [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[K][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [CE]  cannot  find  symbol  K  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[K][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        jTj[k][i]        *        jacobian[k][j];        sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[K][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];	  	non-compiled	[CE]  cannot  find  symbol  K	17	None	add
333	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	57	None	replace
334	[BUG]  [BUGGY]  double[][]  jacobian  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jacobian  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jacobian  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }	  double[][]    jacobian    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jacobian[i]    *    jTj;    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	102	None	replace
335	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++i)  {  double[][]  row  =  new  double[cols][cols];  [CE]  illegal  start  of  expression  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++i)  {  double[][]  row  =  new  double[cols][cols];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]    row    =    new    double[cols][cols];    for(int  k  =  0;  k  <  cols;  ++i)  {  double[][]  row  =  new  double[cols][cols];	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
336	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++j)  {  double[][]  row  =  new  double[cols][cols];  [CE]  illegal  start  of  expression  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++j)  {  double[][]  row  =  new  double[cols][cols];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]    row    =    new    double[cols][cols];    for(int  k  =  0;  k  <  cols;  ++j)  {  double[][]  row  =  new  double[cols][cols];	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
337	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	41	None	replace
338	[BUG]  [BUGGY]  sum  +=  jTj  *  jcobian[i][k];  [CE]  cannot  find  symbol  jcobian  [FE]        OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jcobian[i][k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jcobian[i][k];	  sum    +=    jTj    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  jcobian	32	None	replace
339	[BUG]  [BUGGY]  sum  +=  jTj  *  jF[k][i];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]          OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jF[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jF[k][i];	  sum    +=    jTj    *    jacobian[k][i];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	32	None	replace
340	[BUG]  [BUGGY]  sum  +=  jTj  *  jtj[i];  [CE]  cannot  find  symbol  jtj  [FE]            OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jtj[i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jtj[i];	  sum    +=    jTj    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  jtj	32	None	replace
341	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	73	None	replace
342	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][3];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][3];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][3];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    cols[i];    }    	non-compiled	[CE]  incompatible  types	55	None	replace
343	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][2];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][2];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][2];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    cols[i];    }    	non-compiled	[CE]  incompatible  types	55	None	replace
344	[BUG]  [BUGGY]  Sum  -=  rows  *  jTj[k][i];  [CE]  cannot  find  symbol  Sum  [FE]        OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  Sum  -=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	Sum  -=  rows  *  jTj[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    -=    rows    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  Sum	66	None	replace
345	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[0]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[0]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[0]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	1	None	replace
346	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	106	None	replace
347	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  }  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  }  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  }  ';'	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	7	None	replace
348	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  +  ';'  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  +  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  +  ';'	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	7	None	replace
349	[BUG]  [BUGGY]  sum  +=  cols  *  jcobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  [CE]  cannot  find  symbol  jcobian  [FE]          OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jcobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols  *  jcobian[k][i];  double[][]  jTj  =  new  double[cols][cols];	  sum    +=    rows    *    jacobian[k][i];    double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  cannot  find  symbol  jcobian	67	None	replace
350	[BUG]  [BUGGY]  sum  -=  rows  *  cols[k][i];  double[][]  jTj  =  new  double[cols][cols];  [CE]  array  required,  but  int  found  [FE]            OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  -=  rows  *  cols[k][i];  double[][]  jTj  =  new  double[cols][cols];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  -=  rows  *  cols[k][i];  double[][]  jTj  =  new  double[cols][cols];	  sum    +=    rows    *    jacobian[k][i];    double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  array  required,  but  int  found	67	None	replace
351	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][0];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	65	None	replace
352	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	101	None	replace
353	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols  /  cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols  /  cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols  /  cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	101	None	replace
354	[BUG]  [BUGGY]  sum  +=  i  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  i  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  i  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    jTj    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	14	None	replace
355	[BUG]  [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    jTj    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	14	None	replace
356	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
357	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  '  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  '	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    	non-compiled	[CE]  illegal  line  end  in  character  literal	76	None	replace
358	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    cols[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	61	None	replace
359	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    cols[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	61	None	replace
360	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    cols[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	61	None	replace
361	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    cols[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	61	None	replace
362	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[1][i]  *  jacobian[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[1][i]  *  jacobian[1][j];	  sum    +=    jTj[0][i]    *    jacobian[0][j];    	compilable	  [FE]  OptimizationException  	47	1	replace
363	[BUG]  [BUGGY]  sum  +=  jTj[1][i]  *  jacobian[1][j];  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[1][i]  *  jacobian[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[1][i]  *  jacobian[1][j];	  sum    +=    jTj[0][i]    *    jacobian[0][j];    	compilable	  [FE]  OptimizationException  	47	1	replace
364	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    cols);    }    	non-compiled	[CE]  incompatible  types	58	None	replace
365	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    cols);    }    	non-compiled	[CE]  incompatible  types	58	None	replace
366	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    cols);    }    	non-compiled	[CE]  incompatible  types	58	None	replace
367	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	85	None	replace
368	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[0]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[0]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[0]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	22	None	replace
369	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  *  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	69	None	replace
370	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	69	None	replace
371	[BUG]  [BUGGY]  sum  +=  cols[i]  *  jTj[i];  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[i]  *  jTj[i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  *  jTj[i];	  sum    +=    jTj[i]    *    cols[k][j];    	non-compiled	[CE]  array  required,  but  int  found	45	None	replace
372	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols.length];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	63	None	replace
373	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	63	None	replace
374	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	63	None	replace
375	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jacobian[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	62	None	replace
376	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][2];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.getValue();    }    	non-compiled	[CE]  incompatible  types	2	None	replace
377	[BUG]  [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  sum  +=  rows  *  jTj[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  sum  +=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jacobian[k][i];  sum  +=  rows  *  jTj[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    +=    rows    *    jcobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	15	None	replace
378	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][0];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	double[][]  row  =  new  double[cols][0];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	92	1	replace
379	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][0];  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][0];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][0];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	92	1	replace
380	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][i];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	double[][]  row  =  new  double[cols][i];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	92	1	replace
381	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][i];  [FE]  OptimizationException  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][i];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][i];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	92	1	replace
382	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  -  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  -  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  -  ';'	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	9	None	replace
383	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  +  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  +  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  +  ';'	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	9	None	replace
384	[BUG]  [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  sum  +=  columns  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  sum  +=  columns  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jacobian[k][i];  sum  +=  columns  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    +=    columns    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	16	None	replace
385	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  cols  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  rows  *  jTj[k][i];  sum  +=  cols  *  jTj[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    +=    columns    *    jacobian[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
386	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  cols  *  jTj[k][i];  [FE]  ArrayIndexOutOfBoundsException  [FE]                  OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  cols  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows  *  jTj[k][i];  sum  +=  cols  *  jTj[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    +=    columns    *    jacobian[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
387	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  jTj  +=  jTj.length  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  jTj  +=  jTj.length  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj.length    *    jacobian[k][i];    jTj  +=  jTj.length  *  jacobian[k][i];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	37	None	add
388	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double  jTj  =  Math.min(sum,  jTj.length);  sum  +=  jTj.length  *  jacobian[k][i];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double  jTj  =  Math.min(sum,  jTj.length);  sum  +=  jTj.length  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj.length    *    jacobian[k][i];    double  jTj  =  Math.min(sum,  jTj.length);  sum  +=  jTj.length  *  jacobian[k][i];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	37	None	add
389	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  sum  +=  jTj.length  *  jacobian[ki][i];  [CE]  cannot  find  symbol  ki  [FE]        OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  sum  +=  jTj.length  *  jacobian[ki][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj.length    *    jacobian[k][i];    sum  +=  jTj.length  *  jacobian[ki][i];	  	non-compiled	[CE]  cannot  find  symbol  ki	37	None	add
390	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[1][i]  *  jTj[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[1][i]  *  jTj[1][j];	  sum    +=    jTj[k][i]    *    jTj[k][j];    	compilable	  [FE]  OptimizationException  	49	1	replace
391	[BUG]  [BUGGY]  sum  +=  jTj[1][i]  *  jTj[1][j];  [FE]  OptimizationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[1][i]  *  jTj[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[1][i]  *  jTj[1][j];	  sum    +=    jTj[k][i]    *    jTj[k][j];    	compilable	  [FE]  OptimizationException  	49	1	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
393	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
394	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  Jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Jacobian  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  Jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  Jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	11	None	add
395	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]        AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	11	None	add
396	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  *  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	64	None	replace
397	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	64	None	replace
398	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    -=    rows    *    jacobian[k][i];    Sum  -=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	93	None	add
399	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    -=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	93	None	add
400	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double  jTj[k][i]  *  jTj[k][j];  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double  jTj[k][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jTj[k][j];    double  jTj[k][i]  *  jTj[k][j];	  	non-compiled	[CE]  ']'  expected	48	None	add
401	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jTj[k][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jTj[k][j];	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
402	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	60	None	replace
403	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	88	None	replace
404	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	88	None	replace
405	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  /  2];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	88	None	replace
406	[BUG]  [BUGGY]  sum  +=  cols[k][i]  *  jTj[i];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[k][i]  *  jTj[i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[k][i]  *  jTj[i];	  sum    +=    cols[k][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	51	None	replace
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[cols][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[cols][i];	  sum    +=    rows    *    jTj[k][i];    	compilable	  [FE]  AssertionFailedError  	80	2	replace
408	[BUG]  [BUGGY]  sum  +=  jTj[cols][i];  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[cols][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[cols][i];	  sum    +=    rows    *    jTj[k][i];    	compilable	  [FE]  AssertionFailedError  	80	2	replace
409	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  rows;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  rows;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  rows;	  sum    +=    rows    *    jTj[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	80	None	replace
410	[BUG]  [BUGGY]  sum  +=  cols[j][i]  /  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[j][i]  /  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[j][i]  /  jTj[k][j];	  sum    +=    cols[j][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	53	None	replace
411	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  cols[j][j];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  cols[j][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  cols[j][j];	  sum    +=    cols[j][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	53	None	replace
412	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  Sum  jTj  +=  rows  *  jTj[k][i];  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  Sum  jTj  +=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jTj[k][i];    Sum  jTj  +=  rows  *  jTj[k][i];	  	non-compiled	[CE]  ';'  expected	79	None	add
413	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  rows  *  jTj[k][i].getSolver();  [CE]  double  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  rows  *  jTj[k][i].getSolver();  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jTj[k][i];    sum  +=  rows  *  jTj[k][i].getSolver();	  	non-compiled	[CE]  double  cannot  be  dereferenced	79	None	add
414	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
415	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[len][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[len][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[len][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
416	[BUG]  [BUGGY]  sum  +=  jTj[i][j]  *  cols[k][k];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][j]  *  cols[k][k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][j]  *  cols[k][k];	  sum    +=    cols[i][j]    *    jacobian[k][k];    	non-compiled	[CE]  array  required,  but  int  found	54	None	replace
417	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  rows  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  rows  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    rows    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	95	None	replace
418	[BUG]  [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
419	[BUG]  [BUGGY]  Sum  +=  jTj[0][i]  *  jacobian[0][j];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  Sum  +=  jTj[0][i]  *  jacobian[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	Sum  +=  jTj[0][i]  *  jacobian[0][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    Sum    +=    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  Sum	19	None	replace
420	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jacobian[k][j];  Sum  +=  jTj[k][i]  *  jacobian[k][j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jacobian[k][j];  Sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jacobian[k][j];  Sum  +=  jTj[k][i]  *  jacobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    Sum    +=    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	19	None	replace
421	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	56	None	replace
422	[BUG]  [BUGGY]  sum  +=  rows[i]  /  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i]  /  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i]  /  jTj[k][j];	  sum    +=    rows[i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	26	None	replace
423	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  4];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  4];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  4];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	87	None	replace
424	[BUG]  [BUGGY]  sum  +=  rows[i]  *  jtj[k][j];  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i]  *  jtj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i]  *  jtj[k][j];	  sum    +=    rows[k][i]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	99	None	replace
425	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[i][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jTj[i][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[i][i];	  sum    +=    jTj[i]    *    jtj[j][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	105	None	replace
426	[BUG]  [BUGGY]  sum  +=  jtj[i]  *  jTj[i];  [CE]  cannot  find  symbol  jtj  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jtj[i]  *  jTj[i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jtj[i]  *  jTj[i];	  sum    +=    jTj[i]    *    jtj[j][i];    	non-compiled	[CE]  cannot  find  symbol  jtj	105	None	replace
427	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	110	None	replace
428	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols  /  cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols  /  cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols  /  cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	110	None	replace
429	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	23	None	replace
430	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][3];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][3];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][3];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    cols[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	40	None	replace
431	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jacobian[k][i];  [CE]  illegal  start  of  expression  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols  *  jacobian[k][i];	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
432	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jacobian[k][i];  [CE]  illegal  start  of  expression  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols  *  jacobian[k][i];	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
433	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  rows[i][j];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  rows[i][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  rows[i][j];	  sum    +=    jTj[i]    *    rows[k][j];    	non-compiled	[CE]  array  required,  but  int  found	68	None	replace
434	[BUG]  [BUGGY]  sum  +=  rows[i]  *  jTj[j];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i]  *  jTj[j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i]  *  jTj[j];	  sum    +=    jTj[i]    *    rows[k][j];    	non-compiled	[CE]  array  required,  but  int  found	68	None	replace
435	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  jTj[k][i]  *  jacobian[0][j];  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  jTj[k][i]  *  jacobian[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jacobian[0][j];  jTj[k][i]  *  jacobian[0][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  not  a  statement	20	None	replace
436	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[1][j];  jTj[0][i]  *  jacobian[1][j];  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[1][j];  jTj[0][i]  *  jacobian[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jacobian[1][j];  jTj[0][i]  *  jacobian[1][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  not  a  statement	20	None	replace
437	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj!=  ';'  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj!=  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj!=  ';'	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	8	None	replace
438	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	74	None	replace
439	[BUG]  [BUGGY]  sum  +=  rows[i][j]  *  jcobian[k][j];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i][j]  *  jcobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i][j]  *  jcobian[k][j];	  sum    +=    cols[i][j]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	108	None	replace
440	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[i][j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jTj[i][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[i][j];	  sum    +=    jTj[i]    *    rows[k][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	68	None	replace
441	[BUG]  [BUGGY]  sum  +=  rows[i]  /  jacobian[k][j];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i]  /  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i]  /  jacobian[k][j];	  sum    +=    cols[i]    /    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	44	None	replace
442	[BUG]  [BUGGY]  sum  +=  jTj[i]  /  jacobian[k][j];  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  /  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  /  jacobian[k][j];	  sum    +=    cols[i]    /    jacobian[k][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	44	None	replace
443	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue();  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols].doubleValue();	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	6	None	replace
444	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }	  double[][]    row    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    row[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	110	None	replace
445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  k  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  k  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
446	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  k  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  k  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  k  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  cols  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  cols  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
448	[BUG]  [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  cols  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];  sum  +=  cols  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        rows        *        jacobian[k][i];        sum    +=    rows    *    jacobian[k][i];    sum  +=  cols  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
449	[BUG]  [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  Jcobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [CE]  cannot  find  symbol  Jcobian  [FE]    AssertionFailedError    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  Jcobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum        +=        jTj[k][i]        *        jacobian[k][j];        sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  Jcobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];	  	non-compiled	[CE]  cannot  find  symbol  Jcobian	17	None	add
450	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  cols;  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  cols;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  cols;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jacobian[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	62	None	replace
451	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jacobian[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	62	None	replace
452	[BUG]  [BUGGY]  sum  +=  jTj  *  rows  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    jTj    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	14	None	replace
453	[BUG]  [BUGGY]  sum  +=  rows  *  jTj,  jacobian[k][i];  [CE]  ';'  expected  [FE]              OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj,  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows  *  jTj,  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    jTj    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  ';'  expected	14	None	replace
454	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
455	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[cols][0];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	3	None	replace
456	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	85	None	replace
457	[BUG]  [BUGGY]  double[][]  jacobian  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jacobian  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jacobian  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	85	None	replace
458	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	106	None	replace
459	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
460	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  /  2];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	63	None	replace
461	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	69	None	replace
462	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  Sum  +=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]          OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  Sum  +=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows  *  jTj[k][i];  Sum  +=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	replace
463	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  columns[k][j];  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  columns[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  columns[k][j];	  sum    +=    rows[i]    *    jTj[k][j];    	non-compiled	[CE]  cannot  find  symbol  columns	26	None	replace
464	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  j  =  i;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	24	None	replace
465	[BUG]  [BUGGY]  sum  +=  rows[i][j]  *  jacobian[k][k];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i][j]  *  jacobian[k][k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i][j]  *  jacobian[k][k];	  sum    +=    cols[i][j]    *    jacobian[k][k];    	non-compiled	[CE]  array  required,  but  int  found	54	None	replace
466	[BUG]  [BUGGY]  sum  +=  rows[i][j]  *  jTj[k][k];  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i][j]  *  jTj[k][k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i][j]  *  jTj[k][k];	  sum    +=    cols[i][j]    *    jacobian[k][k];    	non-compiled	[CE]  array  required,  but  int  found	54	None	replace
467	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  rows  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  rows  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	57	None	replace
468	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    k    =    0;    k    <    cols;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	57	None	replace
469	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jF[j];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jF[j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jF[j];	  sum    +=    jTj[i]    *    jTj[j];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	30	None	replace
470	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++k)  {  sum  +=  jTj[0][i]  *  jacobian[0][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++k)  {  sum  +=  jTj[0][i]  *  jacobian[0][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[0][i]    *    jacobian[0][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++k)  {  sum  +=  jTj[0][i]  *  jacobian[0][j];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	46	None	add
471	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[0][i]  *  jacobian[0][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[0][i]  *  jacobian[0][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[0][i]    *    jacobian[0][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[0][i]  *  jacobian[0][j];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	46	None	add
472	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[0][i]  *  jacobian[0][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[0][i]  *  jacobian[0][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[0][i]    *    jacobian[0][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[0][i]  *  jacobian[0][j];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	46	None	add
473	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	9	None	replace
474	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	9	None	replace
475	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jSquare[0][j];  [CE]  cannot  find  symbol  jSquare  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[0][i]  *  jSquare[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jSquare[0][j];	  sum    +=    jTj[0][i]    *    jcobian[0][j];    	non-compiled	[CE]  cannot  find  symbol  jSquare	100	None	replace
476	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  Sum  -=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]        OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  Sum  -=  rows  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows  *  jTj[k][i];  Sum  -=  rows  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    Sum    -=    rows    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  Sum	66	None	replace
477	[BUG]  [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  sum  +=  cols  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  sum  +=  cols  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jacobian[k][i];  sum  +=  cols  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    +=    columns    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	16	None	replace
478	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  columns  *  jacobian[k][i];  [CE]  cannot  find  symbol  columns  [FE]                  OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  +=  columns  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows  *  jTj[k][i];  sum  +=  columns  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    sum    +=    columns    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  columns	16	None	replace
479	[BUG]  [BUGGY]  sum  +=  rows[i][i]  *  jcobian[k][j];  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i][i]  *  jcobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i][i]  *  jcobian[k][j];	  sum    +=    rows[k][i]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	99	None	replace
480	[BUG]  [BUGGY]  sum  +=  rows[k][i]  *  jtj[k][j];  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[k][i]  *  jtj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[k][i]  *  jtj[k][j];	  sum    +=    rows[k][i]    *    jcobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	99	None	replace
481	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jcobian[k][j];  [CE]  cannot  find  symbol  jcobian  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jcobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[k][i]  *  jcobian[k][j];	  sum    +=    rows[k][i]    *    jcobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jcobian	99	None	replace
482	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    cols);    }    	non-compiled	[CE]  incompatible  types	58	None	replace
483	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    cols);    }    	non-compiled	[CE]  incompatible  types	58	None	replace
484	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj.cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    cols);    }    	non-compiled	[CE]  incompatible  types	58	None	replace
485	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	22	None	replace
486	[BUG]  [BUGGY]  double[][]  jacobian  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jacobian  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jacobian  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	22	None	replace
487	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols[i]  *  jTj[i];  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  cols[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  incompatible  types	84	None	replace
488	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.getValue();    }    	non-compiled	[CE]  incompatible  types	2	None	replace
489	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.getValue();    }    	non-compiled	[CE]  incompatible  types	2	None	replace
490	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jacobian[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jacobian[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	35	None	add
491	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jacobian[k][i];  [CE]  illegal  start  of  expression  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jacobian[k][i];	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
492	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
493	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
494	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jacobian[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jacobian[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jacobian[i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	39	None	replace
495	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jcobian[k][i];  [CE]  cannot  find  symbol  jcobian  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jcobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj.length  *  jcobian[k][i];	  sum    +=    jTj.length    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  jcobian	38	None	replace
496	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	97	None	replace
497	[BUG]  [BUGGY]  sum  +=  row  *  jTj[k][i];  [CE]  cannot  find  symbol  row  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  row  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  row  *  jTj[k][i];	  sum    +=    cols    *    jTj[k][i];    	non-compiled	[CE]  cannot  find  symbol  row	34	None	replace
498	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  cols[j][j];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  cols[j][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  cols[j][j];	  sum    +=    cols[j][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	53	None	replace
499	[BUG]  [BUGGY]  sum  +=  jTj[j][i]  *  cols[j][j];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[j][i]  *  cols[j][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[j][i]  *  cols[j][j];	  sum    +=    cols[j][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	53	None	replace
500	[BUG]  [BUGGY]  sum  +=  rows[j][i]  *  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[j][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[j][i]  *  jTj[k][j];	  sum    +=    cols[j][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	53	None	replace
501	[BUG]  [BUGGY]  sum  +=  cols[j][i]  *  jTj[j][i];  [CE]  array  required,  but  int  found  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols[j][i]  *  jTj[j][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[j][i]  *  jTj[j][i];	  sum    +=    cols[j][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	53	None	replace
502	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jTj[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jTj[k][i];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jTj[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jTj[k][i];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	33	None	add
503	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jTj[k][i];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  cols  *  jTj[k][i];  double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    cols    *    jTj[k][i];    double[][]  jTj  =  new  double[cols][jTj.length];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols  *  jTj[k][i];	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
504	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][jTj.length];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	double[][]  row  =  new  double[cols][jTj.length];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	92	1	replace
505	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][jTj.length];  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  row  =  new  double[cols][jTj.length];  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][jTj.length];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	92	1	replace
506	[BUG]  [BUGGY]  sum  +=  rows[i][i]  *  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i][i]  *  jTj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i][i]  *  jTj[k][j];	  sum    +=    cols[i][i]    *    jTj[k][j];    	non-compiled	[CE]  array  required,  but  int  found	52	None	replace
507	[BUG]  [BUGGY]  sum  +=  rows[i]  *  cols[k][j];  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i]  *  cols[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i]  *  cols[k][j];	  sum    +=    jTj[i]    *    cols[k][j];    	non-compiled	[CE]  array  required,  but  int  found	45	None	replace
508	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  cols[i][j];  [CE]  array  required,  but  int  found  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  cols[i][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  cols[i][j];	  sum    +=    jTj[i]    *    cols[k][j];    	non-compiled	[CE]  array  required,  but  int  found	45	None	replace
509	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    cols[i];    }    	non-compiled	[CE]  incompatible  types	55	None	replace
510	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    cols[i];    }    	non-compiled	[CE]  incompatible  types	55	None	replace
511	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    cols[i];    }    	non-compiled	[CE]  incompatible  types	55	None	replace
512	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	88	None	replace
513	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  jSquare[k][j];  [CE]  cannot  find  symbol  jSquare  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jSquare[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  jSquare[k][j];	  sum    +=    jTj[i][i]    *    jcobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jSquare	50	None	replace
514	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  ==  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  ==  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  ==  ';'	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >>    ';'    	non-compiled	[CE]  ';'  expected	7	None	replace
515	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  rows  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  rows  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[cols][0];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	89	None	replace
516	[BUG]  [BUGGY]  double[][]  jacobianTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jacobianTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jacobianTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[cols][0];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	89	None	replace
517	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  [Delete]  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  [Delete]  ';'  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  [Delete]  ';'	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    >=    ';'    	non-compiled	[CE]  ';'  expected	10	None	replace
518	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  jTj[j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i][i]  *  jTj[j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  jTj[j];	  sum    +=    jTj[k][i]    *    jTj[k][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	49	None	replace
519	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double  sum  +=  jTj.length  *  jacobian[k][i];  [CE]  ';'  expected  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double  sum  +=  jTj.length  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj.length    *    jacobian[k][i];    double  sum  +=  jTj.length  *  jacobian[k][i];	  	non-compiled	[CE]  ';'  expected	37	None	add
520	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double  jTj  =  jTj.length  *  jacobian[k][i];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  double  jTj  =  jTj.length  *  jacobian[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj.length    *    jacobian[k][i];    double  jTj  =  jTj.length  *  jacobian[k][i];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	37	None	add
521	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.getValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jTj.getValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	1	None	replace
522	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jcobian[k][j];  jTj[k][i]  *  jcobian[k][j];  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jcobian[k][j];  jTj[k][i]  *  jcobian[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[k][i]  *  jcobian[k][j];  jTj[k][i]  *  jcobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  not  a  statement	20	None	replace
523	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[rows][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jTj[rows][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[rows][i];	  sum    +=    jTj[i]    *    jTj[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	82	None	replace
524	[BUG]  [BUGGY]  sum  +=  rows[0][i]  *  jTj[0][j];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[0][i]  *  jTj[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[0][i]  *  jTj[0][j];	  sum    +=    cols[0][i]    *    jTj[0][j];    	non-compiled	[CE]  array  required,  but  int  found	90	None	replace
525	[BUG]  [BUGGY]  sum  +=  jTj  *  jCoords[k][i];  [CE]  cannot  find  symbol  jCoords  [FE]        OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jCoords[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jCoords[k][i];	  sum    +=    jTj    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  jCoords	32	None	replace
526	[BUG]  [BUGGY]  sum  +=  jTj  *  jcobian[i][j];  [CE]  cannot  find  symbol  jcobian  [FE]          OptimizationException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj  *  jcobian[i][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jcobian[i][j];	  sum    +=    jTj    *    jacobian[k][i];    	non-compiled	[CE]  cannot  find  symbol  jcobian	32	None	replace
527	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    cols[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	40	None	replace
528	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    cols[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	40	None	replace
529	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    cols[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	40	None	replace
530	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][jTj.cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    cols[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	40	None	replace
531	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    cols[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	61	None	replace
532	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][i];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][i];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][i];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    cols[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	61	None	replace
533	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jF[1][j];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[i]  *  jF[1][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jF[1][j];	  sum    +=    jTj[i]    *    jF[k][j];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	81	None	replace
534	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	109	None	replace
535	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  Jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  Jacobian[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  Jacobian[k][j];  }	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	70	None	replace
536	[BUG]  [BUGGY]  sum  +=  rows[i][i]  *  jtj[k][j];  [CE]  array  required,  but  int  found  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[i][i]  *  jtj[k][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i][i]  *  jtj[k][j];	  sum    +=    rows[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	98	None	replace
537	[BUG]  [BUGGY]  double[][]  jacobian  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jacobian  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jacobian  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	96	None	replace
538	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  -=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    rows    *    jTj[k][i];    sum  -=  rows  *  jTj[k][i];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	1	add
539	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  -=  rows  *  jTj[k][i];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows  *  jTj[k][i];  sum  -=  rows  *  jTj[k][i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jTj[k][i];    sum  -=  rows  *  jTj[k][i];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	1	add
540	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jTj[k][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	48	None	add
541	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jTj[k][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	48	None	add
542	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jTj[k][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jTj[k][j];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	48	None	add
543	[BUG]  [BUGGY]  sum  +=  rows[0][i]  *  jcobian[0][j];  [CE]  array  required,  but  int  found  [FE]    OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[0][i]  *  jcobian[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[0][i]  *  jcobian[0][j];	  sum    +=    jTj[0][i]    *    jacobian[0][j];    	non-compiled	[CE]  array  required,  but  int  found	47	None	replace
544	[BUG]  [BUGGY]  sum  +=  rows[0][i]  *  jacobian[0][j];  [CE]  array  required,  but  int  found  [FE]      OptimizationException    [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  sum  +=  rows[0][i]  *  jacobian[0][j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[0][i]  *  jacobian[0][j];	  sum    +=    jTj[0][i]    *    jacobian[0][j];    	non-compiled	[CE]  array  required,  but  int  found	47	None	replace
545	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	23	None	replace
546	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[	  sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jTj[k][i]    *    jacobian[k][j];    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
