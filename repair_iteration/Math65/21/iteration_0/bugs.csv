bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
41	[BUG] [BUGGY] sum += jacobian[k][i] * jacobian[k][j]; [FE] AssertionFailedError [CONTEXT]  updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { [BUGGY] sum += jacobian[k][i] * jacobian[k][j]; [BUGGY] } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { [BUGGY] [BUGGY] sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	
