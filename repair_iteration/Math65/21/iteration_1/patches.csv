bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	17	None	replace
2	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.getValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  incompatible  types	17	None	replace
3	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	17	None	replace
4	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][j];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][j];  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][j];	      double[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	5	None	replace
5	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][k];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][k];  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][k];	      double[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	5	None	replace
6	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  cols  =  new  double[rows][cols];  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[rows][cols];	      double[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	5	None	replace
7	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    	non-compiled	[CE]  ';'  expected	18	None	replace
8	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    	non-compiled	[CE]  ';'  expected	18	None	replace
9	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >>  ';'	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    	non-compiled	[CE]  ';'  expected	18	None	replace
10	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >=  ';'  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >=  ';'  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  >=  ';'	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    	non-compiled	[CE]  ';'  expected	18	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
12	[BUG]  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	2	add
13	[BUG]  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jacobian[k][i];  Sum  +=  rows  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jacobian[k][i];    Sum  +=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	11	None	add
14	[BUG]  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jacobian[k][i];  jTj  +=  rows  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jacobian[k][i];    jTj  +=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	11	None	add
15	[BUG]  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jcobian[k][i];  [CE]  cannot  find  symbol  jcobian  [FE]          OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jacobian[k][i];  sum  +=  rows  *  jcobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jacobian[k][i];    sum  +=  rows  *  jcobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  jcobian	11	None	add
16	[BUG]  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  sum  +=  columns  *  jacobian[k][i];  [CE]  cannot  find  symbol  columns  [FE]            OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jacobian[k][i];  sum  +=  columns  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jacobian[k][i];    sum  +=  columns  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  columns	11	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];	  	compilable	  [FE]  AssertionFailedError  	7	2	add
18	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[k][j];	  	compilable	  [FE]  AssertionFailedError  	7	2	add
19	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  Sum  +=  jTj[k][i]  *  jacobian[k][j];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  Sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jacobian[k][j];    Sum  +=  jTj[k][i]  *  jacobian[k][j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	7	None	add
20	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  jTj[k][i]  *  jacobian[k][j];  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  jTj[k][i]  *  jacobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jacobian[k][j];    jTj[k][i]  *  jacobian[k][j];	  	non-compiled	[CE]  not  a  statement	7	None	add
21	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[ki][j];  [CE]  cannot  find  symbol  ki  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  sum  +=  jTj[k][i]  *  jacobian[ki][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jacobian[k][j];    sum  +=  jTj[k][i]  *  jacobian[ki][j];	  	non-compiled	[CE]  cannot  find  symbol  ki	7	None	add
22	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	16	None	replace
23	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jTj.doubleValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	16	None	replace
24	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	16	None	replace
25	[BUG]  [BUGGY]  sum  +=  cols[i]  *  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols[i]  *  jTj[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  *  jTj[k][j];	  sum    +=    rows[i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	15	None	replace
26	[BUG]  [BUGGY]  sum  +=  rows[i]  *  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows[i]  *  jTj[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i]  *  jTj[k][j];	  sum    +=    rows[i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	15	None	replace
27	[BUG]  [BUGGY]  sum  +=  cols[i]  *  jtj[k][j];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols[i]  *  jtj[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  *  jtj[k][j];	  sum    +=    rows[i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	15	None	replace
28	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[k][j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jTj[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[k][j];	  sum    +=    jTj[i]    *    jacobian[k][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	9	None	replace
29	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jtj[k][j];  [CE]  cannot  find  symbol  jtj  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jtj[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jtj[k][j];	  sum    +=    jTj[i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jtj	9	None	replace
30	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jTj[j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[j];	  sum    +=    jTj[i]    *    jacobian[k][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	9	None	replace
31	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[j][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jTj[j][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[j][i];	  sum    +=    jTj[i]    *    jacobian[k][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	9	None	replace
32	[BUG]  [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	12	None	replace
33	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols  *  jTj[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  cols  *  jTj[k][i];	  sum    +=    rows    *    jacobian[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
34	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[k][i];  [FE]  ArrayIndexOutOfBoundsException  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols  *  jTj[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols  *  jTj[k][i];	  sum    +=    rows    *    jacobian[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
35	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]        OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  cols  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    	compilable	  [FE]  OptimizationException  	12	1	replace
36	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k][i];  [FE]  OptimizationException  [FE]        OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    	compilable	  [FE]  OptimizationException  	12	1	replace
37	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]          OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj.length  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    	compilable	  [FE]  OptimizationException  	12	1	replace
38	[BUG]  [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  [FE]  OptimizationException  [FE]          OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj.length  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj.length  *  jacobian[k][i];	  sum    +=    rows    *    jacobian[k][i];    	compilable	  [FE]  OptimizationException  	12	1	replace
39	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	4	None	replace
40	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jF[i];  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  incompatible  types	4	None	replace
41	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	4	None	replace
42	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	3	None	replace
43	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
44	[BUG]  [BUGGY]  sum  +=  cols[i]  /  jacobian[k][j];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols[i]  /  jacobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  /  jacobian[k][j];	  sum    +=    cols[i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	10	None	replace
45	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  cols[k][j];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  cols[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  cols[k][j];	  sum    +=    cols[i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	10	None	replace
46	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[0][i]  *  jacobian[0][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    	compilable	  [FE]  OptimizationException  	8	1	replace
47	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  [FE]  OptimizationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[0][i]  *  jacobian[0][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jacobian[0][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    	compilable	  [FE]  OptimizationException  	8	1	replace
48	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[k][i]  *  jTj[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
49	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jTj[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[k][i]  *  jTj[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
50	[BUG]  [BUGGY]  sum  +=  jTj[i][i]  *  jcobian[k][j];  [CE]  cannot  find  symbol  jcobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i][i]  *  jcobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i][i]  *  jcobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jcobian	8	None	replace
51	[BUG]  [BUGGY]  sum  +=  cols[k][i]  *  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols[k][i]  *  jTj[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[k][i]  *  jTj[k][j];	  sum    +=    cols[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
52	[BUG]  [BUGGY]  sum  +=  cols[i][i]  *  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols[i][i]  *  jTj[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][i]  *  jTj[k][j];	  sum    +=    cols[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
53	[BUG]  [BUGGY]  sum  +=  cols[j][i]  *  jTj[k][j];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols[j][i]  *  jTj[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[j][i]  *  jTj[k][j];	  sum    +=    cols[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
54	[BUG]  [BUGGY]  sum  +=  cols[i][j]  *  jacobian[k][k];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols[i][j]  *  jacobian[k][k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][j]  *  jacobian[k][k];	  sum    +=    cols[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
55	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  incompatible  types	2	None	replace
56	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	2	None	replace
57	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	14	None	replace
58	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  cols);  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	14	None	replace
59	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	14	None	replace
60	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  k  =  0;  k  <  cols;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	13	None	replace
61	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  cols[i]  *  jTj;  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	13	None	replace
62	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	13	None	replace
63	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  cols  =  new  double[cols][cols];  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];	      double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	1	None	replace
64	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	13	None	replace
65	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	13	None	replace
66	[BUG]  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];  [CE]  cannot  find  symbol  Sum  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jacobian[k][i];  Sum  -=  rows  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jacobian[k][i];    Sum  -=  rows  *  jacobian[k][i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	11	None	add
67	[BUG]  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jacobian[k][i];  double[][]  jTj  =  new  double[cols][cols];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jacobian[k][i];    double[][]  jTj  =  new  double[cols][cols];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	11	None	add
68	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  rows[k][j];  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  rows[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  rows[k][j];	  sum    +=    rows[i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	15	None	replace
69	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	17	None	replace
70	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	7	None	add
71	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	7	None	add
72	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
73	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	16	None	replace
74	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	16	None	replace
75	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jcobian[k][j];  [CE]  cannot  find  symbol  jcobian  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jcobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jcobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jcobian	8	None	replace
76	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj    	non-compiled	[CE]  ';'  expected	18	None	replace
77	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][0];  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];	      double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	1	None	replace
78	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][i];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][i];  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][i];	      double[][]    jTj    =    new    double[cols][cols];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	1	None	replace
79	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jTj[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  rows  *  jTj[k][i];	  sum    +=    rows    *    jacobian[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
80	[BUG]  [BUGGY]  sum  +=  rows  *  jTj[k][i];  [FE]  ArrayIndexOutOfBoundsException  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jTj[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows  *  jTj[k][i];	  sum    +=    rows    *    jacobian[k][i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
81	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jF[k][j];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jF[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jF[k][j];	  sum    +=    jTj[i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	9	None	replace
82	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jTj[k][i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jTj[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jTj[k][i];	  sum    +=    jTj[i]    *    jacobian[k][j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	9	None	replace
83	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jtj[k][i];  [CE]  cannot  find  symbol  jtj  [FE]                AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jtj[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jtj[k][i];	  sum    +=    jTj[i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jtj	9	None	replace
84	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	2	None	replace
85	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	4	None	replace
86	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
87	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	14	None	replace
88	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  incompatible  types	14	None	replace
89	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	14	None	replace
90	[BUG]  [BUGGY]  sum  +=  cols[0][i]  *  jTj[0][j];  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols[0][i]  *  jTj[0][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[0][i]  *  jTj[0][j];	  sum    +=    cols[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
91	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  row  =  new  double[cols][cols];  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	double[][]  row  =  new  double[cols][cols];	      double[][]    jTj    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	1	1	replace
92	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  [FE]  OptimizationException  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  row  =  new  double[cols][cols];  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols];	      double[][]    jTj    =    new    double[cols][cols];    	compilable	  [FE]  OptimizationException  	1	1	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	1	add
94	[BUG]  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows  *  jacobian[k][i];  sum  -=  rows  *  jacobian[k][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    rows    *    jacobian[k][i];    sum  -=  rows  *  jacobian[k][i];	  	compilable	  [FE]  AssertionFailedError  	11	1	add
95	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  rows  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  rows  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	14	None	replace
96	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	14	None	replace
97	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jF[i];  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jF[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	4	None	replace
98	[BUG]  [BUGGY]  sum  +=  rows[k][i]  *  jacobian[k][j];  [CE]  array  required,  but  int  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows[k][i]  *  jacobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[k][i]  *  jacobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	8	None	replace
99	[BUG]  [BUGGY]  sum  +=  rows[k][i]  *  jcobian[k][j];  [CE]  array  required,  but  int  found  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  rows[k][i]  *  jcobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[k][i]  *  jcobian[k][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	8	None	replace
100	[BUG]  [BUGGY]  sum  +=  jTj[0][i]  *  jcobian[0][j];  [CE]  cannot  find  symbol  jcobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[0][i]  *  jcobian[0][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[0][i]  *  jcobian[0][j];	  sum    +=    jTj[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jcobian	8	None	replace
101	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.doubleValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	16	None	replace
102	[BUG]  [BUGGY]  double[][]  jacobian  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  k  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jacobian  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jacobian  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[i]  *  jTj;  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    k    =    0;    k    <    rows;    ++k)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  getCovariances()	13	None	replace
103	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jcobian[j][i];  [CE]  cannot  find  symbol  jcobian  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jcobian[j][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jcobian[j][i];	  sum    +=    jTj[i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jcobian	9	None	replace
104	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jCoords[k][j];  [CE]  cannot  find  symbol  jCoords  [FE]              AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jCoords[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jCoords[k][j];	  sum    +=    jTj[i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jCoords	9	None	replace
105	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jtj[j][i];  [CE]  cannot  find  symbol  jtj  [FE]                AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[i]  *  jtj[j][i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jtj[j][i];	  sum    +=    jTj[i]    *    jacobian[k][j];    	non-compiled	[CE]  cannot  find  symbol  jtj	9	None	replace
106	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	7	None	add
107	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum    +=    jTj[k][i]    *    jacobian[k][j];    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[k][i]  *  jacobian[k][j];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	7	None	add
108	[BUG]  [BUGGY]  sum  +=  cols[i][j]  *  jcobian[k][j];  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  sum  +=  cols[i][j]  *  jcobian[k][j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i][j]  *  jcobian[k][j];	  sum    +=    cols[k][i]    *    jacobian[k][j];    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
109	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	2	None	replace
110	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {    [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }  [BUGGY]    sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	double[][]  row  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  row[i]  *  jTj.getValue();  }	      double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jTj.getValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	17	None	replace
