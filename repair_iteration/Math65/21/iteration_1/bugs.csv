bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  [BUGGY]  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	    double[][]  jTj  =  new  double[cols][cols];		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	add
2	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	add
3	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  [BUGGY]  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];		non-compiled	[CE]  illegal  start  of  expression	42	None	add
4	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }  [BUGGY]  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	    double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jF[i];  }		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	add
5	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  [BUGGY]  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	    double[][]  jTj  =  new  double[rows][cols];		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	add
6	[BUG]  [BUGGY]  sum  +=  cols[k][i]  *  jacobian[k][j];  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]  sum  +=  cols[k][i]  *  jacobian[k][j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[k][i]  *  jacobian[k][j];	sum  +=  jacobian[k][i]  *  jacobian[k][j];  	non-compiled	[CE]  array  required,  but  int  found	41	None	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  jTj[k][i]  *  jacobian[k][j];	sum  +=  jacobian[k][i]  *  jacobian[k][j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	replace
8	[BUG]  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]  sum  +=  jTj[k][i]  *  jacobian[k][j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[k][i]  *  jacobian[k][j];	sum  +=  jacobian[k][i]  *  jacobian[k][j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	replace
9	[BUG]  [BUGGY]  sum  +=  jTj[i]  *  jacobian[k][j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]  sum  +=  jTj[i]  *  jacobian[k][j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  jTj[i]  *  jacobian[k][j];	sum  +=  jacobian[k][i]  *  jacobian[k][j];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	41	None	replace
10	[BUG]  [BUGGY]  sum  +=  cols[i]  *  jacobian[k][j];  [CE]  array  required,  but  int  found  [FE]          AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]  sum  +=  cols[i]  *  jacobian[k][j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  cols[i]  *  jacobian[k][j];	sum  +=  jacobian[k][i]  *  jacobian[k][j];  	non-compiled	[CE]  array  required,  but  int  found	41	None	replace
11	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	sum  +=  rows  *  jacobian[k][i];	sum  +=  jacobian[k][i]  *  jacobian[k][j];  	compilable	  [FE]  OptimizationException  	41	1	replace
12	[BUG]  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  [FE]  OptimizationException  [FE]    AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]  sum  +=  rows  *  jacobian[k][i];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows  *  jacobian[k][i];	sum  +=  jacobian[k][i]  *  jacobian[k][j];  	compilable	  [FE]  OptimizationException  	41	1	replace
13	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jTj[i]  *  jTj;  }		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	add
14	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	    double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  Math.pow(10,  jTj);  }		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	add
15	[BUG]  [BUGGY]  sum  +=  rows[i]  *  jacobian[k][j];  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]  sum  +=  rows[i]  *  jacobian[k][j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	sum  +=  rows[i]  *  jacobian[k][j];	sum  +=  jacobian[k][i]  *  jacobian[k][j];  	non-compiled	[CE]  array  required,  but  int  found	41	None	replace
16	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }  [BUGGY]  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.doubleValue();  }		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	add
17	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }  [BUGGY]  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj.getValue();  }		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	42	None	add
18	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]    updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  [BUGGY]    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj  [BUGGY]  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	    double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jTj		non-compiled	[CE]  ';'  expected	42	None	add
