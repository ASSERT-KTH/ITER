bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    for(int  j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
2	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  For(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  For(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    For(int  j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
3	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  int  j  =  0;  j  <  cols;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    int  j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  >  expected	1	None	add
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    if(jTj[i][i]    <    =    0)    {    return    new    double[cols][i];    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
5	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	For(int  i  =  0;  i  <  cols;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    if(jTj[i][i]    <    =    0)    {    return    new    double[cols][i];    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    if(jTj[i][i]    <    =    0)    {    return    new    double[cols][i];    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	add	for(int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    i;    j    <    rows;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
8	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    i;    j    <    rows;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  2;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	add	for(int  j  =  i;  j  <  2;  ++j)  {	  for(int    j    =    i;    j    <    rows;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
10	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  2;  ++j)  {  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  2;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  j  =  i;  j  <  2;  ++j)  {	  for(int    j    =    i;    j    <    rows;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
11	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  0;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	add	for(int  j  =  i;  j  <  0;  ++j)  {	  for(int    j    =    i;    j    <    rows;    ++j)    {    	compilable	  [FE]  OptimizationException  	4	1	replace
12	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  0;  ++j)  {  [FE]  OptimizationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  0;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  j  =  i;  j  <  0;  ++j)  {	  for(int    j    =    i;    j    <    rows;    ++j)    {    	compilable	  [FE]  OptimizationException  	4	1	replace
13	[BUG]  [BUGGY]  int  rows  =  jTj.length  -  cols;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  jTj.length  -  cols;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  jTj.length  -  cols;	      int    rows    =    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
14	[BUG]  [BUGGY]  int  rows  =  jTj.length  -  1;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  jTj.length  -  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  jTj.length  -  1;	      int    rows    =    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
15	[BUG]  [BUGGY]  int  rows  =  jTj.length  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  jTj.length  -  2;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  jTj.length  -  2;	      int    rows    =    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
16	[BUG]  [BUGGY]  int  rows  =  cols.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  cols.length;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  cols.length;	      int    rows    =    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
17	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][i].doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  cols  =  new  double[cols][i].doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  cols  =  new  double[cols][i].doubleValue();	      double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
18	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][i].doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][i].doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  jTj  =  new  double[rows][i].doubleValue();	      double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][i].doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][i].doubleValue()  +  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  jTj  =  new  double[cols][i].doubleValue()  +  1;	      double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  double[][]  rows  =  jTj.getCols();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  jTj.getCols();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  jTj.getCols();	      double[][]    rows    =    jTj.getRows();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  double[][]  rows  =  cols.getRows();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  cols.getRows();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  cols.getRows();	      double[][]    rows    =    jTj.getRows();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  double[][]  rows  =  jTjF.getRows();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  jTjF.getRows();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  jTjF.getRows();	      double[][]    rows    =    jTj.getRows();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  for(int  j  =  i;  j  <  rows;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  for(int  j  =  i;  j  <  rows;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    i;    j    <    rows;    ++j)    {    for(int  j  =  i;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
24	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  For(int  j  =  i;  j  <  rows;  ++j)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  For(int  j  =  i;  j  <  rows;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    i;    j    <    rows;    ++j)    {    For(int  j  =  i;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
25	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  int  j  =  i;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  int  j  =  i;  j  <  rows;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    i;    j    <    rows;    ++j)    {    int  j  =  i;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  >  expected	3	None	add
26	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  for(int  j  =  i;  j  <  columns;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  for(int  j  =  i;  j  <  columns;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    i;    j    <    rows;    ++j)    {    for(int  j  =  i;  j  <  columns;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
27	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  for(int  j  =  i;  j  <  rows);  ++j)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  for(int  j  =  i;  j  <  rows);  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    i;    j    <    rows;    ++j)    {    for(int  j  =  i;  j  <  rows);  ++j)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i];  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i];  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  jTj[i][i]  =  jTj[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  jTj[i][i]  =  jTj[i];  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  jTj[i][i]  =  jTj[i];  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
30	[BUG]  [BUGGY]  jTj[i][i]  =  jTj[i];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  jTj[i][i]  =  jTj[i];  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	jTj[i][i]  =  jTj[i];	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i].doubleValue();  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i].doubleValue();  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i].doubleValue();  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  jTj[i][i]  =  jTj[i].doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  jTj[i][i]  =  jTj[i].doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	jTj[i][i]  =  jTj[i].doubleValue();	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jaco  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jaco  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jaco	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    jacobian[    	non-compiled	[CE]  ';'  expected	10	None	replace
34	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jacobian[  [CE]  '.class'  expected  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jacobian[  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jacobian[	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    jacobian[    	non-compiled	[CE]  '.class'  expected	10	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  [CE]  '.class'  expected  [FE]                    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    jacobian[    	non-compiled	[CE]  '.class'  expected	10	None	replace
36	[BUG]  [BUGGY]  double  rows[][]  =  jTj.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double  rows[][]  =  jTj.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double  rows[][]  =  jTj.doubleValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  int  rows  =  cols.size();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  cols.size();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  cols.size();	      int    rows    =    jTj.size();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
38	[BUG]  [BUGGY]  int  rows  =  jTj.length();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  jTj.length();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  jTj.length();	      int    rows    =    jTj.size();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
39	[BUG]  [BUGGY]  double[][]  rows  =  cols.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  cols.doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  cols.doubleValue();	      double[][]    rows    =    jTj.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
40	[BUG]  [BUGGY]  double[][]  rows  =  jtj.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  jtj.doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  jtj.doubleValue();	      double[][]    rows    =    jTj.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  i.doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  jTj,  i.doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  jTj,  i.doubleValue();	      double[][]    rows    =    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	13	None	replace
42	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  getRowCount()  -  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  getRowCount()  -  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  getRowCount()  +  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  getRowCount()  +  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
44	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  cols;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  getRowCount()  -  cols;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  getRowCount()  -  cols;	      int    rows    =    getRowCount();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
45	[BUG]  [BUGGY]  int  rows  =  getRowCount(i);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  getRowCount(i);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  getRowCount(i);	      int    rows    =    getRowCount();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
46	[BUG]  [BUGGY]      int  rows  =  jTj.length;  int  rows  =  jTj.length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]      int  rows  =  jTj.length;  int  rows  =  jTj.length;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	        int    rows    =    jTj.length;    int  rows  =  jTj.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	21	None	add
47	[BUG]  [BUGGY]      int  rows  =  jTj.length;  Int  rows  =  jTj.length;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]      int  rows  =  jTj.length;  Int  rows  =  jTj.length;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	        int    rows    =    jTj.length;    Int  rows  =  jTj.length;	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
48	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	For(int  j  =  0;  j  <  rows;  ++j)  {	  For(int    j    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  '.class'  expected	16	None	replace
49	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  columns;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  For(int  j  =  0;  j  <  columns;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	For(int  j  =  0;  j  <  columns;  ++j)  {	  For(int    j    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  '.class'  expected	16	None	replace
50	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][i];  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  cols  =  new  double[cols][i];  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  cols  =  new  double[cols][i];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
51	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][i];  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][i];  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  jTj  =  new  double[rows][i];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
52	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][i];  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  new  double[cols][i];  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  new  double[cols][i];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
53	[BUG]  [BUGGY]      int  rows  =  Math.min(cols,  jTj.length);  int  rows  =  Math.min(cols,  jTj.length);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]      int  rows  =  Math.min(cols,  jTj.length);  int  rows  =  Math.min(cols,  jTj.length);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	        int    rows    =    Math.min(cols,    jTj.length);    int  rows  =  Math.min(cols,  jTj.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	17	None	add
54	[BUG]  [BUGGY]      int  rows  =  Math.min(cols,  jTj.length);  Int  rows  =  Math.min(cols,  jTj.length);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]      int  rows  =  Math.min(cols,  jTj.length);  Int  rows  =  Math.min(cols,  jTj.length);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	        int    rows    =    Math.min(cols,    jTj.length);    Int  rows  =  Math.min(cols,  jTj.length);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
55	[BUG]  [BUGGY]      int  rows  =  Math.min(cols,  jTj.length);  int  rows  =  Math.max(cols,  jTj.length);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]      int  rows  =  Math.min(cols,  jTj.length);  int  rows  =  Math.max(cols,  jTj.length);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	        int    rows    =    Math.min(cols,    jTj.length);    int  rows  =  Math.max(cols,  jTj.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	17	None	add
56	[BUG]  [BUGGY]      int  rows  =  Math.min(cols,  jTj.length);  int  rows  =  Math.min(jTj,  jTj.length);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]      int  rows  =  Math.min(cols,  jTj.length);  int  rows  =  Math.min(jTj,  jTj.length);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	        int    rows    =    Math.min(cols,    jTj.length);    int  rows  =  Math.min(jTj,  jTj.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	17	None	add
57	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  cols.length);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  Math.min(jTj.length,  cols.length);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  Math.min(jTj.length,  cols.length);	      int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
58	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj,  cols.length);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  Math.min(jTj,  cols.length);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  Math.min(jTj,  cols.length);	      int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
59	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jTj[i].length);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  Math.min(cols,  jTj[i].length);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  Math.min(cols,  jTj[i].length);	      int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
60	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  Math.min(jTj.length,  cols);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  Math.min(jTj.length,  cols);	      int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
61	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  [CE]  cannot  find  symbol  columns  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  j  =  0;  j  <  columns;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  columns	2	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  this.cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	add	for(int  j  =  0;  j  <  this.cols;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
63	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.cols;  ++j)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  this.cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  j  =  0;  j  <  this.cols;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	8	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	8	None	replace
66	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  jTj  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	8	None	replace
67	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  cols  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  cols  =  new  double[cols][i];  for(int  i  =  0;  i  <  cols;  ++i)  {	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  incompatible  types	8	None	replace
68	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	For(int  i  =  0;  i  <  cols;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    rows[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  '.class'  expected	9	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    rows[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
70	[BUG]  [BUGGY]  rows[i][i]  =  jTj[i].doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  rows[i][i]  =  jTj[i].doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	rows[i][i]  =  jTj[i].doubleValue();	      for(int    i    =    0;    i    <    cols;    ++i)    {    rows[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][i]  =  new  double[cols][cols];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][i]  =  new  double[cols][cols];  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][i]  =  new  double[cols][cols];  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  jTj[i][i]  =  jTj[i].doubleValue();  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  jTj[i][i]  =  jTj[i].doubleValue();  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  jTj[i][i]  =  jTj[i].doubleValue();  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  i  =  0;  i  <  cols;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    rows[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  >  expected	9	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    rows[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
75	[BUG]  [BUGGY]  For(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  For(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	For(int  j  =  i;  j  <  cols;  ++j)  {	  For(int    j    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  '.class'  expected	16	None	replace
76	[BUG]  [BUGGY]  double[][]  rows  =  jTj.getColumns();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  jTj.getColumns();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  jTj.getColumns();	      double[][]    rows    =    jTj.getRows();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  int  rows  =  Math.min(i,  jTj.length);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  Math.min(i,  jTj.length);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  Math.min(i,  jTj.length);	      int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
78	[BUG]  [BUGGY]  double[][]  rows  =  i.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  i.doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  i.doubleValue();	      double[][]    rows    =    jTj.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
79	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  i;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  getRowCount()  +  i;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  getRowCount()  +  i;	      int    rows    =    getRowCount();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
80	[BUG]  [BUGGY]  int  rows  =  getColumnCount();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  getColumnCount();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  getColumnCount();	      int    rows    =    getRowCount();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
81	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	8	None	replace
82	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	8	None	replace
83	[BUG]  [BUGGY]  int  rows  =  jTj.length  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  jTj.length  +  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  jTj.length  +  1;	      int    rows    =    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
84	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  (int  j  =  0;  j  <  cols;  ++j)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    (int  j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
85	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  Integer  j  =  0;  j  <  cols;  ++j)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  Integer  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    Integer  j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  >  expected	1	None	add
86	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  for(int  i  =  i;  j  <  rows;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  for(int  i  =  i;  j  <  rows;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    i;    j    <    rows;    ++j)    {    for(int  i  =  i;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
87	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  (int  j  =  i;  j  <  rows;  ++j)  {  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  (int  j  =  i;  j  <  rows;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    i;    j    <    rows;    ++j)    {    (int  j  =  i;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jTj[i][i]  ==  0)  {  return  new  double[cols][i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jTj[i][i]  ==  0)  {  return  new  double[cols][i];  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(jTj[i][i]  ==  0)  {  return  new  double[cols][i];  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    if(jTj[i][i]    <    =    0)    {    return    new    double[cols][i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	15	None	replace
89	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double  rows  =  jTj.doubleValue();  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double  rows  =  jTj.doubleValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
90	[BUG]  [BUGGY]  int  rows  =  jTj.size()  +  i;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  jTj.size()  +  i;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  jTj.size()  +  i;	      int    rows    =    jTj.size();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
91	[BUG]  [BUGGY]  double  rows  =  Math.min(jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double  rows  =  Math.min(jTj.length,  cols);  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double  rows  =  Math.min(jTj.length,  cols);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
92	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][i].doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  new  double[cols][i].doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  new  double[cols][i].doubleValue();	      double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
93	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][i].doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  row  =  new  double[cols][i].doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  row  =  new  double[cols][i].doubleValue();	      double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jacobian[  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jacobian[  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jacobian[	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    jacobian[    	non-compiled	[CE]  '.class'  expected	10	None	replace
95	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jacobian[  [CE]  '.class'  expected  [FE]                  AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jacobian[  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  rows  +=  jacobian[	      for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][i];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows    +=    jacobian[    	non-compiled	[CE]  '.class'  expected	10	None	replace
96	[BUG]  [BUGGY]  int  rows  =  jTj.getRowCount();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  jTj.getRowCount();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  jTj.getRowCount();	      int    rows    =    jTj.size();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
97	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  i.getRows();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  rows  =  jTj,  i.getRows();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	double[][]  rows  =  jTj,  i.getRows();	      double[][]    rows    =    jTj.getRows();    	non-compiled	[CE]  ';'  expected	7	None	replace
98	[BUG]  [BUGGY]  if(jTj  ==  null)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  if(jTj  ==  null)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	if(jTj  ==  null)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jTj[i][i]  <  =  0)  {  return  new  double[cols][i];  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    if(jTj[i][i]    <    =    0)    {    return    new    double[cols][i];    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
99	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  j  =  0;  j  <  cols;  ++j)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  >  expected	1	None	add
100	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  1;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	add	for(int  j  =  i;  j  <  1;  ++j)  {	  for(int    j    =    i;    j    <    rows;    ++j)    {    	compilable	  [FE]  OptimizationException  	4	1	replace
101	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  1;  ++j)  {  [FE]  OptimizationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  i;  j  <  1;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  j  =  i;  j  <  1;  ++j)  {	  for(int    j    =    i;    j    <    rows;    ++j)    {    	compilable	  [FE]  OptimizationException  	4	1	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  rows[i][i]  =  jTj[i].doubleValue();  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    rows[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  rows[i][i]  =  new  double[jTj[i].doubleValue();  }  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  rows[i][i]  =  new  double[jTj[i].doubleValue();  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  rows[i][i]  =  new  double[jTj[i].doubleValue();  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    rows[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  ']'  expected	9	None	replace
104	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  Math.min(cols,  jTj.length  -  1);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  Math.min(cols,  jTj.length  -  1);	      int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
105	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj,  i.length);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  rows  =  Math.min(jTj,  i.length);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	int  rows  =  Math.min(jTj,  i.length);	      int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
106	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  [CE]  cannot  find  symbol  row  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	for(int  j  =  0;  j  <  row;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  row	2	None	replace
