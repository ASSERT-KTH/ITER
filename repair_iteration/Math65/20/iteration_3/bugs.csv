bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  rows  =  jTjF.getColumnCount();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTjF.getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTjF.getColumnCount();	  int    rows    =    jTjF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
2	[BUG]  [BUGGY]  int  rows  =  jTjF.getRowCount()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTjF.getRowCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTjF.getRowCount()  +  1;	  int    rows    =    jTjF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
3	[BUG]  [BUGGY]  int  rows  =  jTjF.getRowCount()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTjF.getRowCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTjF.getRowCount()  -  1;	  int    rows    =    jTjF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
4	[BUG]  [BUGGY]  Integer  k  =  0;  k  <  cols;  ++k)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  k  =  0;  k  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  k  =  0;  k  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    Integer    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  >  expected	56	None	replace
5	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    Integer    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  >  expected	56	None	replace
6	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++k)  {  Integer  k  =  0;  k  <  cols;  ++k)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++k)  {  Integer  k  =  0;  k  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  jTj.length;  ++k)  {  Integer  k  =  0;  k  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    Integer    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  >  expected	56	None	replace
7	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  i;  ++k)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  i;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  i;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    Integer    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  >  expected	56	None	replace
8	[BUG]  [BUGGY]  int  rows  =  jTj.length  -  sum;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.length  -  sum;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.length  -  sum;	  int    rows    =    jTj.length    -    cols;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
9	[BUG]  [BUGGY]  int  rows  =  cols.length  -  jTj.length;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.length  -  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.length  -  jTj.length;	  int    rows    =    jTj.length    -    cols;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
10	[BUG]  [BUGGY]  int  rows  =  cols.length  -  jTj;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.length  -  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.length  -  jTj;	  int    rows    =    jTj.length    -    cols;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
11	[BUG]  [BUGGY]  int  rows  =  cols  -  jTj.length;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols  -  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols  -  jTj.length;	  int    rows    =    jTj.length    -    cols;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
12	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  cols;  ++k)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	For(int  k  =  0;  k  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    for(int    k    =    0;    k    <    cols);    ++k)    {    	non-compiled	[CE]  '.class'  expected	76	None	replace
13	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  colls;  ++k)  {  [CE]  cannot  find  symbol  colls  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  colls;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  colls;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    for(int    k    =    0;    k    <    cols);    ++k)    {    	non-compiled	[CE]  cannot  find  symbol  colls	76	None	replace
14	[BUG]  [BUGGY]  int  rows  =  Math.max(cols,  jTj.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.max(cols,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.max(cols,  jTj.length);	          int    rows    =    Math.min(jTj.length,    cols);    int    rows    =    Math.max(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
15	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  this.jacobianEvaluations.length;  ++k)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  this.jacobianEvaluations.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  this.jacobianEvaluations.length;  ++k)  {	  for(int    k    =    0;    k    <    jacobianEvaluations.length;    ++k)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
16	[BUG]  [BUGGY]  double[][]  rows  =  cols.getColumns();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  cols.getColumns();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  cols.getColumns();	  double[][]    rows    =    jTj.getColumns();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
17	[BUG]  [BUGGY]  double[][]  rows  =  jtj.getRows();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  jtj.getRows();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  jtj.getRows();	  double[][]    rows    =    jTj.getColumns();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
18	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  2;  ++k)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    Integer    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
19	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  Integer  k  =  0;  k  <  2;  ++k)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  Integer  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  3;  ++k)  {  Integer  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    Integer    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
20	[BUG]  [BUGGY]  Integer  k  =  0;  k  <  2;  ++k)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    Integer    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
21	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  2;  ++k)  {  Integer  k  =  0;  k  <  cols;  ++k)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  2;  ++k)  {  Integer  k  =  0;  k  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  2;  ++k)  {  Integer  k  =  0;  k  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    Integer    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  >  expected	75	None	replace
22	[BUG]  [BUGGY]  Integer  rows  =  jF.getColumnCount();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jF.getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jF.getColumnCount();	  Integer    rows    =    jF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
23	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  j  =  0;  j  <  2;  ++j)  {	  for(int    k    =    0;    j    <    2;    ++k)    {    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	81	None	replace
24	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++k)  {  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  j  =  0;  j  <  cols;  ++k)  {	  for(int    k    =    0;    j    <    2;    ++k)    {    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	81	None	replace
25	[BUG]  [BUGGY]  int  rows  =  jTj.length  /  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.length  /  2;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.length  /  2;	  int    rows    =    jTj.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  int  rows  =  jTj.length  -  3;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.length  -  3;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.length  -  3;	  int    rows    =    jTj.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    jTj.length;    ++i)    {    for(int  k  =  0;  k  <  jTj.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
28	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  For(int  k  =  0;  k  <  jTj.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  For(int  k  =  0;  k  <  jTj.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    jTj.length;    ++i)    {    For(int  k  =  0;  k  <  jTj.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	34	None	add
29	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  int  k  =  0;  k  <  jTj.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  int  k  =  0;  k  <  jTj.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    jTj.length;    ++i)    {    int  k  =  0;  k  <  jTj.length;  ++i)  {	  	non-compiled	[CE]  >  expected	34	None	add
30	[BUG]  [BUGGY]  Integer  rows  =  cols.getRows()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  cols.getRows()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  cols.getRows()  +  1;	  Integer    rows    =    cols.getRows();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
31	[BUG]  [BUGGY]  Integer  rows  =  cols.getRows()  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  cols.getRows()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  cols.getRows()  -  1;	  Integer    rows    =    cols.getRows();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
32	[BUG]  [BUGGY]  int  rows  =  cols.getRowCount()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.getRowCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.getRowCount()  -  1;	  int    rows    =    cols.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  int  rows  =  cols.getRowCount()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.getRowCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.getRowCount()  +  1;	  int    rows    =    cols.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  int  rows  =  getColsCount();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  getColsCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  getColsCount();	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
35	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  [CE]  illegal  start  of  expression  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    i;    ++k)    {    for(int  k  =  0;  k  <  i;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
36	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  For(int  k  =  0;  k  <  i;  ++k)  {  [CE]  '.class'  expected  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  For(int  k  =  0;  k  <  i;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    i;    ++k)    {    For(int  k  =  0;  k  <  i;  ++k)  {	  	non-compiled	[CE]  '.class'  expected	72	None	add
37	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  int  k  =  0;  k  <  i;  ++k)  {  [CE]  >  expected  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  int  k  =  0;  k  <  i;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    i;    ++k)    {    int  k  =  0;  k  <  i;  ++k)  {	  	non-compiled	[CE]  >  expected	72	None	add
38	[BUG]  [BUGGY]  int  k  =  0;  k  <  2;  ++k)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
39	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  int  k  =  0;  k  <  2;  ++k)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  int  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  int  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
40	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  int  k  =  0;  k  <  2;  ++k)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  int  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  3;  ++k)  {  int  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
41	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  double  k  =  0;  k  <  2;  ++k)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  double  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  double  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jacobian.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	add	for(int  k  =  0;  k  <  jacobian.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    for(int    k    =    0;    k    <    jTj.length;    ++k)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
43	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  jacobian.length;  ++k)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jacobian.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  jacobian.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    for(int    k    =    0;    k    <    jTj.length;    ++k)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
44	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	For(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    for(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	19	None	replace
45	[BUG]  [BUGGY]  int  rows  =  jTj.length  +  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.length  +  2;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.length  +  2;	  int    rows    =    jTj.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
46	[BUG]  [BUGGY]  int  rows  =  jTj.length  /  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.length  /  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.length  /  1;	  int    rows    =    jTj.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
47	[BUG]  [BUGGY]  double  rows  =  jTj.length  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.length  +  1;	  int    rows    =    jTj.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
48	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  for(int  k  =  0;  j  <  2;  ++k)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  for(int  k  =  0;  j  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    2;    ++k)    {    for(int  k  =  0;  j  <  2;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
49	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  For(int  k  =  0;  j  <  2;  ++k)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  For(int  k  =  0;  j  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    2;    ++k)    {    For(int  k  =  0;  j  <  2;  ++k)  {	  	non-compiled	[CE]  '.class'  expected	80	None	add
50	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  for(int  k  =  0;  j  <  2);  ++k)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  for(int  k  =  0;  j  <  2);  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    2;    ++k)    {    for(int  k  =  0;  j  <  2);  ++k)  {	  	non-compiled	[CE]  ';'  expected	80	None	add
51	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  int  k  =  0;  j  <  2;  ++k)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  int  k  =  0;  j  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    2;    ++k)    {    int  k  =  0;  j  <  2;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  type	80	None	add
52	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  (int  k  =  0;  k  <  2;  ++k)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  (int  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  (int  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    (int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
53	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  (int  k  =  0;  k  <  2;  ++k)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  (int  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  3;  ++k)  {  (int  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    (int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
54	[BUG]  [BUGGY]  Int  rows  =  jTj.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Int  rows  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Int  rows  =  jTj.length;	          int    rows    =    jTj.length;    Int    rows    =    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
55	[BUG]  [BUGGY]  int  rows  =  cols.length;  Int  rows  =  jTj.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.length;  Int  rows  =  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.length;  Int  rows  =  jTj.length;	          int    rows    =    jTj.length;    Int    rows    =    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
56	[BUG]  [BUGGY]  double[][]  rows  =  cols.getCols();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  cols.getCols();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  cols.getCols();	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
57	[BUG]  [BUGGY]  double[][]  rows  =  jTj.getSeconds();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  jTj.getSeconds();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  jTj.getSeconds();	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
58	[BUG]  [BUGGY]  int  rows  =  jTj.length()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.length()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.length()  +  1;	  int    rows    =    jTj.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
59	[BUG]  [BUGGY]  int  rows  =  cols.length();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.length();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.length();	  int    rows    =    jTj.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
60	[BUG]  [BUGGY]  int  rows  =  jTj.length()  +  cols;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.length()  +  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.length()  +  cols;	  int    rows    =    jTj.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
61	[BUG]  [BUGGY]  Integer  rows  =  cols.getColumnCount();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  cols.getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  cols.getColumnCount();	  Integer    rows    =    i.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
62	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  (int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  (int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  (int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    (int    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
63	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++k)  {  (int  k  =  0;  k  <  cols;  ++k)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++k)  {  (int  k  =  0;  k  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  jTj.length;  ++k)  {  (int  k  =  0;  k  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    (int    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
64	[BUG]  [BUGGY]  (int  k  =  0;  k  <  cols;  ++k)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  (int  k  =  0;  k  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	(int  k  =  0;  k  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    (int    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
65	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  2;  ++k)  {  (int  k  =  0;  k  <  cols;  ++k)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  2;  ++k)  {  (int  k  =  0;  k  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  2;  ++k)  {  (int  k  =  0;  k  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    (int    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
66	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj,  sum);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj,  sum);	  int    rows    =    Math.min(jTj.length,    i);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
67	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj[i],  jTj.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj[i],  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj[i],  jTj.length);	  int    rows    =    Math.min(jTj.length,    i);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
68	[BUG]  [BUGGY]  Integer  rows  =  jTjF.getColumns();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTjF.getColumns();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTjF.getColumns();	  Integer    rows    =    jTjF.getRows();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
69	[BUG]  [BUGGY]  Integer  rows  =  jTjF.getRows()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTjF.getRows()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTjF.getRows()  +  1;	  Integer    rows    =    jTjF.getRows();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
70	[BUG]  [BUGGY]  Integer  rows  =  jTjF.getRows()  *  cols;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTjF.getRows()  *  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTjF.getRows()  *  cols;	  Integer    rows    =    jTjF.getRows();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
71	[BUG]  [BUGGY]  int  rows  =  jF.getColumnCount();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jF.getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jF.getColumnCount();	  int    rows    =    jF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
72	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {	  for(int    k    =    0;    j    <    cols;    ++k)    {    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	79	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  i  =  0;  j  <  cols;  ++i)  {	  for(int    k    =    0;    j    <    cols;    ++k)    {    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	79	None	replace
74	[BUG]  [BUGGY]  int  rows  =  jTj.rows()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.rows()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.rows()  +  1;	  int    rows    =    jTj.rows();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
75	[BUG]  [BUGGY]  int  rows  =  jTj.rows()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.rows()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.rows()  -  1;	  int    rows    =    jTj.rows();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
76	[BUG]  [BUGGY]  int  rows  =  jTj.rows()  -  cols;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.rows()  -  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.rows()  -  cols;	  int    rows    =    jTj.rows();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
77	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  cols.length);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj.length,  cols.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj.length,  cols.length);	  int    rows    =    Math.min(cols.length,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
78	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj,  cols.length);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj,  cols.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj,  cols.length);	  int    rows    =    Math.min(cols.length,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
79	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(cols.length,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(cols.length,  jTj.length  -  1);	  int    rows    =    Math.min(cols.length,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
80	[BUG]  [BUGGY]  int  rows  =  Math.min(rows.length,  jTj.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(rows.length,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(rows.length,  jTj.length);	  int    rows    =    Math.min(cols.length,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
81	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  jTj.length;  ++j)  {  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  j  =  0;  j  <  jTj.length;  ++j)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  j  =  0;  j  <  jTj.length;  ++j)  {	  for(int    k    =    0;    j    <    jTj.length;    ++k)    {    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	68	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  jTj.length;  ++i)  {  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  j  <  jTj.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  i  =  0;  j  <  jTj.length;  ++i)  {	  for(int    k    =    0;    j    <    jTj.length;    ++k)    {    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	68	None	replace
83	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  jacobianEvaluations.length;  ++k)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  jacobianEvaluations.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  j  <  jacobianEvaluations.length;  ++k)  {	  for(int    k    =    0;    j    <    jTj.length;    ++k)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
84	[BUG]  [BUGGY]  Integer  rows  =  cols.getRowCount()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  cols.getRowCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  cols.getRowCount()  -  1;	  Integer    rows    =    cols.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
85	[BUG]  [BUGGY]  Integer  rows  =  cols.getRowCount()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  cols.getRowCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  cols.getRowCount()  +  1;	  Integer    rows    =    cols.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
86	[BUG]  [BUGGY]  int  k  =  0;  k  <  cols;  ++k)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  k  =  0;  k  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  k  =  0;  k  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    int    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  >  expected	3	None	replace
87	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    int    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  >  expected	3	None	replace
88	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  int  k  =  0;  k  <  i;  ++k)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  int  k  =  0;  k  <  i;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  int  k  =  0;  k  <  i;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    int    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  >  expected	3	None	replace
89	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj[i],  sum);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj[i],  sum);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj[i],  sum);	  int    rows    =    Math.min(jTj[i],    cols);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
90	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj[i],  cols,  sum);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj[i],  cols,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj[i],  cols,  sum);	  int    rows    =    Math.min(jTj[i],    cols);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
91	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj[i],  cols  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj[i],  cols  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj[i],  cols  -  1);	  int    rows    =    Math.min(jTj[i],    cols);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
92	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj[i],  cols  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj[i],  cols  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj[i],  cols  +  1);	  int    rows    =    Math.min(jTj[i],    cols);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
93	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  getColumnCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  getColumnCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
94	[BUG]  [BUGGY]  int  rows  =  getColsCount()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  getColsCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  getColsCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
95	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  jTj.length);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(rows,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(rows,  jTj.length);	  int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
96	[BUG]  [BUGGY]  int  rows  =  Math.max(jTj,  cols.length);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.max(jTj,  cols.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.max(jTj,  cols.length);	  int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
97	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(cols,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(cols,  jTj.length  -  1);	  int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
98	[BUG]  [BUGGY]  int  rows  =  sum.getRowCount()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  sum.getRowCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  sum.getRowCount()  -  1;	  int    rows    =    sum.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
99	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  For(int  k  =  0;  k  <  2;  ++k)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  For(int  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  For(int  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    For(int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  '.class'  expected	31	None	replace
100	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  2;  ++k)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	For(int  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    For(int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  '.class'  expected	31	None	replace
101	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  for(int  k  =  0;  k  <  1;  ++k)  {  [CE]  illegal  start  of  expression  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  for(int  k  =  0;  k  <  1;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    1;    ++k)    {    for(int  k  =  0;  k  <  1;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
102	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  For(int  k  =  0;  k  <  1;  ++k)  {  [CE]  '.class'  expected  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  For(int  k  =  0;  k  <  1;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    1;    ++k)    {    For(int  k  =  0;  k  <  1;  ++k)  {	  	non-compiled	[CE]  '.class'  expected	41	None	add
103	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  int  k  =  0;  k  <  1;  ++k)  {  [CE]  illegal  start  of  type  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  int  k  =  0;  k  <  1;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    1;    ++k)    {    int  k  =  0;  k  <  1;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  type	41	None	add
104	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  for(int  k  =  0;  k  <  1);  ++k)  {  [CE]  ';'  expected  [FE]          OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  for(int  k  =  0;  k  <  1);  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    1;    ++k)    {    for(int  k  =  0;  k  <  1);  ++k)  {	  	non-compiled	[CE]  ';'  expected	41	None	add
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  jTj.length;  ++i)  {  int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  jTj.length;  ++i)  {  int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  i  =  0;  i  <  jTj.length;  ++i)  {  int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    (int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  >  expected	71	None	replace
106	[BUG]  [BUGGY]  (int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  (int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    (int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  jTj.length;  ++i)  {  (int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  jTj.length;  ++i)  {  (int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  i  =  0;  i  <  jTj.length;  ++i)  {  (int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    (int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  jTj.length;  ++i)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  jTj.length;  ++i)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  i  =  0;  i  <  jTj.length;  ++i)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    FOR(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	84	None	replace
109	[BUG]  [BUGGY]  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    FOR(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	84	None	replace
110	[BUG]  [BUGGY]  int  rows  =  cols.getColumnCount();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.getColumnCount();	  int    rows    =    inverse.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
111	[BUG]  [BUGGY]  int  rows  =  jTj.getRowsCount();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.getRowsCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.getRowsCount();	  int    rows    =    jTj.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
112	[BUG]  [BUGGY]  double  rows  =  jTj.getColumnsCount();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.getColumnsCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.getColumnsCount();	  int    rows    =    jTj.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
113	[BUG]  [BUGGY]  int  rows  =  cols.getColumnsCount();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.getColumnsCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.getColumnsCount();	  int    rows    =    jTj.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
114	[BUG]  [BUGGY]  int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  >  expected	21	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  jTj.length;  ++i)  {  double  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  jTj.length;  ++i)  {  double  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  i  =  0;  i  <  jTj.length;  ++i)  {  double  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  >  expected	21	None	replace
116	[BUG]  [BUGGY]  double  rows  =  sum.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  sum.doubleValue()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  sum.doubleValue()  +  1;	  double    rows    =    sum.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
117	[BUG]  [BUGGY]  double  rows  =  sum.doubleValue()  *  jTj.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  sum.doubleValue()  *  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  sum.doubleValue()  *  jTj.doubleValue();	  double    rows    =    sum.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
118	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  sum  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj.length,  sum  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj.length,  sum  +  1);	  int    rows    =    Math.min(jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
119	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  sum,  i);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj.length,  sum,  i);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj.length,  sum,  i);	  int    rows    =    Math.min(jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
120	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  sum,  cols);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj.length,  sum,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj.length,  sum,  cols);	  int    rows    =    Math.min(jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
121	[BUG]  [BUGGY]  int  rows  =  Math.min(sum,  jTj.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(sum,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(sum,  jTj.length);	  int    rows    =    Math.min(jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
122	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    jTj.length;    ++k)    {    for(int  k  =  0;  j  <  jTj.length;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
123	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  For(int  k  =  0;  j  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  For(int  k  =  0;  j  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    jTj.length;    ++k)    {    For(int  k  =  0;  j  <  jTj.length;  ++k)  {	  	non-compiled	[CE]  '.class'  expected	67	None	add
124	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  int  k  =  0;  j  <  jTj.length;  ++k)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  int  k  =  0;  j  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    jTj.length;    ++k)    {    int  k  =  0;  j  <  jTj.length;  ++k)  {	  	non-compiled	[CE]  >  expected	67	None	add
125	[BUG]  [BUGGY]  Integer  rows  =  jTj.getRowCount()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTj.getRowCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTj.getRowCount()  +  1;	  Integer    rows    =    jTj.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
126	[BUG]  [BUGGY]  Integer  rows  =  jTj.getColumnsCount();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTj.getColumnsCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTj.getColumnsCount();	  Integer    rows    =    jTj.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
127	[BUG]  [BUGGY]  int  rows  =  Math.max(sum,  jTj.length);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.max(sum,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.max(sum,  jTj.length);	  int    rows    =    Math.max(jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
128	[BUG]  [BUGGY]  int  rows  =  Math.max(jTj,  sum);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.max(jTj,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.max(jTj,  sum);	  int    rows    =    Math.max(jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
129	[BUG]  [BUGGY]  int  rows  =  Math.max(jTj.length,  sum  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.max(jTj.length,  sum  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.max(jTj.length,  sum  +  1);	  int    rows    =    Math.max(jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
130	[BUG]  [BUGGY]  int  rows  =  cols.size()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.size()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.size()  -  1;	  int    rows    =    cols.size();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
131	[BUG]  [BUGGY]  int  rows  =  this.cols.size();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  this.cols.size();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  this.cols.size();	  int    rows    =    cols.size();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
132	[BUG]  [BUGGY]  double  rows  =  jTj.getColumnCount();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.getColumnCount();	  int    rows    =    jTj.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
133	[BUG]  [BUGGY]  double  rows  =  jtj.doubleValue()  +  sum;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jtj.doubleValue()  +  sum;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jtj.doubleValue()  +  sum;	  double    rows    =    jtj.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
134	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  cols;  ++k)  {  for(int  k  =  0;  j  <  cols;  ++k)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  cols;  ++k)  {  for(int  k  =  0;  j  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    cols;    ++k)    {    for(int  k  =  0;  j  <  cols;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
135	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  cols;  ++k)  {  For(int  k  =  0;  j  <  cols;  ++k)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  cols;  ++k)  {  For(int  k  =  0;  j  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    cols;    ++k)    {    For(int  k  =  0;  j  <  cols;  ++k)  {	  	non-compiled	[CE]  '.class'  expected	78	None	add
136	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  cols;  ++k)  {  int  k  =  0;  j  <  cols;  ++k)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  cols;  ++k)  {  int  k  =  0;  j  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    cols;    ++k)    {    int  k  =  0;  j  <  cols;  ++k)  {	  	non-compiled	[CE]  >  expected	78	None	add
137	[BUG]  [BUGGY]  Integer  rows  =  jTj.getColumns();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTj.getColumns();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTj.getColumns();	  Integer    rows    =    jTj.getRows();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
138	[BUG]  [BUGGY]  Integer  rows  =  jTj.getRows()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTj.getRows()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTj.getRows()  +  1;	  Integer    rows    =    jTj.getRows();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
139	[BUG]  [BUGGY]  Integer  rows  =  jTj.getRows()  *  cols;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTj.getRows()  *  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTj.getRows()  *  cols;	  Integer    rows    =    jTj.getRows();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
140	[BUG]  [BUGGY]  int  rows  =  cols.length  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.length  -  1;	  int    rows    =    cols.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
141	[BUG]  [BUGGY]  int  rows  =  cols.length  -  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.length  -  2;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.length  -  2;	  int    rows    =    cols.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
142	[BUG]  [BUGGY]  int  rows  =  cols.length  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols.length  +  1;	  int    rows    =    cols.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
143	[BUG]  [BUGGY]  double[][]  rows  =  jTjF.getColumns();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  jTjF.getColumns();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  jTjF.getColumns();	  double[][]    rows    =    jTjF.getRows();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
144	[BUG]  [BUGGY]  double[][]  rows  =  jTjF.getCols();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  jTjF.getCols();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  jTjF.getCols();	  double[][]    rows    =    jTjF.getRows();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
145	[BUG]  [BUGGY]  Integer  rows  =  jTj.getCols();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTj.getCols();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTj.getCols();	  Integer    rows    =    i.getRows();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
146	[BUG]  [BUGGY]  Integer  rows  =  this.jTj.getRows();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  this.jTj.getRows();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  this.jTj.getRows();	  Integer    rows    =    i.getRows();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
147	[BUG]  [BUGGY]  double  rows  =  jTj.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.length  -  1;	  int    rows    =    jTj.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
148	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  +  sum;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.doubleValue()  +  sum;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.doubleValue()  +  sum;	  double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
149	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  *  sum;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.doubleValue()  *  sum;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.doubleValue()  *  sum;	  double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
150	[BUG]  [BUGGY]  int  rows  =  Math.max(jTj,  sum,  cols);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.max(jTj,  sum,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.max(jTj,  sum,  cols);	  int    rows    =    Math.max(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
151	[BUG]  [BUGGY]  Integer  rows  =  jTj.getColumnCount()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTj.getColumnCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTj.getColumnCount()  +  1;	  Integer    rows    =    jTj.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
152	[BUG]  [BUGGY]  Integer  rows  =  jTjF.getColumnCount();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTjF.getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTjF.getColumnCount();	  Integer    rows    =    jTjF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
153	[BUG]  [BUGGY]  Integer  rows  =  jTjF.getRowCount()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTjF.getRowCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTjF.getRowCount()  +  1;	  Integer    rows    =    jTjF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
154	[BUG]  [BUGGY]  Integer  rows  =  jTjF.getColumnsCount();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTjF.getColumnsCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTjF.getColumnsCount();	  Integer    rows    =    jTjF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
155	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols.length  +  1;  ++k)  {  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols.length  +  1;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols.length  +  1;  ++k)  {	  for(int    k    =    0;    k    <    cols.length;    ++k)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
156	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  colls.length;  ++k)  {  [CE]  cannot  find  symbol  colls  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  colls.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  colls.length;  ++k)  {	  for(int    k    =    0;    k    <    cols.length;    ++k)    {    	non-compiled	[CE]  cannot  find  symbol  colls	36	None	replace
157	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  jTj.length);  Int  rows  =  Math.min(jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(cols.length,  jTj.length);  Int  rows  =  Math.min(jTj.length,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(cols.length,  jTj.length);  Int  rows  =  Math.min(jTj.length,  cols);	          int    rows    =    Math.min(jTj.length,    cols);    Int    rows    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
158	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj,  cols.length);  Int  rows  =  Math.min(jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj,  cols.length);  Int  rows  =  Math.min(jTj.length,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj,  cols.length);  Int  rows  =  Math.min(jTj.length,  cols);	          int    rows    =    Math.min(jTj.length,    cols);    Int    rows    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	add	for(int  k  =  0;  j  <  jTj.length;  ++i)  {	  for(int    k    =    0;    k    <    jTj.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	35	2	replace
160	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  j  <  jTj.length;  ++i)  {	  for(int    k    =    0;    k    <    jTj.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	35	2	replace
161	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  jacobianEvaluations.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jacobianEvaluations.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  jacobianEvaluations.length;  ++i)  {	  for(int    k    =    0;    k    <    jTj.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	35	None	replace
162	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols.length;  ++i)  {	  for(int    k    =    0;    k    <    jTj.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	35	None	replace
163	[BUG]  [BUGGY]  int  rows  =  getColsCount()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  getColsCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  getColsCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
164	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  getColumnCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  getColumnCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
165	[BUG]  [BUGGY]  int  rows  =  jTj.getColumnCount()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.getColumnCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.getColumnCount()  +  1;	  int    rows    =    jTj.getRowCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
166	[BUG]  [BUGGY]  double  rows  =  jTj.getRowCount()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.getRowCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.getRowCount()  +  1;	  int    rows    =    jTj.getRowCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
167	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  for(int  k  =  0;  k  <  3;  ++k)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  for(int  k  =  0;  k  <  3;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    3;    ++k)    {    for(int  k  =  0;  k  <  3;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
168	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  For(int  k  =  0;  k  <  3;  ++k)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  For(int  k  =  0;  k  <  3;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    3;    ++k)    {    For(int  k  =  0;  k  <  3;  ++k)  {	  	non-compiled	[CE]  '.class'  expected	53	None	add
169	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  int  k  =  0;  k  <  3;  ++k)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  int  k  =  0;  k  <  3;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    3;    ++k)    {    int  k  =  0;  k  <  3;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  type	53	None	add
170	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  for(int  k  =  0;  k  <  4;  ++k)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  for(int  k  =  0;  k  <  4;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    3;    ++k)    {    for(int  k  =  0;  k  <  4;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
171	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  for(int  k  =  0;  k  <  2)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  for(int  k  =  0;  k  <  2)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  for(int  k  =  0;  k  <  2)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    for(int    k    =    0;    k    <    2)    {    	non-compiled	[CE]  ';'  expected	85	None	replace
172	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  2)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  2)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  2)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    for(int    k    =    0;    k    <    2)    {    	non-compiled	[CE]  ';'  expected	85	None	replace
173	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  cols));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj.length,  cols));  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj.length,  cols));	          int    rows    =    Math.min(jTj.length,    cols);    int    rows    =    Math.min(jTj.length,    cols));    	non-compiled	[CE]  ';'  expected	27	None	replace
174	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  cols)+  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj.length,  cols)+  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj.length,  cols)+  1;	          int    rows    =    Math.min(jTj.length,    cols);    int    rows    =    Math.min(jTj.length,    cols));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
175	[BUG]  [BUGGY]  double  rows  =  getColumnCount();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  getColumnCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
176	[BUG]  [BUGGY]  int  rows  =  this.inverse.getRowCount();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  this.inverse.getRowCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  this.inverse.getRowCount();	  int    rows    =    inverse.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  3;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	add	for(int  k  =  0;  j  <  3;  ++k)  {	  for(int    k    =    0;    j    <    2;    ++k)    {    	compilable	  [FE]  AssertionFailedError  	81	2	replace
178	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  3;  ++k)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  3;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  j  <  3;  ++k)  {	  for(int    k    =    0;    j    <    2;    ++k)    {    	compilable	  [FE]  AssertionFailedError  	81	2	replace
179	[BUG]  [BUGGY]  Integer  rows  =  jTj.getRowCount()  *  cols;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTj.getRowCount()  *  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTj.getRowCount()  *  cols;	  Integer    rows    =    jTj.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
180	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  cols.length;  ++k)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  cols.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	For(int  k  =  0;  k  <  cols.length;  ++k)  {	  for(int    k    =    0;    k    <    cols.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	36	None	replace
181	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  (int  k  =  0;  k  <  jTj.length;  ++i)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  (int  k  =  0;  k  <  jTj.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    jTj.length;    ++i)    {    (int  k  =  0;  k  <  jTj.length;  ++i)  {	  	non-compiled	[CE]  ')'  expected	34	None	add
182	[BUG]  [BUGGY]  int  rows  =  i.getColumnCount();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  i.getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  i.getColumnCount();	  int    rows    =    i.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
183	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jTj.length);  Int  rows  =  Math.min(jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(cols,  jTj.length);  Int  rows  =  Math.min(jTj.length,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(cols,  jTj.length);  Int  rows  =  Math.min(jTj.length,  cols);	          int    rows    =    Math.min(jTj.length,    cols);    Int    rows    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
184	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj,  cols);  Int  rows  =  Math.min(jTj,  cols);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj,  cols);  Int  rows  =  Math.min(jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj,  cols);  Int  rows  =  Math.min(jTj,  cols);	          int    rows    =    Math.min(jTj.length,    cols);    Int    rows    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
185	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj,  cols);  Int  rows  =  Math.min(jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj,  cols);  Int  rows  =  Math.min(jTj.length,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj,  cols);  Int  rows  =  Math.min(jTj.length,  cols);	          int    rows    =    Math.min(jTj.length,    cols);    Int    rows    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
186	[BUG]  [BUGGY]  double[][]  rows  =  jF.getRows();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  jF.getRows();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  jF.getRows();	  double[][]    rows    =    cols.getRows();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
187	[BUG]  [BUGGY]  double[][]  rows  =  this.cols.getRows();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  this.cols.getRows();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  this.cols.getRows();	  double[][]    rows    =    cols.getRows();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
188	[BUG]  [BUGGY]  Integer  rows  =  this.cols.getRows();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  this.cols.getRows();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  this.cols.getRows();	  Integer    rows    =    cols.getRows();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
189	[BUG]  [BUGGY]  Integer  rows  =  jTj.getRows(i);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTj.getRows(i);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTj.getRows(i);	  Integer    rows    =    jTj.getRows();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
190	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  For(int  k  =  0;  k  <  2;  ++k)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  For(int  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  3;  ++k)  {  For(int  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    For(int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  '.class'  expected	31	None	replace
191	[BUG]  [BUGGY]  int  rows  =  Math.max(jTj,  cols);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.max(jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.max(jTj,  cols);	  int    rows    =    Math.max(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
192	[BUG]  [BUGGY]  double  rows  =  sum.doubleValue()  +  jTj.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  sum.doubleValue()  +  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  sum.doubleValue()  +  jTj.doubleValue();	  double    rows    =    sum.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
193	[BUG]  [BUGGY]  Integer  rows  =  jF.getRowCount()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jF.getRowCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jF.getRowCount()  +  1;	  Integer    rows    =    jF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
194	[BUG]  [BUGGY]  Integer  rows  =  jF.getRowCount()  *  cols;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jF.getRowCount()  *  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jF.getRowCount()  *  cols;	  Integer    rows    =    jF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
195	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.doubleValue()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.doubleValue()  +  1;	  double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
196	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  +  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.doubleValue()  +  2;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.doubleValue()  +  2;	  double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
197	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  for(int  k  =  0;  k  <  2)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  for(int  k  =  0;  k  <  2)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  3;  ++k)  {  for(int  k  =  0;  k  <  2)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    for(int    k    =    0;    k    <    2)    {    	non-compiled	[CE]  ';'  expected	85	None	replace
198	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  (int  k  =  0;  k  <  3;  ++k)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  (int  k  =  0;  k  <  3;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    3;    ++k)    {    (int  k  =  0;  k  <  3;  ++k)  {	  	non-compiled	[CE]  ')'  expected	53	None	add
199	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  Integer  k  =  0;  k  <  3;  ++k)  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  Integer  k  =  0;  k  <  3;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    3;    ++k)    {    Integer  k  =  0;  k  <  3;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  type	53	None	add
200	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj,  i);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj,  i);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj,  i);	  int    rows    =    Math.min(jTj.length,    i);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
201	[BUG]  [BUGGY]  for(int  k  =  0;  jTj  <  jTj.length;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  jTj  <  jTj.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  jTj  <  jTj.length;  ++i)  {	  for(int    k    =    0;    k    <    jTj.length;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	35	None	replace
202	[BUG]  [BUGGY]  int  rows  =  getColumnsCount()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  getColumnsCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  getColumnsCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
203	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  cols;  ++k)  {  (int  k  =  0;  j  <  cols;  ++k)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  cols;  ++k)  {  (int  k  =  0;  j  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    cols;    ++k)    {    (int  k  =  0;  j  <  cols;  ++k)  {	  	non-compiled	[CE]  ')'  expected	78	None	add
204	[BUG]  [BUGGY]  int  rows  =  jTj.length  -  1  +  sum;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.length  -  1  +  sum;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.length  -  1  +  sum;	  int    rows    =    jTj.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
205	[BUG]  [BUGGY]  double[][]  rows  =  jTj.toArray(new  double[cols][cols.size()  ]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  jTj.toArray(new  double[cols][cols.size()  ]);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  jTj.toArray(new  double[cols][cols.size()  ]);	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
206	[BUG]  [BUGGY]  double[][]  rows  =  jTj.getLines();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  jTj.getLines();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  jTj.getLines();	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
207	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  (int  k  =  0;  k  <  4;  ++k)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  (int  k  =  0;  k  <  4;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  3;  ++k)  {  (int  k  =  0;  k  <  4;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    (int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
208	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols.length;  ++k)  {  (int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols.length;  ++k)  {  (int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols.length;  ++k)  {  (int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    (int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
209	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  (int  k  =  0;  k  <  i;  ++k)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  (int  k  =  0;  k  <  i;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  (int  k  =  0;  k  <  i;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    (int    k    =    0;    k    <    cols;    ++k)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  i;  k  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	add	for(int  k  =  i;  k  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    for(int    k    =    0;    k    <    cols);    ++k)    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
211	[BUG]  [BUGGY]  for(int  k  =  i;  k  <  cols;  ++k)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  i;  k  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  i;  k  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    for(int    k    =    0;    k    <    cols);    ++k)    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
212	[BUG]  [BUGGY]  int  rows  =  jTj.length()  *  cols;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.length()  *  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.length()  *  cols;	  int    rows    =    jTj.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
213	[BUG]  [BUGGY]  Integer  rows  =  i.getColumnCount();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  i.getColumnCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  i.getColumnCount();	  Integer    rows    =    i.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
214	[BUG]  [BUGGY]  int  rows  =  getRowCount()  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  getRowCount()  /  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  getRowCount()  /  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
215	[BUG]  [BUGGY]  int  rows  =  jTj.getColumnsCount()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.getColumnsCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.getColumnsCount()  +  1;	  int    rows    =    jTj.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
216	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  cols.length;  ++k)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  cols.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  j  <  cols.length;  ++k)  {	  for(int    k    =    0;    j    <    jTj.length;    ++k)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  jacobian.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	add	for(int  k  =  0;  j  <  jacobian.length;  ++k)  {	  for(int    k    =    0;    j    <    jTj.length;    ++k)    {    	compilable	  [FE]  AssertionFailedError  	68	2	replace
218	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  jacobian.length;  ++k)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  jacobian.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  j  <  jacobian.length;  ++k)  {	  for(int    k    =    0;    j    <    jTj.length;    ++k)    {    	compilable	  [FE]  AssertionFailedError  	68	2	replace
219	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jTj.length  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(cols,  jTj.length  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(cols,  jTj.length  +  1);	  int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
220	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols.length;  ++k)  {  For(int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols.length;  ++k)  {  For(int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols.length;  ++k)  {  For(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    For(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
221	[BUG]  [BUGGY]  for(int  jTj  =  0;  jTj!=  null;  ++j)  {  for(int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  jTj  =  0;  jTj!=  null;  ++j)  {  for(int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  jTj  =  0;  jTj!=  null;  ++j)  {  for(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    For(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
222	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  (int  k  =  0;  k  <  i;  ++k)  {  [CE]  ')'  expected  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  (int  k  =  0;  k  <  i;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    i;    ++k)    {    (int  k  =  0;  k  <  i;  ++k)  {	  	non-compiled	[CE]  ')'  expected	72	None	add
223	[BUG]  [BUGGY]  int  rows  =  this.getRowCount();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  this.getRowCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  this.getRowCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
224	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  (int  k  =  0;  k  <  1;  ++k)  {  [CE]  ')'  expected  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  (int  k  =  0;  k  <  1;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    1;    ++k)    {    (int  k  =  0;  k  <  1;  ++k)  {	  	non-compiled	[CE]  ')'  expected	41	None	add
225	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  k  =  0;  k  <  1;  ++k)  {  [CE]  illegal  start  of  type  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  k  =  0;  k  <  1;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    1;    ++k)    {    k  =  0;  k  <  1;  ++k)  {	  	non-compiled	[CE]  illegal  start  of  type	41	None	add
226	[BUG]  [BUGGY]  Integer  rows  =  jTjF.getRowCount()  *  cols;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTjF.getRowCount()  *  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTjF.getRowCount()  *  cols;	  Integer    rows    =    jTjF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
227	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  (int  k  =  0;  j  <  2;  ++k)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  (int  k  =  0;  j  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    2;    ++k)    {    (int  k  =  0;  j  <  2;  ++k)  {	  	non-compiled	[CE]  ')'  expected	80	None	add
228	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols.length;  ++k)  {  int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols.length;  ++k)  {  int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols.length;  ++k)  {  int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  >  expected	21	None	replace
229	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols.length;  ++k)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols.length;  ++k)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols.length;  ++k)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    FOR(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	84	None	replace
230	[BUG]  [BUGGY]  for(int  jTj  =  0;  jTj!=  null;  ++j)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  jTj  =  0;  jTj!=  null;  ++j)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  jTj  =  0;  jTj!=  null;  ++j)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    FOR(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	84	None	replace
231	[BUG]  [BUGGY]  int  rows  =  jF.getRowCount()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jF.getRowCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jF.getRowCount()  +  1;	  int    rows    =    jF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
232	[BUG]  [BUGGY]  Integer  rows  =  jTjF.getRows(i);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jTjF.getRows(i);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jTjF.getRows(i);	  Integer    rows    =    jTjF.getRows();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
233	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  (int  k  =  0;  j  <  jTj.length;  ++k)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  (int  k  =  0;  j  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    jTj.length;    ++k)    {    (int  k  =  0;  j  <  jTj.length;  ++k)  {	  	non-compiled	[CE]  ')'  expected	67	None	add
234	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  2;  ++k)  {  double  k  =  0;  k  <  2;  ++k)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  2;  ++k)  {  double  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  2;  ++k)  {  double  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
235	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jTj.length));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(cols,  jTj.length));  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(cols,  jTj.length));	          int    rows    =    Math.min(jTj.length,    cols);    int    rows    =    Math.min(jTj.length,    cols));    	non-compiled	[CE]  ';'  expected	27	None	replace
236	[BUG]  [BUGGY]  double  rows  =  jtj.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jtj.doubleValue()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jtj.doubleValue()  +  1;	  double    rows    =    jtj.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
237	[BUG]  [BUGGY]  int  rows  =  jTj.length;  Int  rows  =  jTj[cols].length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.length;  Int  rows  =  jTj[cols].length;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.length;  Int  rows  =  jTj[cols].length;	          int    rows    =    jTj.length;    Int    rows    =    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
238	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  FOR(int  k  =  0;  j  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  jTj.length;  ++k)  {  FOR(int  k  =  0;  j  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    jTj.length;    ++k)    {    FOR(int  k  =  0;  j  <  jTj.length;  ++k)  {	  	non-compiled	[CE]  '.class'  expected	67	None	add
239	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  i  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj.length,  i  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj.length,  i  +  1);	  int    rows    =    Math.min(jTj.length,    i);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
240	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  2;  ++k)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	For(int  k  =  0;  k  <  cols;  ++k)  {  Integer  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    Integer    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  '.class'  expected	75	None	replace
241	[BUG]  [BUGGY]  int  rows  =  Math.max(cols.length,  jTj.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.max(cols.length,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.max(cols.length,  jTj.length);	  int    rows    =    Math.max(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
242	[BUG]  [BUGGY]  int  rows  =  jTj.getColumnCount()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.getColumnCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.getColumnCount()  -  1;	  int    rows    =    jTj.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
243	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  [CE]  ')'  expected  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    i;    ++k)    {    if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }	  	non-compiled	[CE]  ')'  expected	72	None	add
244	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[j][j]  [CE]  ')'  expected  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[j][j]  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    i;    ++k)    {    if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[j][j]	  	non-compiled	[CE]  ')'  expected	72	None	add
245	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  [CE]  ')'  expected  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    i;    ++k)    {    if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]	  	non-compiled	[CE]  ')'  expected	72	None	add
246	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[j][j]  =  [CE]  ')'  expected  [FE]          OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  i;  ++k)  {  if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[j][j]  =  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    i;    ++k)    {    if(k  <  i;  ++k)  {  for(int  k  =  0;  k  <  i;  ++k)  {  }  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[j][j]  =	  	non-compiled	[CE]  ')'  expected	72	None	add
247	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  getColumnCount()  -  2;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  getColumnCount()  -  2;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
248	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  For(int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  For(int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  For(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    For(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
249	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  jTj.length;  ++k)  {  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  j  =  0;  j  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  j  =  0;  j  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    For(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	20	None	replace
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  1;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	add	for(int  k  =  0;  j  <  1;  ++k)  {	  for(int    k    =    0;    k    <    1;    ++k)    {    	compilable	  [FE]  AssertionFailedError  	42	2	replace
251	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  1;  ++k)  {  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  1;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  j  <  1;  ++k)  {	  for(int    k    =    0;    k    <    1;    ++k)    {    	compilable	  [FE]  AssertionFailedError  	42	2	replace
252	[BUG]  [BUGGY]  Integer  rows  =  jF.getColumnsCount();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  jF.getColumnsCount();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  jF.getColumnsCount();	  Integer    rows    =    jF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
253	[BUG]  [BUGGY]  int  rows  =  jF.getRowCount()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jF.getRowCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jF.getRowCount()  -  1;	  int    rows    =    jF.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
254	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  jTj);  Int  rows  =  Math.min(jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(cols.length,  jTj);  Int  rows  =  Math.min(jTj.length,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(cols.length,  jTj);  Int  rows  =  Math.min(jTj.length,  cols);	          int    rows    =    Math.min(jTj.length,    cols);    Int    rows    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
255	[BUG]  [BUGGY]  Integer  rows  =  this.inverse.getColumns();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  rows  =  this.inverse.getColumns();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  rows  =  this.inverse.getColumns();	  Integer    rows    =    this.inverse.getRows();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
256	[BUG]  [BUGGY]  double  rows  =  cols.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  cols.doubleValue();	  double    rows    =    sum.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
257	[BUG]  [BUGGY]  double  rows  =  jTj.doubleValue()  *  cols;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.doubleValue()  *  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.doubleValue()  *  cols;	  double    rows    =    jTj.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
258	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++k)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++k)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    FOR(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	84	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  jTj.length;  ++k)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  jTj.length;  ++k)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  i  =  0;  i  <  jTj.length;  ++k)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    FOR(int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	84	None	replace
260	[BUG]  [BUGGY]  double[][]  rows  =  jTj.getDataRef();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  jTj.getDataRef();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  jTj.getDataRef();	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
261	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  cols;  ++k)  {  for(int  k  =  0;  j  <  cols);  ++k)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  cols;  ++k)  {  for(int  k  =  0;  j  <  cols);  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    cols;    ++k)    {    for(int  k  =  0;  j  <  cols);  ++k)  {	  	non-compiled	[CE]  ';'  expected	78	None	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	add	for(int  k  =  0;  k  <  cols;  ++i)  {	  for(int    k    =    0;    k    <    jTj.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	35	2	replace
263	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  cols;  ++i)  {	  for(int    k    =    0;    k    <    jTj.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	35	2	replace
264	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  for(int  k  =  0;  k  <  2)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  for(int  k  =  0;  k  <  2)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  k  <  1;  ++k)  {  for(int  k  =  0;  k  <  2)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    for(int    k    =    0;    k    <    2)    {    	non-compiled	[CE]  ';'  expected	85	None	replace
265	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.max(0,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.max(0,  cols);	          int    rows    =    Math.min(jTj.length,    cols);    int    rows    =    Math.max(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
266	[BUG]  [BUGGY]  Integer  k  =  0;  k  <  jTj.length;  ++k)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  k  =  0;  k  <  jTj.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	Integer  k  =  0;  k  <  jTj.length;  ++k)  {	  for(int    k    =    0;    k    <    jTj.length;    ++k)    {    int    k    =    0;    k    <    jTj.length;    ++k)    {    	non-compiled	[CE]  >  expected	21	None	replace
267	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  jTj.length  -  2);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(cols.length,  jTj.length  -  2);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(cols.length,  jTj.length  -  2);	  int    rows    =    Math.min(cols.length,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  i  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	add	for(int  k  =  0;  i  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    i;    ++k)    {    	compilable	  [FE]  AssertionFailedError  	73	2	replace
269	[BUG]  [BUGGY]  for(int  k  =  0;  i  <  cols;  ++k)  {  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  i  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  k  =  0;  i  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    i;    ++k)    {    	compilable	  [FE]  AssertionFailedError  	73	2	replace
270	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  for(int  k  =  0;  k  <  1)  {  [CE]  ';'  expected  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  for(int  k  =  0;  k  <  1)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    1;    ++k)    {    for(int  k  =  0;  k  <  1)  {	  	non-compiled	[CE]  ';'  expected	41	None	add
271	[BUG]  [BUGGY]  int  rows  =  jTj.getColumnsCount()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.getColumnsCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.getColumnsCount()  -  1;	  int    rows    =    jTj.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
272	[BUG]  [BUGGY]  int  rows  =  jTj.getRows();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  jTj.getRows();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  jTj.getRows();	  int    rows    =    jTj.rows();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
273	[BUG]  [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  for(int  k  =  0;  j  <  2)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  j  <  2;  ++k)  {  for(int  k  =  0;  j  <  2)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    j    <    2;    ++k)    {    for(int  k  =  0;  j  <  2)  {	  	non-compiled	[CE]  ';'  expected	80	None	add
274	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  jacobianEvaluations.length;  ++k)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  jacobianEvaluations.length;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	For(int  k  =  0;  k  <  jacobianEvaluations.length;  ++k)  {	  for(int    k    =    0;    k    <    jacobianEvaluations.length;    ++k)    {    	non-compiled	[CE]  '.class'  expected	33	None	replace
275	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  sum  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj.length,  sum  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj.length,  sum  -  1);	  int    rows    =    Math.min(jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
276	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  ji.length);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj.length,  ji.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj.length,  ji.length);	  int    rows    =    Math.min(jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
277	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++i)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  ++i)  {  FOR(int  k  =  0;  k  <  jTj.length;  ++i)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int    k    =    0;    k    <    jTj.length;    ++i)    {    FOR(int  k  =  0;  k  <  jTj.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	34	None	add
278	[BUG]  [BUGGY]  double[][]  rows  =  jTj.toArray(new  double[cols.size()  ]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double[][]  rows  =  jTj.toArray(new  double[cols.size()  ]);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double[][]  rows  =  jTj.toArray(new  double[cols.size()  ]);	  double[][]    rows    =    jTj.getColumns();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
279	[BUG]  [BUGGY]  int  rows  =  cols;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  cols;  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  cols;	          int    rows    =    jTj.length;    int    rows    =    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
280	[BUG]  [BUGGY]  int  rows  =  Math.min(cols[i],  jTj);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(cols[i],  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(cols[i],  jTj);	  int    rows    =    Math.min(jTj[i],    cols);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++k)  {  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++k)  {  [BUGGY]      sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	for(int  i  =  0;  i  <  cols;  ++k)  {	  for(int    k    =    0;    k    <    cols;    ++k)    {    for(int    k    =    0;    k    <    cols);    ++k)    {    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	76	None	replace
282	[BUG]  [BUGGY]  double  rows  =  jTj.length();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  rows  =  jTj.length();  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	double  rows  =  jTj.length();	  int    rows    =    jTj.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
283	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj,  jTj.length);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  rows  =  Math.min(jTj,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	int  rows  =  Math.min(jTj,  jTj.length);	  int    rows    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
