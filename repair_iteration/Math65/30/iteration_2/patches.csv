bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
3	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  criterion,  cost);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  criterion,  cost);	  return    Math.sqrt(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	48	None	replace
4	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  criterion,  factor);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  criterion,  factor);	  return    Math.sqrt(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	48	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(remainder    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(remainder    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(remainder    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
8	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  msg,  jF,  criterion  /  rows);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  msg,  jF,  criterion  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  msg,  jF,  criterion  /  rows);	  return    Math.sqrt(variable    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	103	None	replace
9	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  variable  /  msg);  [CE]  cannot  find  symbol  msg  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  variable  /  msg);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  variable  /  msg);	  return    Math.sqrt(variable    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	103	None	replace
10	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  msg,  criterion  /  residualsWeights);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  msg,  criterion  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  msg,  criterion  /  residualsWeights);	  return    Math.sqrt(variable    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	103	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.sqrt(criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	add	return  criterion  *  Math.sqrt(criterion);	  return    criterion    *    Math.sqrt(remaining);    	compilable	  [FE]  AssertionFailedError  	89	3	replace
12	[BUG]  [BUGGY]  return  criterion  *  Math.sqrt(criterion);  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.sqrt(criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.sqrt(criterion);	  return    criterion    *    Math.sqrt(remaining);    	compilable	  [FE]  AssertionFailedError  	89	3	replace
13	[BUG]  [BUGGY]  return  residuals  *  Math.sqrt(criterion);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  residuals  *  Math.sqrt(criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  residuals  *  Math.sqrt(criterion);	  return    criterion    *    Math.sqrt(remaining);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	89	None	replace
14	[BUG]  [BUGGY]  return  criterion  *  Math.sqrt(value);  [CE]  cannot  find  symbol  value  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.sqrt(value);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.sqrt(value);	  return    criterion    *    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  value	89	None	replace
15	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  jF);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  jF);	  return    Math.sqrt(criterion    *    i);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	42	None	replace
16	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  result);  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  result);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  result);	  return    Math.sqrt(criterion    *    i);    	non-compiled	[CE]  cannot  find  symbol  result	42	None	replace
17	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  jF,  residual);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  jF,  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  jF,  residual);	  return    Math.sqrt(criterion    *    i);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	42	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	84	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	84	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	84	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  remaining.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  remaining.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  remaining.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	84	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getRows();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getRows();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  remaining.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  remaining.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  remaining.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual);  System.arraycopy(jacobianEvaluations,  0,  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual);  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual);  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  ']'  expected	14	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols    	non-compiled	[CE]  ')'  expected	15	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols    	non-compiled	[CE]  ')'  expected	15	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	23	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
45	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  factor);  [CE]  cannot  find  symbol  residual  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residual,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  factor);	  return    Math.sqrt(remaining    *    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  residual	18	None	replace
46	[BUG]  [BUGGY]  return  Math.sqrt(redev  *  criterion,  factor);  [CE]  cannot  find  symbol  redev  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(redev  *  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(redev  *  criterion,  factor);	  return    Math.sqrt(remaining    *    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  redev	18	None	replace
47	[BUG]  [BUGGY]  return  Math.sqrt(redefinition  *  criterion,  factor);  [CE]  cannot  find  symbol  redefinition  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(redefinition  *  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(redefinition  *  criterion,  factor);	  return    Math.sqrt(remaining    *    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  redefinition	18	None	replace
48	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  residual  /  rows);  [CE]  cannot  find  symbol  msg  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  residual  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  residual  /  rows);	  return    Math.sqrt(remainder    *    msg,    factor    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	104	None	replace
49	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  criterion,  residual  /  rows);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  criterion,  residual  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  criterion,  residual  /  rows);	  return    Math.sqrt(remainder    *    msg,    factor    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	104	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  cannot  find  symbol  remaining  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	85	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  cannot  find  symbol  residual  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  residual	85	None	replace
52	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	50	None	replace
53	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
55	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(cols[i]);    }    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
56	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(cols[i]);    }    	non-compiled	[CE]  '.class'  expected	73	None	replace
57	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  residual,  cost);  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  residual,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  residual,  cost);	  return    Math.sqrt(remaining    /    criterion,    cost);    	non-compiled	[CE]  cannot  find  symbol  residual	60	None	replace
58	[BUG]  [BUGGY]  return  Math.sqrt(variant  /  criterion,  cost);  [CE]  cannot  find  symbol  variant  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variant  /  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variant  /  criterion,  cost);	  return    Math.sqrt(remaining    /    criterion,    cost);    	non-compiled	[CE]  cannot  find  symbol  variant	60	None	replace
59	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
60	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  cost);  [CE]  cannot  find  symbol  residual  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residual,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  cost);	  return    Math.sqrt(remaining    *    criterion,    cost);    	non-compiled	[CE]  cannot  find  symbol  residual	17	None	replace
61	[BUG]  [BUGGY]  return  Math.sqrt(region  *  criterion,  cost);  [CE]  cannot  find  symbol  region  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(region  *  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(region  *  criterion,  cost);	  return    Math.sqrt(remaining    *    criterion,    cost);    	non-compiled	[CE]  cannot  find  symbol  region	17	None	replace
62	[BUG]  [BUGGY]  return  Math.sqrt(redefinition  *  criterion,  cost);  [CE]  cannot  find  symbol  redefinition  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(redefinition  *  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(redefinition  *  criterion,  cost);	  return    Math.sqrt(remaining    *    criterion,    cost);    	non-compiled	[CE]  cannot  find  symbol  redefinition	17	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	97	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	97	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.r  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.r  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.r	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  ';'  expected	72	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.r  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.r  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.r	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  ';'  expected	72	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.r  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.r  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.r	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  ';'  expected	72	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
78	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  return  Math.sqrt(remainders  *  criterion);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainders  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainders  *  criterion);	  return    Math.sqrt(criterion    *    residuals);    	non-compiled	[CE]  cannot  find  symbol  remainders	124	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobian,    0,    criterion,    0,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	107	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [CE]  cannot  find  symbol  remaining  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobian,    0,    criterion,    0,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	107	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobian,    0,    criterion,    0,    residuals.length);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	107	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobian,    0,    criterion,    0,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  incompatible  types	12	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  incompatible  types	12	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  incompatible  types	12	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
91	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  not  a  statement	82	None	replace
92	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
93	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  not  a  statement	82	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    parameters.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	101	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    parameters.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  columns	101	None	replace
96	[BUG]  [BUGGY]  return  jF,  criterion.getRMS();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  jF,  criterion.getRMS();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  jF,  criterion.getRMS();	  return    jF.getRMS();    	non-compiled	[CE]  ';'  expected	108	None	replace
97	[BUG]  [BUGGY]  return  jF.getRMS()  +  criterion;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  jF.getRMS()  +  criterion;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  jF.getRMS()  +  criterion;	  return    jF.getRMS();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
98	[BUG]  [BUGGY]  return  criterion.getRMS();  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion.getRMS();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion.getRMS();	  return    jF.getRMS();    	non-compiled	[CE]  double  cannot  be  dereferenced	108	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remainingsWeights  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	59	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	59	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	41	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  result	41	None	replace
104	[BUG]  [BUGGY]  return  Math.sqrt(remainings  *  criterion);  [CE]  cannot  find  symbol  remainings  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainings  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainings  *  criterion);	  return    Math.sqrt(criterion    /    residuals);    	non-compiled	[CE]  cannot  find  symbol  remainings	125	None	replace
105	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  ji  /  rows);  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  ji  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  ji  /  rows);	  return    Math.sqrt(criterion    *    residual    /    rows);    	non-compiled	[CE]  cannot  find  symbol  ji	64	None	replace
106	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  /  residualsWeights);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  /  residualsWeights);	  return    Math.sqrt(criterion    *    residual    /    rows);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
107	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  jF  /  rows);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  jF  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  jF  /  rows);	  return    Math.sqrt(criterion    *    residual    /    rows);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	64	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuesWeights.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuesWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuesWeights.length);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
110	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  jF,  msg  /  rows);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  jF,  msg  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  jF,  msg  /  rows);	  return    Math.sqrt(criterion    *    residual,    msg    /    rows);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
111	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  ji,  msg  /  rows);  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  ji,  msg  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  ji,  msg  /  rows);	  return    Math.sqrt(criterion    *    residual,    msg    /    rows);    	non-compiled	[CE]  cannot  find  symbol  ji	54	None	replace
112	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  rows);  [CE]  cannot  find  symbol  msg  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  i  /  rows);	  return    Math.sqrt(criterion    *    residual,    msg    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	54	None	replace
113	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
114	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residuals,  msg  /  residualsWeights);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residuals,  msg  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residuals,  msg  /  residualsWeights);	  return    Math.sqrt(remainder    *    msg,    criterion    /    residualsWeights);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	55	None	replace
115	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  msg  /  residualsWeights);  [CE]  cannot  find  symbol  residual  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residual,  msg  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  msg  /  residualsWeights);	  return    Math.sqrt(remainder    *    msg,    criterion    /    residualsWeights);    	non-compiled	[CE]  cannot  find  symbol  residual	55	None	replace
116	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  residual  /  residualsWeights);  [CE]  cannot  find  symbol  msg  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  residual  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  residual  /  residualsWeights);	  return    Math.sqrt(remainder    *    msg,    criterion    /    residualsWeights);    	non-compiled	[CE]  cannot  find  symbol  msg	55	None	replace
117	[BUG]  [BUGGY]  return  Math.sqrt(region  *  msg,  criterion  /  residualsWeights);  [CE]  cannot  find  symbol  region  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(region  *  msg,  criterion  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(region  *  msg,  criterion  /  residualsWeights);	  return    Math.sqrt(remainder    *    msg,    criterion    /    residualsWeights);    	non-compiled	[CE]  cannot  find  symbol  region	55	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
121	[BUG]  [BUGGY]  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
122	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
123	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    	non-compiled	[CE]  '.class'  expected	58	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    criterion    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  residualsWeights[i];  }  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  residualsWeights[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    criterion    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  criterion  +=  cols[i]  *  cols[i];  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  criterion  +=  cols[i]  *  cols[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  criterion  +=  cols[i]  *  cols[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    criterion    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    criterion    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
129	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  criterion,  criterion  /  rows);  [CE]  cannot  find  symbol  remainder  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  criterion,  criterion  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  criterion,  criterion  /  rows);	  return    Math.sqrt(msg    *    residual,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	56	None	replace
130	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  criterion,  criterion  /  rows);  [CE]  cannot  find  symbol  remaining  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remaining  *  criterion,  criterion  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  *  criterion,  criterion  /  rows);	  return    Math.sqrt(msg    *    residual,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remaining	56	None	replace
131	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  criterion  /  rows);  [CE]  cannot  find  symbol  residual  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residual,  criterion  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  criterion  /  rows);	  return    Math.sqrt(msg    *    residual,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  residual	56	None	replace
132	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  residual,  criterion  /  rows);  [CE]  cannot  find  symbol  remainder  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  residual,  criterion  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  residual,  criterion  /  rows);	  return    Math.sqrt(msg    *    residual,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	56	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getRows();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getRows();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
138	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    residues.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  '.class'  expected	111	None	replace
139	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  '.class'  expected	27	None	replace
140	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  '.class'  expected	27	None	replace
141	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  residual,  factor);  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  residual,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  residual,  factor);	  return    Math.sqrt(remainder    /    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  residual	62	None	replace
142	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  factor,  criterion);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  /  factor,  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  factor,  criterion);	  return    Math.sqrt(remainder    /    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  remainder	62	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getRows();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getRows();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	add	return  criterion  *  Math.rint(criterion);	  return    criterion    *    Math.rint(remaining);    	compilable	  [FE]  AssertionFailedError  	31	3	replace
146	[BUG]  [BUGGY]  return  criterion  *  Math.rint(criterion);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(criterion);	  return    criterion    *    Math.rint(remaining);    	compilable	  [FE]  AssertionFailedError  	31	3	replace
147	[BUG]  [BUGGY]  return  residuals  *  Math.rint(criterion);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  residuals  *  Math.rint(criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  residuals  *  Math.rint(criterion);	  return    criterion    *    Math.rint(remaining);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	31	None	replace
148	[BUG]  [BUGGY]  return  criterion  *  Math.rint(branch);  [CE]  cannot  find  symbol  branch  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(branch);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(branch);	  return    criterion    *    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  branch	31	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length    +    1];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	25	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length    +    1];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	25	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length    +    1];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	25	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterio    	non-compiled	[CE]  ')'  expected	93	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterio    	non-compiled	[CE]  ')'  expected	93	None	replace
155	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  remaining);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  remaining);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  remaining);	  return    Math.sqrt(criterion    /    factor);    	non-compiled	[CE]  cannot  find  symbol  remaining	33	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remaining  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	68	None	replace
163	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  factor,  criterion  /  2);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  factor,  criterion  /  2);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  factor,  criterion  /  2);	  return    Math.sqrt(remainder    *    factor,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	118	None	replace
164	[BUG]  [BUGGY]  return  Math.sqrt(variables  *  factor,  criterion  /  residuals);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variables  *  factor,  criterion  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variables  *  factor,  criterion  /  residuals);	  return    Math.sqrt(remainder    *    factor,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	118	None	replace
165	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  criterion  /  columns);  [CE]  cannot  find  symbol  residual  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residual,  criterion  /  columns);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  criterion  /  columns);	  return    Math.sqrt(remainder    *    factor,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  residual	118	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
168	[BUG]  [BUGGY]  return  Math.rint(criterion  *  residual);  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.rint(criterion  *  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.rint(criterion  *  residual);	  return    Math.rint(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  residual	49	None	replace
169	[BUG]  [BUGGY]  return  Math.rint(remainder  *  criterion,  cost);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.rint(remainder  *  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.rint(remainder  *  criterion,  cost);	  return    Math.rint(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	49	None	replace
170	[BUG]  [BUGGY]  return  Math.rint(remainder  *  criterion,  factor);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.rint(remainder  *  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.rint(remainder  *  criterion,  factor);	  return    Math.rint(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	49	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    final    double[][]    cols    =    getRows();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    final    double[][]    cols    =    getRows();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
173	[BUG]  [BUGGY]  return  Math.sqrt(redev  /  criterion,  factor);  [CE]  cannot  find  symbol  redev  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(redev  /  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(redev  /  criterion,  factor);	  return    Math.sqrt(remaining    /    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  redev	106	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    iterations.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	22	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.r  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.r  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.r	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  ';'  expected	100	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.sqrt(  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.sqrt(	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.r  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.r  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.r	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  ';'  expected	100	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.sqrt(  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(rows.length  >  0)  {  return  Math.sqrt(	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getRows();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getRows();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
181	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  ji);  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  ji);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  ji);	  return    Math.sqrt(criterion    *    residual);    	non-compiled	[CE]  cannot  find  symbol  ji	16	None	replace
182	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  factor);  [CE]  cannot  find  symbol  factor  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  factor);	  return    Math.sqrt(criterion    *    residual);    	non-compiled	[CE]  cannot  find  symbol  factor	16	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	add	return  Math.sqrt(criterion  *  cost);	  return    Math.sqrt(criterion    *    residual);    	compilable	  [FE]  AssertionFailedError  	16	2	replace
184	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  cost);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  cost);	  return    Math.sqrt(criterion    *    residual);    	compilable	  [FE]  AssertionFailedError  	16	2	replace
185	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[1  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[1  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[1  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
186	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
187	[BUG]  [BUGGY]  int[][]  jacobianEvaluations  =  new  int[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  int[][]  jacobianEvaluations  =  new  int[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	int[][]  jacobianEvaluations  =  new  int[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
188	[BUG]  [BUGGY]  return  criterion  *  Math.rint(reciterion);  [CE]  cannot  find  symbol  reciterion  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(reciterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(reciterion);	  return    criterion    *    Math.rint(result);    	non-compiled	[CE]  cannot  find  symbol  reciterion	90	None	replace
189	[BUG]  [BUGGY]  return  criterion  *  Math.rint(remainder);  [CE]  cannot  find  symbol  remainder  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(remainder);	  return    criterion    *    Math.rint(result);    	non-compiled	[CE]  cannot  find  symbol  remainder	90	None	replace
190	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  /  factor);  [CE]  cannot  find  symbol  reciterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(reciterion  /  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(reciterion  /  factor);	  return    Math.sqrt(remaining    /    factor);    	non-compiled	[CE]  cannot  find  symbol  reciterion	110	None	replace
191	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  factor,  cost);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remaining  /  factor,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  /  factor,  cost);	  return    Math.sqrt(remaining    /    factor);    	non-compiled	[CE]  cannot  find  symbol  remaining	110	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
195	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remaining);    }    	non-compiled	[CE]  '.class'  expected	88	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }  [CE]  cannot  find  symbol  remaining  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	88	None	replace
197	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remaining);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remaining);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remaining);    }    	non-compiled	[CE]  not  a  statement	88	None	replace
198	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  remainder  +=  Math.rint(remaining);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  remainder  +=  Math.rint(remaining);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  remainder  +=  Math.rint(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remaining);    }    	non-compiled	[CE]  not  a  statement	88	None	replace
199	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  residualsWeights);  [CE]  cannot  find  symbol  msg  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  i  /  residualsWeights);	  return    Math.sqrt(remainder    *    msg,    i    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	105	None	replace
200	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  i  /  rows);  [CE]  cannot  find  symbol  residual  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residual,  i  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  i  /  rows);	  return    Math.sqrt(remainder    *    msg,    i    /    rows);    	non-compiled	[CE]  cannot  find  symbol  residual	105	None	replace
201	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  residualsWidths);  [CE]  cannot  find  symbol  msg  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  residualsWidths);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  i  /  residualsWidths);	  return    Math.sqrt(remainder    *    msg,    i    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	105	None	replace
202	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  residuals);  [CE]  cannot  find  symbol  msg  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  i  /  residuals);	  return    Math.sqrt(remainder    *    msg,    i    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	105	None	replace
203	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainder);    }    	non-compiled	[CE]  '.class'  expected	87	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }  [CE]  cannot  find  symbol  remainder  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainder);    }    	non-compiled	[CE]  cannot  find  symbol  remainder	87	None	replace
205	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remainder);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remainder);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainder);    }    	non-compiled	[CE]  not  a  statement	87	None	replace
206	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remainder);  }  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remainder);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainder);    }    	non-compiled	[CE]  '.class'  expected	87	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	add	return  Math.sqrt(criterion  *  criterion);	  return    Math.sqrt(reciterion    *    i);    	compilable	  [FE]  AssertionFailedError  	43	2	replace
210	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  criterion);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  criterion);	  return    Math.sqrt(reciterion    *    i);    	compilable	  [FE]  AssertionFailedError  	43	2	replace
211	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }	  for(int    i    =    0;    i    <    columns;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(cols[i]);    }    	non-compiled	[CE]  '.class'  expected	114	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
216	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  Math.sqrt(criterion  /  cost);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  Math.sqrt(criterion  /  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    Math.sqrt(criterion  /  cost);	  	non-compiled	[CE]  unreachable  statement	36	None	add
217	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]  *  cols[i]);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]  *  cols[i]);  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
218	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]  *  cols[i]  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]  *  cols[i]  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]  *  cols[i]	  	non-compiled	[CE]  ')'  expected	36	None	add
219	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
220	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  double  cost  =  Math.sqrt(criterion  /  cost);  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  double  cost  =  Math.sqrt(criterion  /  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    double  cost  =  Math.sqrt(criterion  /  cost);	  	non-compiled	[CE]  unreachable  statement	36	None	add
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  incompatible  types	45	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  incompatible  types	45	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  incompatible  types	45	None	replace
224	[BUG]  [BUGGY]  return  Math.sqrt(redev  *  criterion);  [CE]  cannot  find  symbol  redev  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(redev  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(redev  *  criterion);	  return    Math.sqrt(period    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  redev	78	None	replace
225	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  /  criterion);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remaining  *  /  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  *  /  criterion);	  return    Math.sqrt(criterion    *    /    residual);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
226	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  2  /  residual);  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  2  /  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  2  /  residual);	  return    Math.sqrt(criterion    *    /    residual);    	non-compiled	[CE]  cannot  find  symbol  residual	63	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  missing  return  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  missing  return  statement	46	None	replace
228	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  missing  return  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  missing  return  statement	46	None	replace
230	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  '.class'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
231	[BUG]  [BUGGY]  return  criterion  +  Math.rint(branch);  [CE]  cannot  find  symbol  branch  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  +  Math.rint(branch);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  +  Math.rint(branch);	  return    criterion    +    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  branch	32	None	replace
232	[BUG]  [BUGGY]  return  criterion  +  Math.rint(variables[i]);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  +  Math.rint(variables[i]);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  +  Math.rint(variables[i]);	  return    criterion    +    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  	32	None	replace
233	[BUG]  [BUGGY]  return  criterion  +  Math.rint(variant);  [CE]  cannot  find  symbol  variant  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  +  Math.rint(variant);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  +  Math.rint(variant);	  return    criterion    +    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  variant	32	None	replace
234	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual  /  residual);  [CE]  cannot  find  symbol  residual  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residual  /  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual  /  residual);	  return    Math.sqrt(remainder    *    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  residual	65	None	replace
235	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  /  criterion,  cost);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  /  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  /  criterion,  cost);	  return    Math.sqrt(remainder    *    /    criterion);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
236	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  /  criterion,  factor);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  /  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  /  criterion,  factor);	  return    Math.sqrt(remainder    *    /    criterion);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  residual	94	None	replace
238	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  cost);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  /  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  cost);	  return    Math.sqrt(criterion    /    cost);    	non-compiled	[CE]  cannot  find  symbol  remainder	37	None	replace
239	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  cost);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remaining  /  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  /  cost);	  return    Math.sqrt(criterion    /    cost);    	non-compiled	[CE]  cannot  find  symbol  remaining	37	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	102	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
242	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  msg  /  factor);  [CE]  cannot  find  symbol  residual  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residual,  msg  /  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  msg  /  factor);	  return    Math.sqrt(criterion    *    residual,    msg    /    residuals);    	non-compiled	[CE]  cannot  find  symbol  residual	119	None	replace
243	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  ji,  msg  /  residuals);  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  ji,  msg  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  ji,  msg  /  residuals);	  return    Math.sqrt(criterion    *    residual,    msg    /    residuals);    	non-compiled	[CE]  cannot  find  symbol  ji	119	None	replace
244	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  jF,  msg  /  jF);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  jF,  msg  /  jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  jF,  msg  /  jF);	  return    Math.sqrt(criterion    *    residual,    msg    /    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	119	None	replace
245	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  result,  msg  /  residuals);  [CE]  cannot  find  symbol  result  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  result,  msg  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  result,  msg  /  residuals);	  return    Math.sqrt(criterion    *    residual,    msg    /    residuals);    	non-compiled	[CE]  cannot  find  symbol  result	119	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residues.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residues.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residues.length);  }	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	24	None	replace
247	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	112	None	replace
248	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	112	None	replace
249	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  residual	120	None	replace
250	[BUG]  [BUGGY]  double[][]  cols  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  cols  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  cols  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  i	120	None	replace
251	[BUG]  [BUGGY]  double[][]  cols  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);  [CE]  cannot  find  symbol  residual  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  cols  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  cols  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  residual	120	None	replace
252	[BUG]  [BUGGY]  return  Math.sqrt(jF  /  criterion);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(jF  /  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(jF  /  criterion);	  return    Math.sqrt(criterion    /    jF);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	34	None	replace
253	[BUG]  [BUGGY]  return  Math.sqrt(period  /  jF);  [CE]  cannot  find  symbol  period  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(period  /  jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(period  /  jF);	  return    Math.sqrt(criterion    /    jF);    	non-compiled	[CE]  cannot  find  symbol  period	34	None	replace
254	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  jF,  criterion);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  /  jF,  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  jF,  criterion);	  return    Math.sqrt(criterion    /    jF);    	non-compiled	[CE]  cannot  find  symbol  remainder	34	None	replace
255	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  jF);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remaining  /  jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  /  jF);	  return    Math.sqrt(criterion    /    jF);    	non-compiled	[CE]  cannot  find  symbol  remaining	34	None	replace
256	[BUG]  [BUGGY]  double  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  int    i    =    0;    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	121	None	replace
257	[BUG]  [BUGGY]  int  i  =  0;  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  int  i  =  0;  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	int  i  =  0;  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  int    i    =    0;    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	121	None	replace
258	[BUG]  [BUGGY]  double  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  int    i    =    0;    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    iterations.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	39	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    iterations.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	39	None	replace
261	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  '.class'  expected	21	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	95	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	95	None	replace
265	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  result  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  result	95	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	38	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[result.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	69	None	replace
268	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  '.class'  expected	47	None	replace
269	[BUG]  [BUGGY]  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  incompatible  types	47	None	replace
270	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  jF,  msg  /  msg);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  jF,  msg  /  msg);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  jF,  msg  /  msg);	  return    Math.sqrt(criterion    *    residual,    msg    /    msg);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	53	None	replace
271	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  ji,  msg  /  msg);  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  ji,  msg  /  msg);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  ji,  msg  /  msg);	  return    Math.sqrt(criterion    *    residual,    msg    /    msg);    	non-compiled	[CE]  cannot  find  symbol  ji	53	None	replace
272	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  result,  msg  /  msg);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  result,  msg  /  msg);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  result,  msg  /  msg);	  return    Math.sqrt(criterion    *    residual,    msg    /    msg);    	non-compiled	[CE]  cannot  find  symbol  result	53	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  missing  return  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  missing  return  statement	44	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[this.remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[this.remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[this.remainings.length];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    this.remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
275	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  not  a  statement	83	None	replace
276	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
277	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  not  a  statement	83	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    iterations.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    iterations.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	  for(int    i    =    0;    i    <    iterations.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	67	None	replace
281	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns();  if(cols  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  final  double[][]  cols  =  getColumns();  if(cols  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	final  double[][]  cols  =  getColumns();  if(cols  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
282	[BUG]  [BUGGY]  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
283	[BUG]  [BUGGY]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	85	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterio    	non-compiled	[CE]  ')'  expected	93	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2][2];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2][2];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2][2];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	  for(int    i    =    0;    i    <    parameters.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	123	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(cols[i]);    }    	non-compiled	[CE]  ')'  expected	73	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
291	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
292	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
293	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  return  Math.sqrt(  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  return  Math.sqrt(	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
294	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  throw  new  IllegalArgumentException( "Invalid  number  of  residuals  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  throw  new  IllegalArgumentException( "Invalid  number  of  residuals  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainders[i],  criterion);  if(reciterion  >  0)  {  throw  new  IllegalArgumentException( "Invalid  number  of  residuals	  	non-compiled	[CE]  unclosed  string  literal	36	None	add
295	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  double  cost  =  Math.sqrt(remainder  *  criterion);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  double  cost  =  Math.sqrt(remainder  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    double  cost  =  Math.sqrt(remainder  *  criterion);	  	non-compiled	[CE]  cannot  find  symbol  remainder	36	None	add
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]	  for(int    i    =    0;    i    <    columns;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(cols[i]);    }    	non-compiled	[CE]  ')'  expected	114	None	replace
297	[BUG]  [BUGGY]  return  Math.sqrt(result  *  criterion);  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(result  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(result  *  criterion);	  return    Math.sqrt(criterion    *    residuals);    	non-compiled	[CE]  cannot  find  symbol  result	124	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(remainder    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
299	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  total);  [CE]  cannot  find  symbol  total  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  total);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  total);	  return    Math.sqrt(criterion    /    i);    	non-compiled	[CE]  cannot  find  symbol  total	91	None	replace
300	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  criterion,  cost);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  criterion,  cost);	  return    Math.sqrt(remaining    *    criterion,    cost);    	non-compiled	[CE]  cannot  find  symbol  	17	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  results	95	None	replace
302	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  *  factor);  [CE]  cannot  find  symbol  reciterion  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(reciterion  *  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(reciterion  *  factor);	  return    Math.sqrt(remaining    *    factor);    	non-compiled	[CE]  cannot  find  symbol  reciterion	126	None	replace
303	[BUG]  [BUGGY]  return  Math.sqrt(criterian  *  factor);  [CE]  cannot  find  symbol  criterian  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterian  *  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterian  *  factor);	  return    Math.sqrt(remaining    *    factor);    	non-compiled	[CE]  cannot  find  symbol  criterian	126	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  results	23	None	replace
306	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  not  a  statement	83	None	replace
307	[BUG]  [BUGGY]  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	57	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
309	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  not  a  statement	82	None	replace
310	[BUG]  [BUGGY]  return  criterion  *  Math.sqrt(variables[i]);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.sqrt(variables[i]);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.sqrt(variables[i]);	  return    criterion    *    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  	89	None	replace
311	[BUG]  [BUGGY]  return  criterion  *  Math.sqrt(variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.sqrt(variable);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.sqrt(variable);	  return    criterion    *    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  	89	None	replace
312	[BUG]  [BUGGY]  return  criterion  *  Math.sqrt(period);  [CE]  cannot  find  symbol  period  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.sqrt(period);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.sqrt(period);	  return    criterion    *    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  period	89	None	replace
313	[BUG]  [BUGGY]  return  criterion  *  Math.rint(variables);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(variables);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(variables);	  return    criterion    *    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  	31	None	replace
314	[BUG]  [BUGGY]  return  criterion  *  Math.rint(variable);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(variable);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(variable);	  return    criterion    *    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  	31	None	replace
315	[BUG]  [BUGGY]  return  criterion  *  Math.rint(value);  [CE]  cannot  find  symbol  value  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(value);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(value);	  return    criterion    *    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  value	31	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  residues  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  residues	68	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  results	84	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  criterion.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  criterion.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  criterion.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	84	None	replace
319	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  2)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  '.class'  expected	27	None	replace
320	[BUG]  [BUGGY]  return  criterion  *  Math.rint(period);  [CE]  cannot  find  symbol  period  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(period);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(period);	  return    criterion    *    Math.rint(result);    	non-compiled	[CE]  cannot  find  symbol  period	90	None	replace
321	[BUG]  [BUGGY]  return  criterion  *  Math.rint(variables[i]);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(variables[i]);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(variables[i]);	  return    criterion    *    Math.rint(result);    	non-compiled	[CE]  cannot  find  symbol  	90	None	replace
322	[BUG]  [BUGGY]  return  Math.sqrt(period  *  /  residual);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(period  *  /  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(period  *  /  residual);	  return    Math.sqrt(criterion    *    /    residual);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
323	[BUG]  [BUGGY]  return  Math.rint(result  *  criterion);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.rint(result  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.rint(result  *  criterion);	  return    Math.rint(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  result	49	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols    	non-compiled	[CE]  ')'  expected	15	None	replace
325	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
326	[BUG]  [BUGGY]  Pentru(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  Pentru(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	Pentru(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remaining);    }    	non-compiled	[CE]  '.class'  expected	88	None	replace
327	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remaining);  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remaining);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  residual  +=  Math.rint(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remaining);    }    	non-compiled	[CE]  '.class'  expected	88	None	replace
328	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  factor,  criterion  /  rows);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  factor,  criterion  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  factor,  criterion  /  rows);	  return    Math.sqrt(remainder    *    factor,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	118	None	replace
329	[BUG]  [BUGGY]  return  Math.sqrt(value  *  factor,  criterion  /  rows);  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(value  *  factor,  criterion  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(value  *  factor,  criterion  /  rows);	  return    Math.sqrt(remainder    *    factor,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  value	118	None	replace
330	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  factor,  i  /  rows);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  factor,  i  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  factor,  i  /  rows);	  return    Math.sqrt(remainder    *    factor,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	118	None	replace
331	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  factor,  criterion  /  targetValues);  [CE]  cannot  find  symbol  remainder  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  factor,  criterion  /  targetValues);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  factor,  criterion  /  targetValues);	  return    Math.sqrt(remainder    *    factor,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	118	None	replace
332	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  i  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  i  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  i  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
333	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[3  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[3  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[3  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
334	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  jF);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  /  jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  jF);	  return    Math.sqrt(criterion    /    factor);    	non-compiled	[CE]  cannot  find  symbol  remainder	33	None	replace
335	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  cannot  find  symbol  columns  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  columns	12	None	replace
336	[BUG]  [BUGGY]  return  Math.sqrt(region  *  criterion);  [CE]  cannot  find  symbol  region  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(region  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(region  *  criterion);	  return    Math.sqrt(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  region	48	None	replace
337	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  criterion,  factor);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  criterion,  factor);	  return    Math.sqrt(remaining    *    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  	18	None	replace
338	[BUG]  [BUGGY]  return  Math.sqrt(value  *  criterion,  factor);  [CE]  cannot  find  symbol  value  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(value  *  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(value  *  criterion,  factor);	  return    Math.sqrt(remaining    *    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  value	18	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  criterion.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  criterion.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  criterion.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	69	None	replace
340	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
341	[BUG]  [BUGGY]  return  jF.getRMS(criterion);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  jF.getRMS(criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  jF.getRMS(criterion);	  return    jF.getRMS();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
342	[BUG]  [BUGGY]  return  jf.getRMS();  [CE]  cannot  find  symbol  jf  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  jf.getRMS();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  jf.getRMS();	  return    jF.getRMS();    	non-compiled	[CE]  cannot  find  symbol  jf	108	None	replace
343	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  *  criterion);  [CE]  cannot  find  symbol  reciterion  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(reciterion  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(reciterion  *  criterion);	  return    Math.sqrt(reciterion    *    residual);    	non-compiled	[CE]  cannot  find  symbol  reciterion	115	None	replace
344	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residualsWeights.length);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobian,    0,    criterion,    0,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	107	None	replace
345	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobian,    0,    criterion,    0,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	107	None	replace
346	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residualsWeights.length);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobian,    0,    criterion,    0,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	107	None	replace
347	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  factor  /  residualsRows);  [CE]  cannot  find  symbol  msg  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  factor  /  residualsRows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  factor  /  residualsRows);	  return    Math.sqrt(remainder    *    msg,    factor    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	104	None	replace
348	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  criterion,  factor  /  rows);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  criterion,  factor  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  criterion,  factor  /  rows);	  return    Math.sqrt(remainder    *    msg,    factor    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	104	None	replace
349	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  factor,  msg  /  msg);  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  factor,  msg  /  msg);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  factor,  msg  /  msg);	  return    Math.sqrt(criterion    *    residual,    msg    /    msg);    	non-compiled	[CE]  cannot  find  symbol  factor	53	None	replace
350	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
351	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
352	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]);    }    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
353	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length    +    1];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
354	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length    +    1];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
355	[BUG]  [BUGGY]  return  Math.sqrt(variable  /  criterion,  cost);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  /  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  /  criterion,  cost);	  return    Math.sqrt(remaining    /    criterion,    cost);    	non-compiled	[CE]  cannot  find  symbol  	60	None	replace
356	[BUG]  [BUGGY]  return  Math.sqrt(period  *  /  residuals);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(period  *  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(period  *  /  residuals);	  return    Math.sqrt(criterion    *    /    residuals);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
357	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  cannot  find  symbol  columns  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  columns	45	None	replace
358	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights);  }  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights);  }	  for(int    i    =    0;    i    <    iterations.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	67	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
360	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  factor,  msg  /  rows);  [CE]  cannot  find  symbol  factor  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  factor,  msg  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  factor,  msg  /  rows);	  return    Math.sqrt(criterion    *    residual,    msg    /    rows);    	non-compiled	[CE]  cannot  find  symbol  factor	54	None	replace
361	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
362	[BUG]  [BUGGY]  double  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols	  int    i    =    0;    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  ')'  expected	121	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  results	122	None	replace
364	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  ')'  expected	122	None	replace
365	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
366	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  residual);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  residual);	  return    Math.sqrt(criterion    /    cost);    	non-compiled	[CE]  cannot  find  symbol  remainder	37	None	replace
367	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights	  for(int    i    =    0;    i    <    iterations.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
368	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
369	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  residualsRows);  [CE]  cannot  find  symbol  msg  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  residualsRows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  i  /  residualsRows);	  return    Math.sqrt(remainder    *    msg,    i    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	105	None	replace
370	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  residualsLeft);  [CE]  cannot  find  symbol  msg  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  i  /  residualsLeft);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  i  /  residualsLeft);	  return    Math.sqrt(remainder    *    msg,    i    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	105	None	replace
371	[BUG]  [BUGGY]  return  Math.sqrt(results  *  criterion);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(results  *  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(results  *  criterion);	  return    Math.sqrt(criterion    /    residuals);    	non-compiled	[CE]  cannot  find  symbol  results	125	None	replace
372	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  residualsWeights);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  residualsWeights);	  return    Math.sqrt(criterion    /    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	125	None	replace
373	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
374	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  <identifier>  expected	72	None	replace
375	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  ';'  expected	72	None	replace
376	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
377	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.r  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.r  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.r	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  ';'  expected	100	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  ';'  expected	100	None	replace
379	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
380	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  jF);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  jF);	  return    Math.sqrt(criterion    /    jF);    	non-compiled	[CE]  cannot  find  symbol  remainder	34	None	replace
381	[BUG]  [BUGGY]  return  Math.sqrt(jF,  criterion  /  residual);  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(jF,  criterion  /  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(jF,  criterion  /  residual);	  return    Math.sqrt(criterion    /    jF);    	non-compiled	[CE]  cannot  find  symbol  residual	34	None	replace
382	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
383	[BUG]  [BUGGY]  return  Math.sqrt(variable  /  criterion,  factor);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  /  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  /  criterion,  factor);	  return    Math.sqrt(remainder    /    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  	62	None	replace
384	[BUG]  [BUGGY]  return  Math.sqrt(result  /  criterion);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(result  /  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(result  /  criterion);	  return    Math.sqrt(remainder    /    factor);    	non-compiled	[CE]  cannot  find  symbol  result	109	None	replace
385	[BUG]  [BUGGY]  int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
386	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  jF,  msg,  criterion  /  rows);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  jF,  msg,  criterion  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  jF,  msg,  criterion  /  rows);	  return    Math.sqrt(variable    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	103	None	replace
387	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  jF,  criterion  /  msg);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  jF,  criterion  /  msg);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  jF,  criterion  /  msg);	  return    Math.sqrt(variable    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	103	None	replace
388	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  msg,  i  /  rows);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  msg,  i  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  msg,  i  /  rows);	  return    Math.sqrt(variable    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	103	None	replace
389	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  msg,  factor  /  rows);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  msg,  factor  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  msg,  factor  /  rows);	  return    Math.sqrt(variable    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	103	None	replace
390	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  factor,  msg  /  residuals);  [CE]  cannot  find  symbol  factor  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  factor,  msg  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  factor,  msg  /  residuals);	  return    Math.sqrt(criterion    *    residual,    msg    /    residuals);    	non-compiled	[CE]  cannot  find  symbol  factor	119	None	replace
391	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  RMS,  msg  /  residuals);  [CE]  cannot  find  symbol  RMS  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  RMS,  msg  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  RMS,  msg  /  residuals);	  return    Math.sqrt(criterion    *    residual,    msg    /    residuals);    	non-compiled	[CE]  cannot  find  symbol  RMS	119	None	replace
392	[BUG]  [BUGGY]  return  criterion  +  Math.rint(remainder);  [CE]  cannot  find  symbol  remainder  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  +  Math.rint(remainder);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  +  Math.rint(remainder);	  return    criterion    +    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  remainder	32	None	replace
393	[BUG]  [BUGGY]  return  criterion  +  Math.rint(variables);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  +  Math.rint(variables);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  +  Math.rint(variables);	  return    criterion    +    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  	32	None	replace
394	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  remainingsWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	41	None	replace
395	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  factor,  criterion);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remaining  /  factor,  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  /  factor,  criterion);	  return    Math.sqrt(remaining    /    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  remaining	106	None	replace
396	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
397	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  columns  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  columns	86	None	replace
398	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[results.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
399	[BUG]  [BUGGY]  Pentru(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  Pentru(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	Pentru(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainder);    }    	non-compiled	[CE]  '.class'  expected	87	None	replace
400	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainder);    }    	non-compiled	[CE]  not  a  statement	87	None	replace
401	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  factor  /  rows);  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  factor  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  factor  /  rows);	  return    Math.sqrt(criterion    *    residual    /    rows);    	non-compiled	[CE]  cannot  find  symbol  factor	64	None	replace
402	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  /  residualsWidths);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  /  residualsWidths);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  /  residualsWidths);	  return    Math.sqrt(criterion    *    residual    /    rows);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
403	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  columns  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  columns	24	None	replace
404	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  msg,  factor  /  residualsWeights);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  msg,  factor  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  msg,  factor  /  residualsWeights);	  return    Math.sqrt(remainder    *    msg,    criterion    /    residualsWeights);    	non-compiled	[CE]  cannot  find  symbol  remainder	55	None	replace
405	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  residualsWeights[i];  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  residualsWeights[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    criterion    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
406	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }  [CE]  cannot  find  symbol  columns  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    criterion    +=    cols[i]    *    cols[i];    }    	non-compiled	[CE]  cannot  find  symbol  columns	30	None	replace
407	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
408	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  i	120	None	replace
409	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);  [CE]  cannot  find  symbol  residual  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  cols,  0,  criterion);	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  residual	120	None	replace
410	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  residual,  criterion  /  rows);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  residual,  criterion  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  residual,  criterion  /  rows);	  return    Math.sqrt(remainder    *    factor,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	118	None	replace
411	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residualsWeights];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residualsWeights];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  residualsWeights];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	120	None	replace
412	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residualsWidth];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [CE]  cannot  find  symbol  residualsWidth  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residualsWidth];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  residualsWidth];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  residualsWidth	120	None	replace
413	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  '.class'  expected	98	None	replace
414	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  factor,  criterion);  [CE]  cannot  find  symbol  remaining  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remaining  *  factor,  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  *  factor,  criterion);	  return    Math.sqrt(remaining    *    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  remaining	18	None	replace
415	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  /  factor);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  /  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  /  factor);	  return    Math.sqrt(remainder    *    /    criterion);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
416	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remaining);    }    	non-compiled	[CE]  not  a  statement	88	None	replace
417	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg);  [CE]  cannot  find  symbol  msg  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg);	  return    Math.sqrt(criterion    *    residual);    	non-compiled	[CE]  cannot  find  symbol  msg	16	None	replace
418	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  RMS);  [CE]  cannot  find  symbol  RMS  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  RMS);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  RMS);	  return    Math.sqrt(criterion    *    residual);    	non-compiled	[CE]  cannot  find  symbol  RMS	16	None	replace
419	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
420	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg  /  residuals);  [CE]  cannot  find  symbol  msg  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg  /  residuals);	  return    Math.sqrt(criterion    *    residual,    msg    /    residuals);    	non-compiled	[CE]  cannot  find  symbol  msg	119	None	replace
421	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainingsWeights  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	85	None	replace
422	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  factor,  criterion  /  residualsWeights);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  factor,  criterion  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  factor,  criterion  /  residualsWeights);	  return    Math.sqrt(remainder    *    msg,    criterion    /    residualsWeights);    	non-compiled	[CE]  cannot  find  symbol  remainder	55	None	replace
423	[BUG]  [BUGGY]  if(columns!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  columns  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  if(columns!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	if(columns!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  columns	11	None	replace
424	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
425	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
426	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	69	None	replace
427	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  residues  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainingsWeights.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  residues	94	None	replace
428	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
429	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  not  a  statement	82	None	replace
430	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  factor,  cost);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  /  factor,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  factor,  cost);	  return    Math.sqrt(remaining    /    criterion,    cost);    	non-compiled	[CE]  cannot  find  symbol  remainder	60	None	replace
431	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  columns  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  columns	58	None	replace
432	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  double  cost  =  Math.sqrt(remainder  /  cost);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  double  cost  =  Math.sqrt(remainder  /  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    double  cost  =  Math.sqrt(remainder  /  cost);	  	non-compiled	[CE]  cannot  find  symbol  remainder	36	None	add
433	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  int  cost  =  Math.min(remainder,  criterion);  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  int  cost  =  Math.min(remainder,  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return    Math.sqrt(criterion    /    cost);    int  cost  =  Math.min(remainder,  criterion);	  	non-compiled	[CE]  cannot  find  symbol  remainder	36	None	add
434	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  factor,  factor);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remaining  /  factor,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  /  factor,  factor);	  return    Math.sqrt(remaining    /    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  remaining	106	None	replace
435	[BUG]  [BUGGY]  return  Math.sqrt(variant  /  residual,  factor);  [CE]  cannot  find  symbol  variant  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variant  /  residual,  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variant  /  residual,  factor);	  return    Math.sqrt(remaining    /    criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  variant	106	None	replace
436	[BUG]  [BUGGY]  return  criterion  *  Math.rint(variant);  [CE]  cannot  find  symbol  variant  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.rint(variant);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(variant);	  return    criterion    *    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  variant	31	None	replace
437	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  1;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterio    	non-compiled	[CE]  ')'  expected	93	None	replace
438	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  msg  /  msg);  [CE]  cannot  find  symbol  msg  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  msg  /  msg);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  msg  /  msg);	  return    Math.sqrt(criterion    *    residual,    msg    /    msg);    	non-compiled	[CE]  cannot  find  symbol  msg	53	None	replace
439	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  RMS,  msg  /  msg);  [CE]  cannot  find  symbol  RMS  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  RMS,  msg  /  msg);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  RMS,  msg  /  msg);	  return    Math.sqrt(criterion    *    residual,    msg    /    msg);    	non-compiled	[CE]  cannot  find  symbol  RMS	53	None	replace
440	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  msg,  criterion  /  msg);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  msg,  criterion  /  msg);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  msg,  criterion  /  msg);	  return    Math.sqrt(criterion    *    residual,    msg    /    msg);    	non-compiled	[CE]  cannot  find  symbol  remainder	53	None	replace
441	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
442	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(criterion  /  rows);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(criterion  /  rows);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(criterion  /  rows);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
443	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remaining  *  colsWeights[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remaining  *  colsWeights[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remaining  *  colsWeights[i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
444	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  factor,  residuals);  [CE]  cannot  find  symbol  factor  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  factor,  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  factor,  residuals);	  return    Math.sqrt(criterion    *    residuals);    	non-compiled	[CE]  cannot  find  symbol  factor	124	None	replace
445	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  residuals);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  residuals);	  return    Math.sqrt(criterion    *    residuals);    	non-compiled	[CE]  cannot  find  symbol  remainder	124	None	replace
446	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[redemainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[redemainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[redemainings.length];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    this.remainings.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
447	[BUG]  [BUGGY]  return  jFrame.getRMS();  [CE]  cannot  find  symbol  jFrame  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  jFrame.getRMS();  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  jFrame.getRMS();	  return    jF.getRMS();    	non-compiled	[CE]  cannot  find  symbol  jFrame	108	None	replace
448	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  /  residuals);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  /  residuals);	  return    Math.sqrt(criterion    *    /    residuals);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
449	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  factor  /  residuals);  [CE]  cannot  find  symbol  factor  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  factor  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  factor  /  residuals);	  return    Math.sqrt(criterion    *    /    residuals);    	non-compiled	[CE]  cannot  find  symbol  factor	66	None	replace
450	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  2  /  residuals);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  2  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  2  /  residuals);	  return    Math.sqrt(criterion    *    /    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	66	None	replace
451	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  period);  [CE]  cannot  find  symbol  period  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  /  period);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  period);	  return    Math.sqrt(criterion    /    i);    	non-compiled	[CE]  cannot  find  symbol  period	91	None	replace
452	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.sqrt(remainder    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
453	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  factor  /  residualsWeights);  [CE]  cannot  find  symbol  msg  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  factor  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  factor  /  residualsWeights);	  return    Math.sqrt(remainder    *    msg,    factor    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	104	None	replace
454	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  factor  /  rows);  [CE]  cannot  find  symbol  residual  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residual,  factor  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  factor  /  rows);	  return    Math.sqrt(remainder    *    msg,    factor    /    rows);    	non-compiled	[CE]  cannot  find  symbol  residual	104	None	replace
455	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg,  factor  /  residuals);  [CE]  cannot  find  symbol  msg  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg,  factor  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg,  factor  /  residuals);	  return    Math.sqrt(remainder    *    msg,    factor    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	104	None	replace
456	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remaining  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remaining  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remaining  *  cols[i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
457	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  '.class'  expected	95	None	replace
458	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[reasons.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  reasons  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[reasons.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[reasons.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  reasons	95	None	replace
459	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[reason.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  reason  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[reason.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[reason.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  reason	95	None	replace
460	[BUG]  [BUGGY]  int  i  =  0;  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  int  i  =  0;  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	int  i  =  0;  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols	  int    i    =    0;    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  ')'  expected	121	None	replace
461	[BUG]  [BUGGY]  int  i  =  0;  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  int  i  =  0;  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	int  i  =  0;  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  int    i    =    0;    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
462	[BUG]  [BUGGY]  return  criterion  +  Math.rint(variable);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  +  Math.rint(variable);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  +  Math.rint(variable);	  return    criterion    +    Math.rint(remaining);    	non-compiled	[CE]  cannot  find  symbol  	32	None	replace
463	[BUG]  [BUGGY]  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  i	13	None	replace
464	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i],  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i],  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i],  cols[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
465	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  '.class'  expected	3	None	replace
466	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residuals[i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residuals[i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residuals[i];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  ']'  expected	28	None	replace
467	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual;  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual;  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual;  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  ']'  expected	28	None	replace
468	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual);  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual);  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual);  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  ']'  expected	28	None	replace
469	[BUG]  [BUGGY]  return  criterion  *  Math.sqrt(variables);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.sqrt(variables);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.sqrt(variables);	  return    criterion    *    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  	89	None	replace
470	[BUG]  [BUGGY]  return  criterion  *  Math.sqrt(variant);  [CE]  cannot  find  symbol  variant  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  criterion  *  Math.sqrt(variant);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.sqrt(variant);	  return    criterion    *    Math.sqrt(remaining);    	non-compiled	[CE]  cannot  find  symbol  variant	89	None	replace
471	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  RMS,  msg  /  rows);  [CE]  cannot  find  symbol  RMS  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  RMS,  msg  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  RMS,  msg  /  rows);	  return    Math.sqrt(criterion    *    residual,    msg    /    rows);    	non-compiled	[CE]  cannot  find  symbol  RMS	54	None	replace
472	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  msg  /  residualsWeights);  [CE]  cannot  find  symbol  msg  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  msg  /  residualsWeights);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  msg  /  residualsWeights);	  return    Math.sqrt(criterion    *    residual,    msg    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	54	None	replace
473	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  -  1];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
474	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
475	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
476	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  /  cost);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  /  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  /  cost);	  return    Math.sqrt(criterion    /    cost);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
477	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
478	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
479	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  /  residual);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  /  residual);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  /  residual);	  return    Math.sqrt(criterion    *    /    residual);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
480	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  columns  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  columns	41	None	replace
481	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobian,    0,    criterion,    0,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	107	None	replace
482	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  '.class'  expected	27	None	replace
483	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residual];  System.arraycopy(jacobianEvaluations,  0,	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
484	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  factor);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  *  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  factor);	  return    Math.sqrt(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	48	None	replace
485	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length    +    1];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	25	None	replace
486	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  columns  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  columns	97	None	replace
487	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residuals,  i  /  rows);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  residuals,  i  /  rows);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residuals,  i  /  rows);	  return    Math.sqrt(remainder    *    msg,    i    /    rows);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	105	None	replace
488	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residuals[i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residuals[i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residuals[i];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  ']'  expected	14	None	replace
489	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
490	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remaining  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remaining  *  cols[i]);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remaining  *  cols[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
491	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residualsWeights];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residualsWeights];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  residualsWeights];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
492	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residualsWidth];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  residualsWidth];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  residualsWidth];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
493	[BUG]  [BUGGY]  return  Math.sqrt(variant  *  criterion,  cost);  [CE]  cannot  find  symbol  variant  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variant  *  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variant  *  criterion,  cost);	  return    Math.sqrt(remaining    *    criterion,    cost);    	non-compiled	[CE]  cannot  find  symbol  variant	17	None	replace
494	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residuals[i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residuals[i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  residuals[i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  ']'  expected	26	None	replace
495	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
496	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
497	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  rows);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  rows);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  rows);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
498	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getColumns();  if(cols.length  >  0)  {  return  Math.r  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getColumns();  if(cols.length  >  0)  {  return  Math.r  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getColumns();  if(cols.length  >  0)  {  return  Math.r	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  ';'  expected	100	None	replace
499	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  columns);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  columns);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  columns);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    getRows();    if(cols.length    >    0)    {    return    Math.r    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
500	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  1;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols    	non-compiled	[CE]  ')'  expected	15	None	replace
501	[BUG]  [BUGGY]  return  Math.rint(remainder  *  factor);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.rint(remainder  *  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.rint(remainder  *  factor);	  return    Math.rint(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	49	None	replace
502	[BUG]  [BUGGY]  return  Math.rint(remainder  /  criterion);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.rint(remainder  /  criterion);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.rint(remainder  /  criterion);	  return    Math.rint(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	49	None	replace
503	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  ji  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  ji  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  ji	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  ')'  expected	122	None	replace
504	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  residuals);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(remainder  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  residuals);	  return    Math.sqrt(criterion    /    residuals);    	non-compiled	[CE]  cannot  find  symbol  remainder	125	None	replace
505	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  RMS  /  residuals);  [CE]  cannot  find  symbol  RMS  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(criterion  *  RMS  /  residuals);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  RMS  /  residuals);	  return    Math.sqrt(criterion    *    residual    /    rows);    	non-compiled	[CE]  cannot  find  symbol  RMS	64	None	replace
506	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  '.class'  expected	59	None	replace
507	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[reason.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  reason  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[reason.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[reason.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  reason	59	None	replace
508	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  msg,  criterion  /  factor);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  msg,  criterion  /  factor);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  msg,  criterion  /  factor);	  return    Math.sqrt(variable    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	103	None	replace
509	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  msg,  criterion  /  residualsWidths);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  return  Math.sqrt(variable  *  msg,  criterion  /  residualsWidths);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  msg,  criterion  /  residualsWidths);	  return    Math.sqrt(variable    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	103	None	replace
510	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  columns  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]      return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residualsWeights.length);    }    	non-compiled	[CE]  cannot  find  symbol  columns	84	None	replace
