bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  incompatible  types	16	None	replace
13	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  '.class'  expected	16	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
16	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual);  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  *  residual);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual);	  return    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  residual	4	None	replace
17	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  criterion,  cost);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remaining  *  criterion,  cost);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  *  criterion,  cost);	  return    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remaining	4	None	replace
18	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  criterion,  factor);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remaining  *  criterion,  factor);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  *  criterion,  factor);	  return    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remaining	4	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	23	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	23	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length  +  1];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	23	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
27	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  '.class'  expected	14	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
29	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  /  residual);  [CE]  cannot  find  symbol  reciterion  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(reciterion  /  residual);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(reciterion  /  residual);	  return    Math.sqrt(remainder    /    i);    	non-compiled	[CE]  cannot  find  symbol  reciterion	13	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  criterion  +=  cols[i]  *  cols[i];  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
31	[BUG]  [BUGGY]  return  criterion  *  Math.rint(remaining);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  criterion  *  Math.rint(remaining);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(remaining);	      	non-compiled	[CE]  cannot  find  symbol  remaining	5	None	replace
32	[BUG]  [BUGGY]  return  criterion  +  Math.rint(remaining);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  criterion  +  Math.rint(remaining);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  +  Math.rint(remaining);	      	non-compiled	[CE]  cannot  find  symbol  remaining	5	None	replace
33	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  factor);  [CE]  cannot  find  symbol  factor  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  /  factor);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  factor);	  return    Math.sqrt(criterion    /    residual);    	non-compiled	[CE]  cannot  find  symbol  factor	1	None	replace
34	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  jF);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  /  jF);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  jF);	  return    Math.sqrt(criterion    /    residual);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	1	None	replace
35	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  result);  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  /  result);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  result);	  return    Math.sqrt(criterion    /    residual);    	non-compiled	[CE]  cannot  find  symbol  result	1	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  /  cost);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	add	return  Math.sqrt(criterion  /  cost);	  return    Math.sqrt(criterion    /    residual);    	compilable	  [FE]  AssertionFailedError  	1	12	replace
37	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  /  cost);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  cost);	  return    Math.sqrt(criterion    /    residual);    	compilable	  [FE]  AssertionFailedError  	1	12	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	21	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	21	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	21	None	replace
42	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  i);  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  *  i);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  i);	  return    Math.sqrt(remaining    *    i);    	non-compiled	[CE]  cannot  find  symbol  i	12	None	replace
43	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  *  i);  [CE]  cannot  find  symbol  reciterion  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(reciterion  *  i);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(reciterion  *  i);	  return    Math.sqrt(remaining    *    i);    	non-compiled	[CE]  cannot  find  symbol  reciterion	12	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  missing  return  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  missing  return  statement	17	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  incompatible  types	17	None	replace
46	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  '.class'  expected	17	None	replace
47	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  '.class'  expected	17	None	replace
48	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  criterion);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remainder  *  criterion);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  criterion);	  return    Math.sqrt(remainder    *    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
49	[BUG]  [BUGGY]  return  Math.rint(remainder  *  criterion);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.rint(remainder  *  criterion);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.rint(remainder  *  criterion);	  return    Math.sqrt(remainder    *    i);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  msg  /  msg);  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  *  residual,  msg  /  msg);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  msg  /  msg);	  return    Math.sqrt(remainder    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  residual	20	None	replace
54	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  msg  /  rows);  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  *  residual,  msg  /  rows);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  msg  /  rows);	  return    Math.sqrt(remainder    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  residual	20	None	replace
55	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  msg,  criterion  /  residualsWeights);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remainder  *  msg,  criterion  /  residualsWeights);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  msg,  criterion  /  residualsWeights);	  return    Math.sqrt(remainder    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	20	None	replace
56	[BUG]  [BUGGY]  return  Math.sqrt(msg  *  residual,  criterion  /  rows);  [CE]  cannot  find  symbol  msg  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(msg  *  residual,  criterion  /  rows);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(msg  *  residual,  criterion  /  rows);	  return    Math.sqrt(remainder    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  msg	20	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	24	None	replace
60	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  criterion,  cost);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remaining  /  criterion,  cost);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  /  criterion,  cost);	  return    Math.sqrt(remaining    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  remaining	2	None	replace
61	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  criterion,  cost);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remainder  /  criterion,  cost);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  criterion,  cost);	  return    Math.sqrt(remainder    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	18	None	replace
62	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  criterion,  factor);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remainder  /  criterion,  factor);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  criterion,  factor);	  return    Math.sqrt(remainder    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	18	None	replace
63	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  /  residual);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  *  /  residual);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  /  residual);	  return    Math.sqrt(remainder    *    /    rows);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
64	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual  /  rows);  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  *  residual  /  rows);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual  /  rows);	  return    Math.sqrt(remainder    *    /    rows);    	non-compiled	[CE]  cannot  find  symbol  residual	19	None	replace
65	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  /  criterion);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remainder  *  /  criterion);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  /  criterion);	  return    Math.sqrt(remainder    *    /    rows);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
66	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  /  residuals);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  *  /  residuals);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  /  residuals);	  return    Math.sqrt(remainder    *    /    rows);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	25	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	25	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	25	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	25	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.r  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.r  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.r	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  iterations.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
78	[BUG]  [BUGGY]  return  Math.sqrt(period  *  criterion);  [CE]  cannot  find  symbol  period  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(period  *  criterion);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(period  *  criterion);	  return    Math.sqrt(remainder    *    i);    	non-compiled	[CE]  cannot  find  symbol  period	11	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getRows();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i],    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
83	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[1][2];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	25	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainingsWeights  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	25	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residualsWeights.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	25	None	replace
87	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainder);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
88	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remaining);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
89	[BUG]  [BUGGY]  return  criterion  *  Math.sqrt(remaining);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  criterion  *  Math.sqrt(remaining);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.sqrt(remaining);	      	non-compiled	[CE]  cannot  find  symbol  remaining	5	None	replace
90	[BUG]  [BUGGY]  return  criterion  *  Math.rint(result);  [CE]  cannot  find  symbol  result  [FE]                      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  criterion  *  Math.rint(result);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  criterion  *  Math.rint(result);	      	non-compiled	[CE]  cannot  find  symbol  result	5	None	replace
91	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  i);  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  /  i);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  i);	  return    Math.sqrt(remainder    /    i);    	non-compiled	[CE]  cannot  find  symbol  i	13	None	replace
92	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  /  i);  [CE]  cannot  find  symbol  reciterion  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(reciterion  /  i);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(reciterion  /  i);	  return    Math.sqrt(remainder    /    i);    	non-compiled	[CE]  cannot  find  symbol  reciterion	13	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterio	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  ')'  expected	14	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remainingsWeights  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	23	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	23	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainingsWeights.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	23	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.r  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.r  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  getRows();  if(cols.length  >  0)  {  return  Math.r	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  parameters  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  parameters	21	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	21	None	replace
103	[BUG]  [BUGGY]  return  Math.sqrt(variable  *  msg,  criterion  /  rows);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(variable  *  msg,  criterion  /  rows);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(variable  *  msg,  criterion  /  rows);	  return    Math.sqrt(remainder    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  	20	None	replace
104	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  msg,  factor  /  rows);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remainder  *  msg,  factor  /  rows);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  msg,  factor  /  rows);	  return    Math.sqrt(remainder    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	20	None	replace
105	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  msg,  i  /  rows);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remainder  *  msg,  i  /  rows);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  msg,  i  /  rows);	  return    Math.sqrt(remainder    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	20	None	replace
106	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  criterion,  factor);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remaining  /  criterion,  factor);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  /  criterion,  factor);	  return    Math.sqrt(remaining    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  remaining	2	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobian,  0,  criterion,  0,  residuals.length);  }	      	non-compiled	[CE]  cannot  find  symbol  remainings	5	None	replace
108	[BUG]  [BUGGY]  return  jF.getRMS();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  jF.getRMS();  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  jF.getRMS();	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
109	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  factor);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remainder  /  factor);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  factor);	  return    Math.sqrt(remaining    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	2	None	replace
110	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  factor);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remaining  /  factor);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  /  factor);	  return    Math.sqrt(remaining    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  remaining	2	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  residues  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  residues	21	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residualsWeights.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    criterion,    1,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	23	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
115	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  *  residual);  [CE]  cannot  find  symbol  reciterion  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(reciterion  *  residual);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(reciterion  *  residual);	  return    Math.sqrt(remaining    *    i);    	non-compiled	[CE]  cannot  find  symbol  reciterion	12	None	replace
116	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
118	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  factor,  criterion  /  rows);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remainder  *  factor,  criterion  /  rows);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  factor,  criterion  /  rows);	  return    Math.sqrt(remainder    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  remainder	20	None	replace
119	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  msg  /  residuals);  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  *  residual,  msg  /  residuals);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residual,  msg  /  residuals);	  return    Math.sqrt(remainder    *    msg,    criterion    /    rows);    	non-compiled	[CE]  cannot  find  symbol  residual	20	None	replace
120	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  i	16	None	replace
121	[BUG]  [BUGGY]  int  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  int  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	int  i  =  0;  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[2    *    i];    System.arraycopy(jacobianEvaluations,    0,    criterion,    0,    cols);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	16	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	25	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  cannot  find  symbol  parameters  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    jacobianEvaluations    =    new    double[remainings.length];    System.arraycopy(jacobianEvaluations,    0,    ji,    residuals.length);    }    	non-compiled	[CE]  cannot  find  symbol  parameters	25	None	replace
124	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residuals);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  *  residuals);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  *  residuals);	  return    Math.sqrt(remainder    *    i);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	11	None	replace
125	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  residuals);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(criterion  /  residuals);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  residuals);	  return    Math.sqrt(remainder    /    i);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	13	None	replace
126	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  factor);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  return  Math.sqrt(remaining  *  factor);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  *  factor);	  return    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remaining	4	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }  [BUGGY]    return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.sqrt(remainder  *  cols[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    getColumns();    if(cols.length    >    0)    {    return    Math.rint(cols[i]    *    cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
