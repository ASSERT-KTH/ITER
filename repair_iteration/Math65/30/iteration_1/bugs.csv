bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  residual);  [CE]  cannot  find  symbol  residual  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]  return  Math.sqrt(criterion  /  residual);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(criterion  /  residual);	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  cannot  find  symbol  residual	59	None	replace
2	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  criterion);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]  return  Math.sqrt(remaining  /  criterion);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  /  criterion);	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  cannot  find  symbol  remaining	59	None	replace
3	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  residual);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]  return  Math.sqrt(remaining  /  residual);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  /  residual);	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  cannot  find  symbol  remaining	59	None	replace
4	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  criterion);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]  return  Math.sqrt(remaining  *  criterion);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  *  criterion);	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  cannot  find  symbol  remaining	59	None	replace
5	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	  	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  missing  return  statement	59	None	replace
6	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	60	None	add
7	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols!=  null)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	60	None	add
8	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]);  }		non-compiled	[CE]  illegal  start  of  expression	60	None	add
9	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i]  *  cols[i]);  }		non-compiled	[CE]  illegal  start  of  expression	60	None	add
10	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  getColumns();  if(cols.length  >  0)  {  return  Math.rint(cols[i],  cols[i]);  }		non-compiled	[CE]  illegal  start  of  expression	60	None	add
11	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  i);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]  return  Math.sqrt(remainder  *  i);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  i);	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  cannot  find  symbol  remainder	59	None	replace
12	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  i);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]  return  Math.sqrt(remaining  *  i);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remaining  *  i);	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  cannot  find  symbol  remaining	59	None	replace
13	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  i);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]  return  Math.sqrt(remainder  /  i);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  i);	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  cannot  find  symbol  remainder	59	None	replace
14	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,		non-compiled	[CE]  illegal  start  of  expression	60	None	add
15	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,		non-compiled	[CE]  illegal  start  of  expression	60	None	add
16	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[2  *  i];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }		non-compiled	[CE]  illegal  start  of  expression	60	None	add
17	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[1][2];  System.arraycopy(jacobianEvaluations,  0,  criterion,  0,  cols);  }		non-compiled	[CE]  illegal  start  of  expression	60	None	add
18	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  criterion);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]  return  Math.sqrt(remainder  /  criterion);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  /  criterion);	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  cannot  find  symbol  remainder	59	None	replace
19	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  /  rows);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]  return  Math.sqrt(remainder  *  /  rows);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  /  rows);	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
20	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  msg,  criterion  /  rows);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]  return  Math.sqrt(remainder  *  msg,  criterion  /  rows);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	return  Math.sqrt(remainder  *  msg,  criterion  /  rows);	return  Math.sqrt(criterion  /  rows);  	non-compiled	[CE]  cannot  find  symbol  remainder	59	None	replace
21	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [CE]  cannot  find  symbol  remainings  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  factor);  }		non-compiled	[CE]  cannot  find  symbol  remainings	60	None	add
22	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,		non-compiled	[CE]  illegal  start  of  expression	60	None	add
23	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  }		non-compiled	[CE]  cannot  find  symbol  remainings	60	None	add
24	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  criterion,  1,  residuals.length);		non-compiled	[CE]  illegal  start  of  expression	60	None	add
25	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }  [BUGGY]  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobianEvaluations  =  new  double[remainings.length];  System.arraycopy(jacobianEvaluations,  0,  ji,  residuals.length);  }		non-compiled	[CE]  cannot  find  symbol  remainings	60	None	add
