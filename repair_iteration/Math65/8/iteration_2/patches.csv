bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  *  cols));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  *  cols));	  final    double    c    =    Math.sqrt(getCurrentSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
2	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  -  cols,  cost));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  -  cols,  cost));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  -  cols,  cost));	  final    double    c    =    Math.sqrt(getCurrentSquare()    *(rows    -    cols));    	non-compiled	[CE]  ')'  expected	58	None	replace
3	[BUG]  [BUGGY]  Double  cols  =  Math.min(getChiSquare(),  errors);  [CE]  no  suitable  method  found  for  min(double,double[])  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double  cols  =  Math.min(getChiSquare(),  errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double  cols  =  Math.min(getChiSquare(),  errors);	  Double    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double[])	112	None	replace
4	[BUG]  [BUGGY]  Double  cols  =  Math.max(getChiSquare(),  cols);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double  cols  =  Math.max(getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double  cols  =  Math.max(getChiSquare(),  cols);	  Double    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  cannot  find  symbol  c	112	None	replace
5	[BUG]  [BUGGY]  Double  cols  =  Math.min(getChiSquare(),  rows);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double  cols  =  Math.min(getChiSquare(),  rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double  cols  =  Math.min(getChiSquare(),  rows);	  Double    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  cannot  find  symbol  c	112	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.cos(getChiSquare()  *(cols  -  1));	  final    double    c    =    Math.cos(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	32	1	replace
7	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(cols  -  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getChiSquare()  *(cols  -  1));	  final    double    c    =    Math.cos(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	32	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.cos(getChiSquare()  *(rows  *  cols));	  final    double    c    =    Math.cos(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	32	1	replace
9	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  *  cols));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getChiSquare()  *(rows  *  cols));	  final    double    c    =    Math.cos(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	32	1	replace
10	[BUG]  [BUGGY]  Integer  cols  =  Math.min(getChiSquare(),  cols);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Integer  cols  =  Math.min(getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Integer  cols  =  Math.min(getChiSquare(),  cols);	  long    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  incompatible  types	66	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	compilable	  [FE]  AssertionFailedError  	24	1	replace
12	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	compilable	  [FE]  AssertionFailedError  	24	1	replace
13	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[1,  errors[0]);  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.max(errors[1,  errors[0]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[1,  errors[0]);	          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]    =    Math.max(errors[1,    errors[1]);    	non-compiled	[CE]  ']'  expected	9	None	replace
14	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[1,  errors[1]);  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.min(errors[1,  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[1,  errors[1]);	          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]    =    Math.max(errors[1,    errors[1]);    	non-compiled	[CE]  ']'  expected	9	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.cos(getChiSquare()  *(rows  /  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    /    cols));    	compilable	  [FE]  AssertionFailedError  	92	1	replace
16	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  /  cols));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getChiSquare()  *(rows  /  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    /    cols));    	compilable	  [FE]  AssertionFailedError  	92	1	replace
17	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  -  getCurrentSquare()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  -  getCurrentSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  -  getCurrentSquare()));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(cols    -    getCurrentSquare()));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
18	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  *  getCurrentSquare()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  *  getCurrentSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  *  getCurrentSquare()));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(cols    -    getCurrentSquare()));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
19	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  -  getCurrentSquare()));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  -  getCurrentSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  -  getCurrentSquare()));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(cols    -    getCurrentSquare()));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
20	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    *    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	29	None	add
21	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    *    cols));    Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));	  	non-compiled	[CE]  not  a  statement	29	None	add
22	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  col));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  col));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    *    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  col));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	29	None	add
23	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  rows));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  -  rows));	  final    double    c    =    Math.sqrt(getSquare()    /(cols    -    rows));    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
24	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getSquare()  /(rows  *  cols));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	5	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.s  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.s  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.s	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	5	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqr  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqr  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqr	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	5	None	replace
28	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  getSquare()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  getSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  -  getSquare()));	  final    double    c    =    Math.sqrt(getSquare()    *(cols    -    getSquare()));    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
29	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getSquare()  *(cols  -  getSquare()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getSquare()  *(cols  -  getSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getSquare()  *(cols  -  getSquare()));	  final    double    c    =    Math.sqrt(getSquare()    *(cols    -    getSquare()));    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
30	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  *  getSquare()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  *  getSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  *  getSquare()));	  final    double    c    =    Math.sqrt(getSquare()    *(cols    -    getSquare()));    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
31	[BUG]  [BUGGY]  int  cols  =  getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  getRowCount()  -  1;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  getRowCount()  -  1;	  int    cols    =    getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
32	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  getColumnCount()  /  1;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  getColumnCount()  /  1;	  int    cols    =    getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
33	[BUG]  [BUGGY]  final  double[][]  cols  =  getRows().clone();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getRows().clone();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRows().clone();	  final    double[][]    cols    =    getColumns().clone();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.s  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.s  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.s	  for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	86	None	replace
35	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRawConvergenceChecker();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRawConvergenceChecker();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRawConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    getRestrictionChecker();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
36	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRestrictionChecker(true);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRestrictionChecker(true);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRestrictionChecker(true);	  VectorialConvergenceChecker    convergenceChecker    =    getRestrictionChecker();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
37	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVarianceChecker();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVarianceChecker();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVarianceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    getRestrictionChecker();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
38	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRealizationChecker(true);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRealizationChecker(true);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRealizationChecker(true);	  VectorialConvergenceChecker    convergenceChecker    =    getRealizationChecker();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
39	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRealizationChecker(rows);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRealizationChecker(rows);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRealizationChecker(rows);	  VectorialConvergenceChecker    convergenceChecker    =    getRealizationChecker();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
40	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols),  sum);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols),  sum);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols),  sum);	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols),    cost);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
41	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols),  cost);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols),  cost);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols),  cost);	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols),    cost);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
42	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols),  coefficient);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols),  coefficient);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols),  coefficient);	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols),    cost);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
43	[BUG]  [BUGGY]  c  =  Math.sqrt(getSquare()  *(rows  -  cols));  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  c  =  Math.sqrt(getSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	c  =  Math.sqrt(getSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final    double    c    =    Math.sqrt(getSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol  c	99	None	replace
44	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.sqrt(getSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final    double    c    =    Math.sqrt(getSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
45	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  1));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final    double    c    =    Math.sqrt(getSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
46	[BUG]  [BUGGY]  double  cols  =  Math.min(getChiSquare(),  errors);  [CE]  no  suitable  method  found  for  min(double,double[])  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  cols  =  Math.min(getChiSquare(),  errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  cols  =  Math.min(getChiSquare(),  errors);	  double    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double[])	65	None	replace
47	[BUG]  [BUGGY]  double  cols  =  Math.min(getChiSquare(),  errors[cols]);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  cols  =  Math.min(getChiSquare(),  errors[cols]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  cols  =  Math.min(getChiSquare(),  errors[cols]);	  double    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  possible  loss  of  precision	65	None	replace
48	[BUG]  [BUGGY]  double  cols  =  Math.min(getChiSquare(),  rows);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  cols  =  Math.min(getChiSquare(),  rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  cols  =  Math.min(getChiSquare(),  rows);	  double    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  cannot  find  symbol  c	65	None	replace
49	[BUG]  [BUGGY]  double  cols  =  Math.max(getChiSquare(),  cols);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  cols  =  Math.max(getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  cols  =  Math.max(getChiSquare(),  cols);	  double    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  cannot  find  symbol  c	65	None	replace
50	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols)+  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
51	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  *  cols)+  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  *  cols)+  1);	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
52	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getSquare()  /(rows  *  cols)+  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getSquare()  /(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getSquare()  /(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
53	[BUG]  [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	static  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  static    final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
54	[BUG]  [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	static  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));	  static    final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
55	[BUG]  [BUGGY]  static  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  static  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	static  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols));	  static    final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
56	[BUG]  [BUGGY]  static  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  static  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	static  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols));	  static    final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
57	[BUG]  [BUGGY]  cols  =  Math.max(errors.length,  getChiSquare(),  cols);  [CE]  no  suitable  method  found  for  max(int,double,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(errors.length,  getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(errors.length,  getChiSquare(),  cols);	  cols    =    Math.max(cols.length,    getChiSquare(),    errors);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,int)	48	None	replace
58	[BUG]  [BUGGY]  cols  =  Math.max(errors,  getChiSquare(),  cols);  [CE]  no  suitable  method  found  for  max(double[],double,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(errors,  getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(errors,  getChiSquare(),  cols);	  cols    =    Math.max(cols.length,    getChiSquare(),    errors);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double,int)	48	None	replace
59	[BUG]  [BUGGY]  double[][]  cols  =  getCols();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getCols();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getCols();	  double[][]    cols    =    getRows();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
60	[BUG]  [BUGGY]  double[][]  cols  =  getCollections();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getCollections();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getCollections();	  double[][]    cols    =    getRows();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	3	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	3	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  ';'  expected	3	None	replace
64	[BUG]  [BUGGY]  Final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    Final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  not  a  statement	25	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	121	1	replace
66	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	121	1	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	121	1	replace
68	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	121	1	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	121	1	replace
70	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	121	1	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols  +  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols  +  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    	compilable	  [FE]  AssertionFailedError  	36	1	replace
72	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols  +  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols  +  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols  +  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    	compilable	  [FE]  AssertionFailedError  	36	1	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  rows));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    	compilable	  [FE]  AssertionFailedError  	36	1	replace
74	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  rows));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  rows));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    	compilable	  [FE]  AssertionFailedError  	36	1	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    	compilable	  [FE]  AssertionFailedError  	36	1	replace
76	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols)+  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    	compilable	  [FE]  AssertionFailedError  	36	1	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	2	None	replace
78	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	2	None	replace
79	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols.length));  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    	non-compiled	[CE]  int  cannot  be  dereferenced	38	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
81	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length  -  1));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
83	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  errors.length));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
84	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().length  -  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().length  -  1;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().length  -  1;	  final    double[][]    cols    =    getColumns().length;    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
85	[BUG]  [BUGGY]  final  double[][]  cols  =  getRows().length;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getRows().length;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRows().length;	  final    double[][]    cols    =    getColumns().length;    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
86	[BUG]  [BUGGY]  double[][]  errors  =  new  double[rows.length];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  errors  =  new  double[rows.length];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  errors  =  new  double[rows.length];	  double[][]    errors    =    new    double[cols.length];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	101	None	replace
87	[BUG]  [BUGGY]  double[][]  errors  =  new  double[cols.length  +  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  errors  =  new  double[cols.length  +  1];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  errors  =  new  double[cols.length  +  1];	  double[][]    errors    =    new    double[cols.length];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	101	None	replace
88	[BUG]  [BUGGY]  double[][]  errors  =  new  double[cols.length  -  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  errors  =  new  double[cols.length  -  1];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  errors  =  new  double[cols.length  -  1];	  double[][]    errors    =    new    double[cols.length];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	101	None	replace
89	[BUG]  [BUGGY]  double[][]  errors  =  new  double[cols.length  +  2];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  errors  =  new  double[cols.length  +  2];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  errors  =  new  double[cols.length  +  2];	  double[][]    errors    =    new    double[cols.length];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	101	None	replace
90	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols),  cost);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols),  cost);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols),  cost);	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
91	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  *  cols));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  *  cols));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
92	[BUG]  [BUGGY]  final  double[][]  cols  =  getRangeColumns().clone();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getRangeColumns().clone();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRangeColumns().clone();	  final    double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
93	[BUG]  [BUGGY]  final  double[][]  cols  =  getRemainingColumns();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getRemainingColumns();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRemainingColumns();	  final    double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
94	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getSquare()  *(rows  -  cols));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getSquare()  *(rows  -  cols));	  final    double    c    =    Math.cos(getSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
95	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getSquare()  /(cols  *  cols));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getSquare()  /(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getSquare()  /(cols  *  cols));	  final    double    c    =    Math.cos(getSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
96	[BUG]  [BUGGY]  cols  =  Math.max(errors.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(errors.length,  cols.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(errors.length,  cols.length);	  cols    =    Math.max(cols.length,    errors.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	51	None	replace
97	[BUG]  [BUGGY]  cols  =  Math.max(errors,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(errors,  cols.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(errors,  cols.length);	  cols    =    Math.max(cols.length,    errors.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	51	None	replace
98	[BUG]  [BUGGY]  cols  =  Math.max(cols,  errors.length);  [CE]  cannot  find  symbol  c  [FE]                              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  errors.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  errors.length);	  cols    =    Math.max(cols.length,    errors.length);    	non-compiled	[CE]  cannot  find  symbol  c	51	None	replace
99	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare()  /  2);  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getChiSquare()  /  2);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare()  /  2);	  cols    =    Math.max(cols,    getChiSquare());    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
100	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare()  -  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getChiSquare()  -  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare()  -  1);	  cols    =    Math.max(cols,    getChiSquare());    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
101	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare()  +  1);  [CE]  possible  loss  of  precision  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getChiSquare()  +  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare()  +  1);	  cols    =    Math.max(cols,    getChiSquare());    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
102	[BUG]  [BUGGY]  double[][]  covariances  =  getRemainings();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covariances  =  getRemainings();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covariances  =  getRemainings();	  double[][]    covariances    =    getCovariances();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
103	[BUG]  [BUGGY]  double[][]  covariances  =  getVariances();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covariances  =  getVariances();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covariances  =  getVariances();	  double[][]    covariances    =    getCovariances();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
104	[BUG]  [BUGGY]  double[][]  covariances  =  getRanges();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covariances  =  getRanges();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covariances  =  getRanges();	  double[][]    covariances    =    getCovariances();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
105	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
106	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
107	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
108	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
109	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
110	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
111	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
112	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
113	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
114	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
115	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVarArgs();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVarArgs();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVarArgs();	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
116	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVarianceParameters();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVarianceParameters();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVarianceParameters();	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
117	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(),  errors);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(),  errors);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(),  errors);	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters();    	non-compiled	[CE]  ';'  expected	15	None	replace
118	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  *  cols));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  *  cols));	  final    double    c    =    Math.sqrt(getSquare()    /(cols    *    cols));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
119	[BUG]  [BUGGY]  int  cols  =  Math.min(getChiSquare(),  errors.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  Math.min(getChiSquare(),  errors.length,  cols.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  Math.min(getChiSquare(),  errors.length,  cols.length);	  int    cols    =    Math.min(getChiSquare(),    cols,    errors.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
120	[BUG]  [BUGGY]  int  cols  =  Math.min(getChiSquare(),  rows,  cols,  errors.length);  [CE]  no  suitable  method  found  for  min(double,int,int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  Math.min(getChiSquare(),  rows,  cols,  errors.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  Math.min(getChiSquare(),  rows,  cols,  errors.length);	  int    cols    =    Math.min(getChiSquare(),    cols,    errors.length);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,int,int,int)	68	None	replace
121	[BUG]  [BUGGY]  int  cols  =  Math.min(getChiSquare(),  errors.length,  cols);  [CE]  no  suitable  method  found  for  min(double,int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  Math.min(getChiSquare(),  errors.length,  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  Math.min(getChiSquare(),  errors.length,  cols);	  int    cols    =    Math.min(getChiSquare(),    cols,    errors.length);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,int,int)	68	None	replace
122	[BUG]  [BUGGY]  int  cols  =  Math.min(getChiSquare(),  errors,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  Math.min(getChiSquare(),  errors,  cols.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  Math.min(getChiSquare(),  errors,  cols.length);	  int    cols    =    Math.min(getChiSquare(),    cols,    errors.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
123	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(cols,  rows);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(cols,  rows);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(cols,  rows);	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
124	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  errors);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  errors);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  errors);	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
125	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  errorCount);  [CE]  cannot  find  symbol  errorCount  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  errorCount);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  errorCount);	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  errorCount	17	None	replace
126	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  false);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  false);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  false);	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
127	[BUG]  [BUGGY]  final  double[][]  cols  =  getRows().toArray(cols);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getRows().toArray(cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRows().toArray(cols);	  final    double[][]    cols    =    getColumns().toArray(cols);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
128	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns(),  cols.toArray(cols);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns(),  cols.toArray(cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns(),  cols.toArray(cols);	  final    double[][]    cols    =    getColumns().toArray(cols);    	non-compiled	[CE]  ';'  expected	69	None	replace
129	[BUG]  [BUGGY]  final  double[][]  cols  =  getCols().toArray(errors);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getCols().toArray(errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getCols().toArray(errors);	  final    double[][]    cols    =    getRows().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
130	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols.length));  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	non-compiled	[CE]  int  cannot  be  dereferenced	90	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	90	1	replace
132	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  errors.length));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	90	1	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.cos(getChiSquare()  *(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	90	1	replace
134	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(cols  -  errors.length));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getChiSquare()  *(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	90	1	replace
135	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(cols    -    cols));    final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	122	None	add
136	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(cols    -    cols));    Final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));	  	non-compiled	[CE]  not  a  statement	122	None	add
137	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(cols    -    cols));    final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	122	None	add
138	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(cols    -    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	122	None	add
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  2));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  2));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	42	1	replace
140	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  2));  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  2));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  2));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	42	1	replace
141	[BUG]  [BUGGY]  cols  =  Math.max(rows,  getChiSquare(),  cols);  [CE]  no  suitable  method  found  for  max(int,double,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(rows,  getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(rows,  getChiSquare(),  cols);	  cols    =    Math.max(cols.length,    getChiSquare(),    rows);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,int)	130	None	replace
142	[BUG]  [BUGGY]  cols  =  Math.max(cols.length,  getChiSquare(),  errorCount);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols.length,  getChiSquare(),  errorCount);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols.length,  getChiSquare(),  errorCount);	  cols    =    Math.max(cols.length,    getChiSquare(),    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	130	None	replace
143	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  +  1]);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  +  1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().toArray(new  double[cols.size()  +  1]);	  double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
144	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[cols.length  ]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[cols.length  ]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().toArray(new  double[cols.length  ]);	  double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
145	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  *  2]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  *  2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().toArray(new  double[cols.size()  *  2]);	  double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
146	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	35	None	add
147	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  	non-compiled	[CE]  not  a  statement	35	None	add
148	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	35	None	add
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
150	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  +  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  +  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
152	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  +  1));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  +  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  +  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  2));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  2));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
154	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  2));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  2));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  2));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
156	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  1));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
157	[BUG]  [BUGGY]  Math.sqrt(errors[i][i])*  c);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Math.sqrt(errors[i][i])*  c);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[i][i])*  c);	  Math.sqrt(errors[i][i])*    cost);    	non-compiled	[CE]  not  a  statement	128	None	replace
158	[BUG]  [BUGGY]  Math.sqrt(errors[i][i])*  cols);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Math.sqrt(errors[i][i])*  cols);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[i][i])*  cols);	  Math.sqrt(errors[i][i])*    cost);    	non-compiled	[CE]  not  a  statement	128	None	replace
159	[BUG]  [BUGGY]  Math.sqrt(errors[0][i])*  cost);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Math.sqrt(errors[0][i])*  cost);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[0][i])*  cost);	  Math.sqrt(errors[i][i])*    cost);    	non-compiled	[CE]  not  a  statement	128	None	replace
160	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.length  ]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.length  ]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(new  double[cols.length  ]);	  final    double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
161	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  +  1]);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  +  1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  +  1]);	  final    double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
162	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  *  2]);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  *  2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  *  2]);	  final    double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols)+    1);    	compilable	  [FE]  AssertionFailedError  	95	1	replace
164	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols)+  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols)+    1);    	compilable	  [FE]  AssertionFailedError  	95	1	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols)+    1);    	compilable	  [FE]  AssertionFailedError  	95	1	replace
166	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols)+  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols)+    1);    	compilable	  [FE]  AssertionFailedError  	95	1	replace
167	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(rows);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(rows);	  final    double[][]    cols    =    getColumns().toArray(columns);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
168	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol  c	72	None	replace
169	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols)+    1);    final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	94	None	add
170	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols)+    1);    final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1));	  	non-compiled	[CE]  ';'  expected	94	None	add
171	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols)+    1);    final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols)+  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	94	None	add
172	[BUG]  [BUGGY]  final  double[][]  cols  =  getCols();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getCols();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getCols();	  final    double[][]    cols    =    getRows();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
173	[BUG]  [BUGGY]  final  double[][]  cols  =  getCollections();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getCollections();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getCollections();	  final    double[][]    cols    =    getRows();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
174	[BUG]  [BUGGY]  int  cols  =  getRowCount();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  getRowCount();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  getRowCount();	  int    cols    =    getColumnCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  +(cols  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    *    cols));    	compilable	  [FE]  AssertionFailedError  	30	1	replace
176	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  *  cols));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  +(cols  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    *    cols));    	compilable	  [FE]  AssertionFailedError  	30	1	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
178	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
180	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
181	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
182	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
184	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
185	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);	  	non-compiled	[CE]  ']'  expected	7	None	add
186	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().length;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns().length;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().length;	  double[][]    cols    =    getColumns()    /    2;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
187	[BUG]  [BUGGY]  double[][]  cols  =  getColumns()  *  2;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns()  *  2;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns()  *  2;	  double[][]    cols    =    getColumns()    /    2;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
188	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().length  /  2;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns().length  /  2;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().length  /  2;	  double[][]    cols    =    getColumns()    /    2;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
189	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[0],  errors[2]);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.min(errors[0],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[0],  errors[2]);	  errors[0]    =    Math.min(errors[1],    errors[2]);    	non-compiled	[CE]  cannot  find  symbol  c	96	None	replace
190	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[2]  -  1);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[2]  -  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[1],  errors[2]  -  1);	  errors[0]    =    Math.min(errors[1],    errors[2]);    	non-compiled	[CE]  cannot  find  symbol  c	96	None	replace
191	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    +(cols    -    cols));    final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	27	None	add
192	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    +(cols    -    cols));    Final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));	  	non-compiled	[CE]  not  a  statement	27	None	add
193	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    +(cols    -    cols));    final  double  c  =  Math.sqrt(getChiSquare()  +(cols  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	27	None	add
194	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    /    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	110	None	add
195	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    /    cols));    Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));	  	non-compiled	[CE]  not  a  statement	110	None	add
196	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    /    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	110	None	add
197	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  /  2  +  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  getColumnCount()  /  2  +  1;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  getColumnCount()  /  2  +  1;	  int    cols    =    getColumnCount()    /    2;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
198	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  *  2;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  getColumnCount()  *  2;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  getColumnCount()  *  2;	  int    cols    =    getColumnCount()    /    2;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
199	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
200	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
201	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
202	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
203	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
204	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
205	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
206	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
207	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
208	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  Double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  Double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  Double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	1	None	replace
210	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
211	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
212	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
213	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
214	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
215	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
216	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
217	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
218	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
219	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
220	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  *  getCurrentSquare()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  *  getCurrentSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  *  getCurrentSquare()));	  final    double    c    =    Math.sqrt(getCurrentSquare()    *(cols    -    getCurrentSquare()));    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
221	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  /  getCurrentSquare()));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  /  getCurrentSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  /  getCurrentSquare()));	  final    double    c    =    Math.sqrt(getCurrentSquare()    *(cols    -    getCurrentSquare()));    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
222	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols,  cost));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols,  cost));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols,  cost));	  final    double    c    =    Math.sqrt(getSquare()    *(rows    -    cols));    	non-compiled	[CE]  ')'  expected	79	None	replace
223	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols),  cost);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols),  cost);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols),  cost);	  final    double    c    =    Math.sqrt(getSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
224	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(this.errors,  errors);  [CE]  cannot  find  symbol  errors  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(this.errors,  errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(this.errors,  errors);	  final    double[][]    cols    =    getColumns().toArray(this.errors);    	non-compiled	[CE]  cannot  find  symbol  errors	116	None	replace
225	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(this.errors,  rows);  [CE]  cannot  find  symbol  errors  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(this.errors,  rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(this.errors,  rows);	  final    double[][]    cols    =    getColumns().toArray(this.errors);    	non-compiled	[CE]  cannot  find  symbol  errors	116	None	replace
226	[BUG]  [BUGGY]  cols  =  Math.min(cols,  getChiSquare(),  errors);  [CE]  no  suitable  method  found  for  min(int,double,double[])  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols,  getChiSquare(),  errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols,  getChiSquare(),  errors);	  cols    =    Math.min(cols.length,    getChiSquare(),    rows);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double,double[])	53	None	replace
227	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  errorCount);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  errorCount);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare(),  errorCount);	  cols    =    Math.min(cols.length,    getChiSquare(),    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
228	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  errors[rows]);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  errors[rows]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare(),  errors[rows]);	  cols    =    Math.min(cols.length,    getChiSquare(),    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
229	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  -  cols));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(cols    -    cols));    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
230	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getValue()  /(cols  -  cols));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getValue()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getValue()  /(cols  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(cols    -    cols));    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
231	[BUG]  [BUGGY]  cols  =  Math.min(errors.length,  getChiSquare(),  cols);  [CE]  no  suitable  method  found  for  min(int,double,int)  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(errors.length,  getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(errors.length,  getChiSquare(),  cols);	  cols    =    Math.min(cols.length,    getChiSquare(),    errors);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double,int)	52	None	replace
232	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  errors,  null);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  errors,  null);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare(),  errors,  null);	  cols    =    Math.min(cols.length,    getChiSquare(),    errors);    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None	replace
233	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare()  /  1);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare()  /  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare()  /  1);	  cols    =    Math.min(cols.length,    getChiSquare()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
234	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare()  +  1);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare()  +  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare()  +  1);	  cols    =    Math.min(cols.length,    getChiSquare()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
235	[BUG]  [BUGGY]  cols  =  Math.max(0,  getChiSquare(),  cols);  [CE]  no  suitable  method  found  for  max(int,double,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(0,  getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(0,  getChiSquare(),  cols);	  cols    =    Math.max(cols,    getChiSquare(),    cols);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,int)	82	None	replace
236	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[3]);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[1],  errors[3]);	  errors[0]    =    Math.min(errors[1],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	21	None	replace
237	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getValue()  *(rows  *  cols));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getValue()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getValue()  *(rows  *  cols));	  final    double    c    =    Math.sqrt(getValue()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
238	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols),  cost);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols),  cost);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols),  cost);	  final    double    c    =    Math.sqrt(getValue()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
239	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols,  cost));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols,  cost));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols,  cost));	  final    double    c    =    Math.sqrt(getValue()    /(rows    *    cols));    	non-compiled	[CE]  ')'  expected	57	None	replace
240	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  cost));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  cost));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  cost));	  final    double    c    =    Math.sqrt(getSquare()    *(rows    *    cols));    	non-compiled	[CE]  ')'  expected	76	None	replace
241	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[0],  errors[1]  +  1]);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.max(errors[0],  errors[1]  +  1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[0],  errors[1]  +  1]);	  errors[0]    =    Math.max(errors[0],    errors[1]);    	non-compiled	[CE]  ')'  expected	19	None	replace
242	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[1],  errors[0]);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.max(errors[1],  errors[0]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[1],  errors[0]);	  errors[0]    =    Math.max(errors[0],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	19	None	replace
243	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[0],  errors[1]  /  2);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.max(errors[0],  errors[1]  /  2);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[0],  errors[1]  /  2);	  errors[0]    =    Math.max(errors[0],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	19	None	replace
244	[BUG]  [BUGGY]  double[][]  cols  =  getFieldColumns();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getFieldColumns();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getFieldColumns();	  double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
245	[BUG]  [BUGGY]  double[][]  cols  =  getRemainingColumns();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getRemainingColumns();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getRemainingColumns();	  double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
246	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	89	None	add
247	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  mistakes.length));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  mistakes.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  mistakes.length));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	89	None	add
248	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));	  	non-compiled	[CE]  not  a  statement	89	None	add
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  rows));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    Final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	74	1	replace
250	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  rows));  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  rows));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    Final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	74	1	replace
251	[BUG]  [BUGGY]  cols  =  Math.min(cols,  getChiSquare()  /  2);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols,  getChiSquare()  /  2);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols,  getChiSquare()  /  2);	  cols    =    Math.min(cols,    getChiSquare());    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
252	[BUG]  [BUGGY]  cols  =  Math.min(cols,  getChiSquare()  -  1);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols,  getChiSquare()  -  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols,  getChiSquare()  -  1);	  cols    =    Math.min(cols,    getChiSquare());    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
253	[BUG]  [BUGGY]  cols  =  Math.min(cols,  getChiSquare()  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols,  getChiSquare()  +  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols,  getChiSquare()  +  1);	  cols    =    Math.min(cols,    getChiSquare());    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
254	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  /(rows  *  cols));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getCurrentSquare()  /(rows  *  cols));	  final    double    c    =    Math.cos(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
255	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  *(rows  -  cols));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getCurrentSquare()  *(rows  -  cols));	  final    double    c    =    Math.cos(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
256	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  *(cols  -  getCurrentSquare()));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  *(cols  -  getCurrentSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getCurrentSquare()  *(cols  -  getCurrentSquare()));	  final    double    c    =    Math.cos(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
257	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  /(cols  *  cols));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  /(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getCurrentSquare()  /(cols  *  cols));	  final    double    c    =    Math.cos(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
258	[BUG]  [BUGGY]  [][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  [][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
259	[BUG]  [BUGGY]  cols[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	93	None	replace
260	[BUG]  [BUGGY]  double[][]  cols  =  getRows().toArray(cols);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getRows().toArray(cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getRows().toArray(cols);	  double[][]    cols    =    getColumns().toArray(cols);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
261	[BUG]  [BUGGY]  Double[][]  cols  =  getColumns().toArray(cols);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double[][]  cols  =  getColumns().toArray(cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double[][]  cols  =  getColumns().toArray(cols);	  double[][]    cols    =    getColumns().toArray(cols);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
262	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getSquare(),  rows);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getSquare(),  rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getSquare(),  rows);	  cols    =    Math.max(cols,    getChiSquare(),    rows);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
263	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  rows);  [CE]  no  suitable  method  found  for  max(int,double,double[],int)  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare(),  errors,  rows);	  cols    =    Math.max(cols,    getChiSquare(),    rows);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double[],int)	83	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *(rows  /  cols)));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *(rows  /  cols)));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    /    cols));    	compilable	  [FE]  AssertionFailedError  	111	1	replace
265	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *(rows  /  cols)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *(rows  /  cols)));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *(rows  /  cols)));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    /    cols));    	compilable	  [FE]  AssertionFailedError  	111	1	replace
266	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	37	None	add
267	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  mistakes.length));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  mistakes.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  mistakes.length));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	37	None	add
268	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));	  	non-compiled	[CE]  not  a  statement	37	None	add
269	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	37	None	add
270	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  cost);  [CE]  no  suitable  method  found  for  max(int,double,double[],double)  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  cost);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare(),  errors,  cost);	  cols    =    Math.max(cols,    getChiSquare(),    errors);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double[],double)	50	None	replace
271	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  maxIterations);  [CE]  no  suitable  method  found  for  max(int,double,double[],int)  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  maxIterations);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare(),  errors,  maxIterations);	  cols    =    Math.max(cols,    getChiSquare(),    errors);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double[],int)	50	None	replace
272	[BUG]  [BUGGY]  cols  =  Math.max(0,  getChiSquare(),  errors);  [CE]  no  suitable  method  found  for  max(int,double,double[])  [FE]                            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(0,  getChiSquare(),  errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(0,  getChiSquare(),  errors);	  cols    =    Math.max(cols,    getChiSquare(),    errors);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double[])	50	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  '.class'  expected	4	None	replace
274	[BUG]  [BUGGY]  final  double[][]  cols  =  getRows(),  errors.toArray(columns);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getRows(),  errors.toArray(columns);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRows(),  errors.toArray(columns);	  final    double[][]    cols    =    getColumns(),    errors.toArray(columns);    	non-compiled	[CE]  ';'  expected	108	None	replace
275	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns(),  rows.toArray(columns);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns(),  rows.toArray(columns);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns(),  rows.toArray(columns);	  final    double[][]    cols    =    getColumns(),    errors.toArray(columns);    	non-compiled	[CE]  ';'  expected	108	None	replace
276	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns(),  errors.toArray(new  double[cols.size()  ]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns(),  errors.toArray(new  double[cols.size()  ]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns(),  errors.toArray(new  double[cols.size()  ]);	  final    double[][]    cols    =    getColumns(),    errors.toArray(columns);    	non-compiled	[CE]  ';'  expected	108	None	replace
277	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[0],  errors[1]  +  1]);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.min(errors[0],  errors[1]  +  1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[0],  errors[1]  +  1]);	  errors[0]    =    Math.min(errors[0],    errors[1]);    	non-compiled	[CE]  ')'  expected	22	None	replace
278	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[0],  errors[1]  -  1);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.min(errors[0],  errors[1]  -  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[0],  errors[1]  -  1);	  errors[0]    =    Math.min(errors[0],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
279	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[0]);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[0]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[1],  errors[0]);	  errors[0]    =    Math.min(errors[0],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	85	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math	  for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  ';'  expected	85	None	replace
282	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[1,  cols);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.max(errors[1,  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[1,  cols);	  errors[0]    =    Math.max(errors[1,    errors[1]);    	non-compiled	[CE]  ']'  expected	124	None	replace
283	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[0,  errors[1]);  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.max(errors[0,  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[0,  errors[1]);	  errors[0]    =    Math.max(errors[1,    errors[1]);    	non-compiled	[CE]  ']'  expected	124	None	replace
284	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.cos(getChiSquare()    *(rows    -    cols));    final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	31	None	add
285	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.cos(getChiSquare()  *(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.cos(getChiSquare()  *(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.cos(getChiSquare()    *(rows    -    cols));    final  double  c  =  Math.cos(getChiSquare()  *(cols  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	31	None	add
286	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  Final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  Final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.cos(getChiSquare()    *(rows    -    cols));    Final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));	  	non-compiled	[CE]  not  a  statement	31	None	add
287	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  errorCount));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  errorCount));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  errorCount));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols,    cost));    	non-compiled	[CE]  ')'  expected	78	None	replace
288	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  cols));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  cols));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols,    cost));    	non-compiled	[CE]  ')'  expected	78	None	replace
289	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  value));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  value));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols,  value));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols,    cost));    	non-compiled	[CE]  ')'  expected	78	None	replace
290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  +(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    +(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	28	1	replace
291	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  -  cols));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  +(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    +(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	28	1	replace
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    +(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	28	1	replace
293	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    +(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	28	1	replace
294	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    /    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	91	None	add
295	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    /    cols));    Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));	  	non-compiled	[CE]  not  a  statement	91	None	add
296	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  cols));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    final    double    c    =    Math.sqrt(getSquare()    *(cols    -    cols));    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
297	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  2));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  2));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  -  2));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    final    double    c    =    Math.sqrt(getSquare()    *(cols    -    cols));    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
298	[BUG]  [BUGGY]  double[][]  cols  =  getColumns()  *  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns()  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns()  *  DEFAULT_MAX_ITERATIONS;	  double[][]    cols    =    getColumns()    /    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
299	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().length  /  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns().length  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().length  /  DEFAULT_MAX_ITERATIONS;	  double[][]    cols    =    getColumns()    /    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
300	[BUG]  [BUGGY]  double[][]  cols  =  getRows()  /  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getRows()  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getRows()  /  DEFAULT_MAX_ITERATIONS;	  double[][]    cols    =    getColumns()    /    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
301	[BUG]  [BUGGY]  double[][]  cols  =  getColumns()  /  DEFAULT_MAX_ITERATIONS  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns()  /  DEFAULT_MAX_ITERATIONS  +  1;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns()  /  DEFAULT_MAX_ITERATIONS  +  1;	  double[][]    cols    =    getColumns()    /    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
302	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	33	None	add
303	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  2));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  2));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  2));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	33	None	add
304	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));	  	non-compiled	[CE]  not  a  statement	33	None	add
305	[BUG]  [BUGGY]  Math.sqrt(errors[i][i])*  c;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Math.sqrt(errors[i][i])*  c;  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[i][i])*  c;	  Math.sqrt(errors[i][i])*    cost;    	non-compiled	[CE]  not  a  statement	127	None	replace
306	[BUG]  [BUGGY]  Math.sqrt(errors[i][i])*  cols;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Math.sqrt(errors[i][i])*  cols;  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[i][i])*  cols;	  Math.sqrt(errors[i][i])*    cost;    	non-compiled	[CE]  not  a  statement	127	None	replace
307	[BUG]  [BUGGY]  Math.sqrt(errors[0][i])*  cost;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Math.sqrt(errors[0][i])*  cost;  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[0][i])*  cost;	  Math.sqrt(errors[i][i])*    cost;    	non-compiled	[CE]  not  a  statement	127	None	replace
308	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	120	None	add
309	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  Double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  Double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    Double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	120	None	add
310	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  int  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  int  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    int  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	120	None	add
311	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	120	None	add
312	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[0],  errors[2]);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.max(errors[0],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[0],  errors[2]);	  errors[0]    =    Math.max(errors[1],    errors[2]);    	non-compiled	[CE]  cannot  find  symbol  c	20	None	replace
313	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getRemainings();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getRemainings();	  double[][]    covar    =    getCovariances();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
314	[BUG]  [BUGGY]  double[][]  covar  =  getRawCovariances();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getRawCovariances();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getRawCovariances();	  double[][]    covar    =    getCovariances();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
315	[BUG]  [BUGGY]  double[][]  covar  =  getColumns();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getColumns();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getColumns();	  double[][]    covar    =    getCovariances();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
317	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
319	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.min(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
320	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);	  	non-compiled	[CE]  ']'  expected	118	None	add
321	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.max(errors[1,  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	non-compiled	[CE]  ']'  expected	118	None	add
322	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	118	1	add
323	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	118	1	add
324	[BUG]  [BUGGY]  errors[1]  =  Math.max(errors[0],  errors[1]);  [CE]  cannot  find  symbol  c  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[1]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[1]  =  Math.max(errors[0],  errors[1]);	          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]    =    Math.max(errors[0],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	119	None	replace
325	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns(),  rows.length;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns(),  rows.length;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns(),  rows.length;	  final    double[][]    cols    =    getColumns().length;    	non-compiled	[CE]  ';'  expected	104	None	replace
326	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().length  +  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().length  +  1;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().length  +  1;	  final    double[][]    cols    =    getColumns().length;    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
328	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
329	[BUG]  [BUGGY]  null  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  null  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	null  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  not  a  statement	23	None	replace
330	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  2));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  2));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  2));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols,    cost));    	non-compiled	[CE]  ')'  expected	78	None	replace
331	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  0));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  0));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  0));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols,    cost));    	non-compiled	[CE]  ')'  expected	78	None	replace
332	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  1));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  1));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols,    cost));    	non-compiled	[CE]  ')'  expected	78	None	replace
333	[BUG]  [BUGGY]  double[][]  cols  =  getRangeColumns().length;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getRangeColumns().length;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getRangeColumns().length;	  double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
334	[BUG]  [BUGGY]  double[][]  cols  =  getEmptyColumns();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getEmptyColumns();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getEmptyColumns();	  double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
335	[BUG]  [BUGGY]  cols  =  Math.max(errors,  getChiSquare(),  rows);  [CE]  no  suitable  method  found  for  max(double[],double,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(errors,  getChiSquare(),  rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(errors,  getChiSquare(),  rows);	  cols    =    Math.max(cols,    getChiSquare(),    rows);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double,int)	83	None	replace
336	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getCurrentSquare(),  rows);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getCurrentSquare(),  rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getCurrentSquare(),  rows);	  cols    =    Math.max(cols,    getChiSquare(),    rows);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
337	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
338	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[3],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
339	[BUG]  [BUGGY]  null  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  null  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	null  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    	non-compiled	[CE]  not  a  statement	26	None	replace
340	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(cols  *  cols)+  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(cols  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(cols  *  cols)+  1);	  final    double    c    =    Math.sqrt(getSquare()    /(cols    *    cols));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
341	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  final  double  c  =  Math.sqrt(getSquare()  *(rows  /  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  final  double  c  =  Math.sqrt(getSquare()  *(rows  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    /    cols));    final  double  c  =  Math.sqrt(getSquare()  *(rows  /  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	110	None	add
342	[BUG]  [BUGGY]  final  double[][]  cols  =  getRangeColumns().length;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getRangeColumns().length;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRangeColumns().length;	  final    double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
343	[BUG]  [BUGGY]  final  double[][]  cols  =  getDoubleColumns();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getDoubleColumns();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getDoubleColumns();	  final    double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
344	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols)+  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getValue()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
345	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  cols);  [CE]  no  suitable  method  found  for  max(int,double,double[],int)  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare(),  errors,  cols);	  cols    =    Math.max(cols,    getChiSquare(),    errors);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double[],int)	50	None	replace
346	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  0);  [CE]  no  suitable  method  found  for  max(int,double,double[],int)  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  0);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare(),  errors,  0);	  cols    =    Math.max(cols,    getChiSquare(),    errors);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double[],int)	50	None	replace
347	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  1);  [CE]  no  suitable  method  found  for  max(int,double,double[],int)  [FE]                            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors,  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare(),  errors,  1);	  cols    =    Math.max(cols,    getChiSquare(),    errors);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double[],int)	50	None	replace
348	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  final  double  c  =  Math.sqrt(getSquare()  *(cols  /  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  final  double  c  =  Math.sqrt(getSquare()  *(cols  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    /    cols));    final  double  c  =  Math.sqrt(getSquare()  *(cols  /  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	91	None	add
349	[BUG]  [BUGGY]  double  cols  =  Math.min(getChiSquare(),  cols  +  1);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  cols  =  Math.min(getChiSquare(),  cols  +  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  cols  =  Math.min(getChiSquare(),  cols  +  1);	  double    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  cannot  find  symbol  c	65	None	replace
350	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(errors);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances().toArray(errors);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances().toArray(errors);	  double[][]    covar    =    getCovariances();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
351	[BUG]  [BUGGY]  double[][]  covar  =  getVariances();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getVariances();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getVariances();	  double[][]    covar    =    getCovariances();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
352	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  Final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  Final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols)+    1);    Final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);	  	non-compiled	[CE]  not  a  statement	94	None	add
353	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  -  rows));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  -  rows));	  final    double    c    =    Math.sqrt(getSquare()    /(cols    -    rows));    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
354	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  -  1));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  -  1));	  final    double    c    =    Math.sqrt(getSquare()    /(cols    -    rows));    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
355	[BUG]  [BUGGY]  null  c  =  Math.sqrt(getSquare()  /(rows  *  cols));  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  null  c  =  Math.sqrt(getSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	null  c  =  Math.sqrt(getSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  not  a  statement	105	None	replace
356	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.sqrt(getSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[1]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[1]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
358	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[1]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[1]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[1]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
360	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.min(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.min(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
362	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.min(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.min(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.min(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
363	[BUG]  [BUGGY]  final  double[][]  cols  =  getCollections().toArray(errors);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getCollections().toArray(errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getCollections().toArray(errors);	  final    double[][]    cols    =    getRows().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
364	[BUG]  [BUGGY]  final  double[][]  cols  =  getErrors().toArray(errors);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getErrors().toArray(errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getErrors().toArray(errors);	  final    double[][]    cols    =    getRows().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
365	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  final  double  c  =  Math.sqrt(getSquare()  +(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  final  double  c  =  Math.sqrt(getSquare()  +(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    +(cols    -    cols));    final  double  c  =  Math.sqrt(getSquare()  +(cols  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	27	None	add
366	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[2]  +  1);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[2]  +  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[1],  errors[2]  +  1);	  errors[0]    =    Math.min(errors[1],    errors[2]);    	non-compiled	[CE]  cannot  find  symbol  c	96	None	replace
367	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorParameters();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorParameters();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorParameters();	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
368	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVarParameters();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVarParameters();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVarParameters();	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
369	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols)+  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
370	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[0],  errors[1]  -  1);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.max(errors[0],  errors[1]  -  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[0],  errors[1]  -  1);	  errors[0]    =    Math.max(errors[0],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	19	None	replace
371	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  /  getSquare()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  /  getSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  /  getSquare()));	  final    double    c    =    Math.sqrt(getSquare()    *(cols    -    getSquare()));    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
372	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols)+  2);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols)+  2);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols)+  2);	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
373	[BUG]  [BUGGY]  Double[][]  cols  =  getColumns();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double[][]  cols  =  getColumns();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double[][]  cols  =  getColumns();	  double[][]    cols    =    getRows();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
374	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(co  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(co  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(co	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  ')'  expected	4	None	replace
375	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.cohort  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.cohort  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.cohort	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	93	None	replace
376	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.coordinate  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.coordinate  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.coordinate	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	93	None	replace
377	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ')'  expected	93	None	replace
378	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  final  double  c  =  Math.sqrt(getSquare()  /(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  final  double  c  =  Math.sqrt(getSquare()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(cols    -    cols));    final  double  c  =  Math.sqrt(getSquare()  /(cols  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	122	None	add
379	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	2	None	replace
380	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	3	None	replace
381	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  0);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  0);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  0);	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
382	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(errors,  cols);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(errors,  cols);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(errors,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
383	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	5	None	replace
384	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  errors.length));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    final  double  c  =  Math.sqrt(getSquare()  *(cols  -  errors.length));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	89	None	add
385	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[1],  errors[3]);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.max(errors[1],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[1],  errors[3]);	  errors[0]    =    Math.max(errors[1],    errors[2]);    	non-compiled	[CE]  cannot  find  symbol  c	20	None	replace
386	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().toArray(errors);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns().toArray(errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().toArray(errors);	  double[][]    cols    =    getColumns().toArray(cols);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
387	[BUG]  [BUGGY]  double[][]  cols  =  getColumns()  /  DEFAULT_MAX_ITERATIONS  *  2;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns()  /  DEFAULT_MAX_ITERATIONS  *  2;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns()  /  DEFAULT_MAX_ITERATIONS  *  2;	  double[][]    cols    =    getColumns()    /    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
388	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(this.cols  -  getCurrentSquare()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(this.cols  -  getCurrentSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  /(this.cols  -  getCurrentSquare()));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(cols    -    getCurrentSquare()));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
389	[BUG]  [BUGGY]  cols  =  Math.min(cols,  getChiSquare(),  rows);  [CE]  no  suitable  method  found  for  min(int,double,int)  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols,  getChiSquare(),  rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols,  getChiSquare(),  rows);	  cols    =    Math.min(cols.length,    getChiSquare(),    rows);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double,int)	53	None	replace
390	[BUG]  [BUGGY]  cols  =  Math.min(cols,  getChiSquare(),  cols);  [CE]  no  suitable  method  found  for  min(int,double,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols,  getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols,  getChiSquare(),  cols);	  cols    =    Math.min(cols.length,    getChiSquare(),    rows);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double,int)	53	None	replace
391	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  -  1]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  -  1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  -  1]);	  final    double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
392	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.length  -  1]);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.length  -  1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(new  double[cols.length  -  1]);	  final    double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
393	[BUG]  [BUGGY]  Math.sqrt(errors[i][i])*  coefficient;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Math.sqrt(errors[i][i])*  coefficient;  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[i][i])*  coefficient;	  Math.sqrt(errors[i][i])*    cost;    	non-compiled	[CE]  not  a  statement	127	None	replace
394	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  final  double  c  =  Math.sqrt(getSquare()  *(cols  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  final  double  c  =  Math.sqrt(getSquare()  *(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    *    cols));    final  double  c  =  Math.sqrt(getSquare()  *(cols  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	29	None	add
395	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  errors.length));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
396	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getSquare()  /(cols  -  1));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getSquare()  /(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getSquare()  /(cols  -  1));	  final    double    c    =    Math.cos(getSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
397	[BUG]  [BUGGY]  int  cols  =  Math.min(getChiSquare(),  errors,  errors.length);  [CE]  no  suitable  method  found  for  min(double,double[],int)  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  Math.min(getChiSquare(),  errors,  errors.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  Math.min(getChiSquare(),  errors,  errors.length);	  int    cols    =    Math.min(getChiSquare(),    cols,    errors.length);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double[],int)	68	None	replace
398	[BUG]  [BUGGY]  int  cols  =  Math.min(getChiSquare(),  rows,  errors.length);  [CE]  no  suitable  method  found  for  min(double,int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  Math.min(getChiSquare(),  rows,  errors.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  Math.min(getChiSquare(),  rows,  errors.length);	  int    cols    =    Math.min(getChiSquare(),    cols,    errors.length);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,int,int)	68	None	replace
399	[BUG]  [BUGGY]  final  double[][]  cols  =  getColls();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColls();  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColls();	  final    double[][]    cols    =    getRows();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
400	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  errors.length));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    final  double  c  =  Math.sqrt(getSquare()  *(rows  -  errors.length));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	37	None	add
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	90	1	replace
402	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  errors.length));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	90	1	replace
403	[BUG]  [BUGGY]  final  int  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  int  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  int  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
404	[BUG]  [BUGGY]  double[][]  covariances  =  getCovariances(rows);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covariances  =  getCovariances(rows);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covariances  =  getCovariances(rows);	  double[][]    covariances    =    getCovariances();    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	126	None	replace
405	[BUG]  [BUGGY]  double[][]  covariances  =  getCovariances().toArray(errors);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covariances  =  getCovariances().toArray(errors);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covariances  =  getCovariances().toArray(errors);	  double[][]    covariances    =    getCovariances();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
406	[BUG]  [BUGGY]  Double[][]  covariances  =  getCovariances();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double[][]  covariances  =  getCovariances();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double[][]  covariances  =  getCovariances();	  double[][]    covariances    =    getCovariances();    	non-compiled	[CE]  incompatible  types	126	None	replace
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	72	1	replace
408	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	72	1	replace
409	[BUG]  [BUGGY]  null  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  null  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	null  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  not  a  statement	72	None	replace
410	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  *  rows));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  *  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  *  rows));	  final    double    c    =    Math.sqrt(getSquare()    *(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
411	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  /(cols  -  1));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  /(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getCurrentSquare()  /(cols  -  1));	  final    double    c    =    Math.cos(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
412	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	35	None	add
413	[BUG]  [BUGGY]  Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    Final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  not  a  statement	74	None	replace
414	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  *  cols)+  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  *  cols)+  1);	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(cols    *    cols));    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
416	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  errors.length));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
418	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  errors.length));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
419	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  -  1]);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  -  1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().toArray(new  double[cols.size()  -  1]);	  double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
420	[BUG]  [BUGGY]  Double[][]  cols  =  getColumns().toArray(new  double[cols.size()  ]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double[][]  cols  =  getColumns().toArray(new  double[cols.size()  ]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double[][]  cols  =  getColumns().toArray(new  double[cols.size()  ]);	  double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
421	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  -  1));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  -  1));	  final    double    c    =    Math.sqrt(getCurrentSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
422	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
423	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
424	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
425	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	121	1	replace
427	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	121	1	replace
428	[BUG]  [BUGGY]  Double  cols  =  Math.min(getChiSquare(),  cols  +  1);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double  cols  =  Math.min(getChiSquare(),  cols  +  1);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double  cols  =  Math.min(getChiSquare(),  cols  +  1);	  Double    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  cannot  find  symbol  c	112	None	replace
429	[BUG]  [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	static  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);	  static    final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
430	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRestrictionChecker(rows);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRestrictionChecker(rows);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRestrictionChecker(rows);	  VectorialConvergenceChecker    convergenceChecker    =    getRestrictionChecker();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
431	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(colrows);  [CE]  cannot  find  symbol  colrows  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(colrows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(colrows);	  final    double[][]    cols    =    getColumns().toArray(columns);    	non-compiled	[CE]  cannot  find  symbol  colrows	103	None	replace
432	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.cos(getSquare()  *(rows  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.cos(getSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.cos(getChiSquare()    *(rows    -    cols));    final  double  c  =  Math.cos(getSquare()  *(rows  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	31	None	add
433	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(this.errors,  columns);  [CE]  cannot  find  symbol  errors  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(this.errors,  columns);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(this.errors,  columns);	  final    double[][]    cols    =    getColumns().toArray(this.errors);    	non-compiled	[CE]  cannot  find  symbol  errors	116	None	replace
434	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  -  rows));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  -  rows));	  final    double    c    =    Math.sqrt(getCurrentSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
435	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  '.class'  expected	47	None	replace
436	[BUG]  [BUGGY]  cols  =  Math.max(cols.length,  getChiSquare(),  rows,  cols);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols.length,  getChiSquare(),  rows,  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols.length,  getChiSquare(),  rows,  cols);	  cols    =    Math.max(cols.length,    getChiSquare(),    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	130	None	replace
437	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  <identifier>  expected	2	None	replace
438	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i	  for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	125	None	replace
439	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare()  -  1,  rows);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare()  -  1,  rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare()  -  1,  rows);	  cols    =    Math.min(cols.length,    getChiSquare()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
440	[BUG]  [BUGGY]  final  double  c  =  Math.exp(getSquare()  *(cols  -  getSquare()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.exp(getSquare()  *(cols  -  getSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.exp(getSquare()  *(cols  -  getSquare()));	  final    double    c    =    Math.sqrt(getSquare()    *(cols    -    getSquare()));    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
441	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math	  for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  ';'  expected	85	None	replace
442	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  /  2  +  rows;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  getColumnCount()  /  2  +  rows;  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  getColumnCount()  /  2  +  rows;	  int    cols    =    getColumnCount()    /    2;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
443	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  *(cols  -  cols));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  *(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getCurrentSquare()  *(cols  -  cols));	  final    double    c    =    Math.cos(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	compilable	  [FE]  AssertionFailedError  	24	1	replace
445	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	compilable	  [FE]  AssertionFailedError  	24	1	replace
446	[BUG]  [BUGGY]  int  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
447	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquareRemainder()  /(cols  -  getCurrentSquare()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquareRemainder()  /(cols  -  getCurrentSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquareRemainder()  /(cols  -  getCurrentSquare()));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(cols    -    getCurrentSquare()));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
448	[BUG]  [BUGGY]  double[][]  covariances  =  getCovariances().toArray(new  double[cols.size()  ]);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covariances  =  getCovariances().toArray(new  double[cols.size()  ]);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covariances  =  getCovariances().toArray(new  double[cols.size()  ]);	  double[][]    covariances    =    getCovariances();    	non-compiled	[CE]  int  cannot  be  dereferenced	126	None	replace
449	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  rows,  cols);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  rows,  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare(),  rows,  cols);	  cols    =    Math.min(cols.length,    getChiSquare(),    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
450	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  columns);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  columns);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare(),  columns);	  cols    =    Math.min(cols.length,    getChiSquare(),    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
451	[BUG]  [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	static  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    errors.length));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
452	[BUG]  [BUGGY]  int  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getChiSquare()    *(rows    *    cols));    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
453	[BUG]  [BUGGY]  Math.sqrt(errors[i][i])*  C;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Math.sqrt(errors[i][i])*  C;  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[i][i])*  C;	  Math.sqrt(errors[i][i])*    cost;    	non-compiled	[CE]  not  a  statement	127	None	replace
454	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
455	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
456	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[3],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[3],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
457	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[3],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[3],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[3],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
458	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.color  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.color  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.color	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	93	None	replace
459	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  int  cannot  be  dereferenced	93	None	replace
460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	Double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    Final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	compilable	  [FE]  AssertionFailedError  	25	1	replace
461	[BUG]  [BUGGY]  Double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    Final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	compilable	  [FE]  AssertionFailedError  	25	1	replace
462	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[rows.size()  ]);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[rows.size()  ]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().toArray(new  double[rows.size()  ]);	  double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	87	None	replace
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	121	1	replace
464	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	121	1	replace
465	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  c);  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  c);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols,  c);	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  c	17	None	replace
466	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
467	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
468	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.min(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.min(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
469	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.min(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.min(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[2]);    errors[0]  =  Math.min(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
470	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[rows.size()  ]);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[rows.size()  ]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(new  double[rows.size()  ]);	  final    double[][]    cols    =    getColumns().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	70	None	replace
471	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[1,  errors[1]  -  1]);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[0]  =  Math.max(errors[1,  errors[1]  -  1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[1,  errors[1]  -  1]);	  errors[0]    =    Math.max(errors[1,    errors[1]);    	non-compiled	[CE]  ']'  expected	124	None	replace
472	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getConvergenceChecker();  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getConvergenceChecker();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    getRangeParameters();    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
473	[BUG]  [BUGGY]  double[][]  cols  =  getRangeColumns().toArray(new  double[cols.size()  ]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getRangeColumns().toArray(new  double[cols.size()  ]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getRangeColumns().toArray(new  double[cols.size()  ]);	  double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
474	[BUG]  [BUGGY]  double[][]  cols  =  getRangeColumns().toArray(new  double[rows][cols.size()  ]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getRangeColumns().toArray(new  double[rows][cols.size()  ]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getRangeColumns().toArray(new  double[rows][cols.size()  ]);	  double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
475	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.min(getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	double  c  =  Math.min(getChiSquare(),  cols);	  double    cols    =    Math.min(getChiSquare(),    cols);    	compilable	  [FE]  AssertionFailedError  	65	1	replace
476	[BUG]  [BUGGY]  double  c  =  Math.min(getChiSquare(),  cols);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.min(getChiSquare(),  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.min(getChiSquare(),  cols);	  double    cols    =    Math.min(getChiSquare(),    cols);    	compilable	  [FE]  AssertionFailedError  	65	1	replace
477	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns(),  columns.toArray(columns);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns(),  columns.toArray(columns);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns(),  columns.toArray(columns);	  final    double[][]    cols    =    getColumns(),    errors.toArray(columns);    	non-compiled	[CE]  ';'  expected	108	None	replace
478	[BUG]  [BUGGY]  errors[1]  =  Math.max(errors[1],  errors[2]);  [CE]  cannot  find  symbol  c  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  errors[1]  =  Math.max(errors[1],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[1]  =  Math.max(errors[1],  errors[2]);	          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]    =    Math.max(errors[2],    errors[2]);    	non-compiled	[CE]  cannot  find  symbol  c	107	None	replace
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	90	1	replace
480	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  errors.length));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	compilable	  [FE]  AssertionFailedError  	90	1	replace
481	[BUG]  [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	static  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    errors.length));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
482	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  Double[cols.size()  ]);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  Double[cols.size()  ]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(new  Double[cols.size()  ]);	  final    double[][]    cols    =    getColumns().clone();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	Double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    Final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	43	1	replace
484	[BUG]  [BUGGY]  Double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    Final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	43	1	replace
485	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  +(cols  -  cols));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  +(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  +(cols  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    +(cols    -    cols));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
486	[BUG]  [BUGGY]  Math.sqrt(errors[i][i])*  C);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  Math.sqrt(errors[i][i])*  C);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[i][i])*  C);	  Math.sqrt(errors[i][i])*    cost);    	non-compiled	[CE]  not  a  statement	128	None	replace
487	[BUG]  [BUGGY]  final  double[][]  cols  =  getRangeColumns().toArray(new  double[cols.size()  ]);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getRangeColumns().toArray(new  double[cols.size()  ]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRangeColumns().toArray(new  double[cols.size()  ]);	  final    double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
488	[BUG]  [BUGGY]  final  double[][]  cols  =  getRangeColumns().toArray(cols);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double[][]  cols  =  getRangeColumns().toArray(cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRangeColumns().toArray(cols);	  final    double[][]    cols    =    getRangeColumns();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
489	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	98	None	replace
490	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  errors.length));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  -  errors.length));	  final    double    c    =    Math.sqrt(getSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
491	[BUG]  [BUGGY]  cols  =  Math.max(rows,  getChiSquare(),  errors);  [CE]  no  suitable  method  found  for  max(int,double,double[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(rows,  getChiSquare(),  errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(rows,  getChiSquare(),  errors);	  cols    =    Math.max(cols,    getChiSquare(),    errors);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double[])	50	None	replace
492	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  rows,  cols);  [CE]  no  suitable  method  found  for  max(int,double,int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  rows,  cols);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare(),  rows,  cols);	  cols    =    Math.max(cols,    getChiSquare(),    rows);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,int,int)	83	None	replace
493	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.size()  ]);  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.size()  ]);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols.size()  ]);	  double[][]    covar    =    getCovariances();    	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	replace
494	[BUG]  [BUGGY]  double[][]  covars  =  getCovariances();  [CE]  cannot  find  symbol  c  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  covars  =  getCovariances();  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covars  =  getCovariances();	  double[][]    covar    =    getCovariances();    	non-compiled	[CE]  cannot  find  symbol  c	18	None	replace
495	[BUG]  [BUGGY]  int  cols  =  Math.min(getChiSquare(),  rows,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  Math.min(getChiSquare(),  rows,  cols.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  Math.min(getChiSquare(),  rows,  cols.length);	  int    cols    =    Math.min(getChiSquare(),    cols,    errors.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
496	[BUG]  [BUGGY]  int  cols  =  Math.min(getChiSquare(),  cols,  errors.length,  rows.length);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  cols  =  Math.min(getChiSquare(),  cols,  errors.length,  rows.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  Math.min(getChiSquare(),  cols,  errors.length,  rows.length);	  int    cols    =    Math.min(getChiSquare(),    cols,    errors.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
497	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  rows));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  -  rows));	  final    double    c    =    Math.sqrt(getSquare()    /(cols    -    rows));    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[0]);  errors[0]  =  Math.max(errors[0],  errors[0]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[0]);  errors[0]  =  Math.max(errors[0],  errors[0]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
499	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[0]);  errors[0]  =  Math.max(errors[0],  errors[0]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[0]);  errors[0]  =  Math.max(errors[0],  errors[0]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[0]);  errors[0]  =  Math.max(errors[0],  errors[0]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
500	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[0]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[0]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
501	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[0]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[0]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[0]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
502	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);	  	non-compiled	[CE]  ']'  expected	7	None	add
503	[BUG]  [BUGGY]  static  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  static  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	static  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.cos(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
504	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
505	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	compilable	  [FE]  AssertionFailedError  	34	1	replace
506	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  errors.length);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  errors.length);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare(),  errors.length);	  cols    =    Math.min(cols.length,    getChiSquare(),    errors);    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None	replace
507	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  rows.length,  getChiSquare(),  errors);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  cols  =  Math.min(cols.length,  rows.length,  getChiSquare(),  errors);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  rows.length,  getChiSquare(),  errors);	  cols    =    Math.min(cols.length,    getChiSquare(),    errors);    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None	replace
508	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  /  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    /    cols));    	compilable	  [FE]  AssertionFailedError  	111	1	replace
509	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  /  cols));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  /  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    /    cols));    	compilable	  [FE]  AssertionFailedError  	111	1	replace
510	[BUG]  [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	static  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    /    cols));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
511	[BUG]  [BUGGY]  int  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  int  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
512	[BUG]  [BUGGY]  final  double  c  =  Math.exp(getCurrentSquare()  /(rows  *  cols));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.exp(getCurrentSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.exp(getCurrentSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(cols    *    cols));    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
513	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().toArray(rows);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  double[][]  cols  =  getColumns().toArray(rows);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().toArray(rows);	  double[][]    cols    =    getColumns().toArray(cols);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
514	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
515	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
516	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	118	1	add
517	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[2]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[0],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	118	1	add
518	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
519	[BUG]  [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]          errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);  errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);  [BUGGY]      final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	                errors[0]        =        Math.max(errors[1],        errors[1]);        errors[0]    =    Math.max(errors[2],    errors[2]);    errors[0]  =  Math.max(errors[0],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	add
520	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(cols  -  cols));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];      [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(cols  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(cols    -    cols));    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
