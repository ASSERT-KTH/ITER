bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	23	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	23	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  <identifier>  expected	23	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	      for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  '.class'  expected	21	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	      for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  ';'  expected	21	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	      for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  ';'  expected	21	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
8	[BUG]  [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
9	[BUG]  [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1,  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1,  errors[1]);	  	non-compiled	[CE]  ']'  expected	14	None	add
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
11	[BUG]  [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[1],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
12	[BUG]  [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  mistakes[0]  =  Math.max(errors[1],  errors[1]);  [CE]  cannot  find  symbol  mistakes  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  mistakes[0]  =  Math.max(errors[1],  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	        errors[0]    =    Math.max(errors[1],    errors[1]);    mistakes[0]  =  Math.max(errors[1],  errors[1]);	  	non-compiled	[CE]  cannot  find  symbol  mistakes	14	None	add
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
14	[BUG]  [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
15	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters();  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
16	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRestrictionChecker();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRestrictionChecker();  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRestrictionChecker();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
17	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols);  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRangeParameters(rows,  cols);	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
18	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  [CE]  variable  covar  is  already  defined  in  method  guessParametersErrors()  [FE]                    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double[][]  covar  =  getCovariances();  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();	      	non-compiled	[CE]  variable  covar  is  already  defined  in  method  guessParametersErrors()	6	None	replace
19	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[0],  errors[1]);  [CE]  cannot  find  symbol  c  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[0],  errors[1]);	      errors[0]    =    Math.max(errors[1],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
20	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[1],  errors[2]);  [CE]  cannot  find  symbol  c  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  errors[0]  =  Math.max(errors[1],  errors[2]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[1],  errors[2]);	      errors[0]    =    Math.max(errors[1],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
21	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[1]);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[1],  errors[1]);	      errors[0]    =    Math.max(errors[1],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
22	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[0],  errors[1]);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  errors[0]  =  Math.min(errors[0],  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[0],  errors[1]);	      errors[0]    =    Math.max(errors[1],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
23	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	16	None	add
24	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	16	None	add
25	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    Final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  	non-compiled	[CE]  not  a  statement	16	None	add
26	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	16	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
28	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  +(cols  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
30	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
32	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
34	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
36	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
38	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
39	[BUG]  [BUGGY]  double[][]  cols  =  getRows();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double[][]  cols  =  getRows();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getRows();	      double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
40	[BUG]  [BUGGY]  double[][]  cols  =  getRangeColumns();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double[][]  cols  =  getRangeColumns();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getRangeColumns();	      double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
41	[BUG]  [BUGGY]  double[][]  cols  =  getColumns()  /  2;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double[][]  cols  =  getColumns()  /  2;  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns()  /  2;	      double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
42	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	3	None	add
43	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    Final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));	  	non-compiled	[CE]  not  a  statement	3	None	add
44	[BUG]  [BUGGY]  final  double[][]  cols  =  getRows();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double[][]  cols  =  getRows();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRows();	      final    double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
45	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().clone();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double[][]  cols  =  getColumns().clone();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().clone();	      final    double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
46	[BUG]  [BUGGY]  final  double[][]  cols  =  getRangeColumns();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double[][]  cols  =  getRangeColumns();  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRangeColumns();	      final    double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  '.class'  expected	24	None	replace
48	[BUG]  [BUGGY]  cols  =  Math.max(cols.length,  getChiSquare(),  errors);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.max(cols.length,  getChiSquare(),  errors);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols.length,  getChiSquare(),  errors);	      cols    =    Math.max(cols.length,    getChiSquare());    	non-compiled	[CE]  int  cannot  be  dereferenced	11	None	replace
49	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare());  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.max(cols,  getChiSquare());  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare());	      cols    =    Math.max(cols.length,    getChiSquare());    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
50	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors);  [CE]  no  suitable  method  found  for  max(int,double,double[])  [FE]                    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  errors);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare(),  errors);	      cols    =    Math.max(cols.length,    getChiSquare());    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double[])	11	None	replace
51	[BUG]  [BUGGY]  cols  =  Math.max(cols.length,  errors.length);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.max(cols.length,  errors.length);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols.length,  errors.length);	      cols    =    Math.max(cols.length,    getChiSquare());    	non-compiled	[CE]  int  cannot  be  dereferenced	11	None	replace
52	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  errors);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  errors);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare(),  errors);	      cols    =    Math.min(cols.length,    getChiSquare());    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
53	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  rows);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare(),  rows);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare(),  rows);	      cols    =    Math.min(cols.length,    getChiSquare());    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
54	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare()  -  1);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.min(cols.length,  getChiSquare()  -  1);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols.length,  getChiSquare()  -  1);	      cols    =    Math.min(cols.length,    getChiSquare());    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i]  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i]  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i]	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  ')'  expected	20	None	replace
56	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
57	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getValue()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
58	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  -  cols));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
59	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  -  getCurrentSquare()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  -  getCurrentSquare()));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  *(cols  -  getCurrentSquare()));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
60	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  *  cols));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  *  cols));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
61	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  int  cols  =  getColumnCount()  -  1;  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  getColumnCount()  -  1;	      int    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
62	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  int  cols  =  getColumnCount()  +  1;  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  getColumnCount()  +  1;	      int    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
63	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  int  cols  =  getColumnCount()  -  2;  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  getColumnCount()  -  2;	      int    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
64	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  /  2;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  int  cols  =  getColumnCount()  /  2;  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  getColumnCount()  /  2;	      int    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
65	[BUG]  [BUGGY]  double  cols  =  Math.min(getChiSquare(),  cols);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double  cols  =  Math.min(getChiSquare(),  cols);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  cols  =  Math.min(getChiSquare(),  cols);	      int    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  cannot  find  symbol  c	7	None	replace
66	[BUG]  [BUGGY]  long  cols  =  Math.min(getChiSquare(),  cols);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  long  cols  =  Math.min(getChiSquare(),  cols);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	long  cols  =  Math.min(getChiSquare(),  cols);	      int    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
67	[BUG]  [BUGGY]  float  cols  =  Math.min(getChiSquare(),  cols);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  float  cols  =  Math.min(getChiSquare(),  cols);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	float  cols  =  Math.min(getChiSquare(),  cols);	      int    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
68	[BUG]  [BUGGY]  int  cols  =  Math.min(getChiSquare(),  cols,  errors.length);  [CE]  no  suitable  method  found  for  min(double,int,int)  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  int  cols  =  Math.min(getChiSquare(),  cols,  errors.length);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	int  cols  =  Math.min(getChiSquare(),  cols,  errors.length);	      int    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,int,int)	7	None	replace
69	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(cols);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double[][]  cols  =  getColumns().toArray(cols);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(cols);	      final    double[][]    cols    =    getColumns().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
70	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  ]);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  ]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  ]);	      final    double[][]    cols    =    getColumns().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
71	[BUG]  [BUGGY]  final  double[][]  cols  =  getRows().toArray(errors);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double[][]  cols  =  getRows().toArray(errors);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getRows().toArray(errors);	      final    double[][]    cols    =    getColumns().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
72	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	1	None	add
73	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	1	None	add
74	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    Final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  	non-compiled	[CE]  not  a  statement	1	None	add
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	      for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  '.class'  expected	22	None	replace
76	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  *  cols));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
77	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols),  cost);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols),  cost);  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols),  cost);	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
78	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  cost));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  cost));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols,  cost));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  ')'  expected	19	None	replace
79	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
80	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  getSquare()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  getSquare()));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  *(cols  -  getSquare()));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
81	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(cols  *  cols));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(cols  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(cols  *  cols));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
82	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  cols);  [CE]  no  suitable  method  found  for  max(int,double,int)  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  cols);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare(),  cols);	      cols    =    Math.max(cols.length,    getChiSquare());    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,int)	11	None	replace
83	[BUG]  [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  rows);  [CE]  no  suitable  method  found  for  max(int,double,int)  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.max(cols,  getChiSquare(),  rows);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols,  getChiSquare(),  rows);	      cols    =    Math.max(cols.length,    getChiSquare());    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,int)	11	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	      for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  '.class'  expected	21	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	      for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  <identifier>  expected	21	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	      for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  ';'  expected	21	None	replace
87	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  ]);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double[][]  cols  =  getColumns().toArray(new  double[cols.size()  ]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().toArray(new  double[cols.size()  ]);	      double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
88	[BUG]  [BUGGY]  double[][]  cols  =  getColumns()  /  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double[][]  cols  =  getColumns()  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns()  /  DEFAULT_MAX_ITERATIONS;	      double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
90	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
92	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  /  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
93	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.co	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.co    	non-compiled	[CE]  ';'  expected	23	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	compilable	  [FE]  AssertionFailedError  	17	1	replace
95	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	compilable	  [FE]  AssertionFailedError  	17	1	replace
96	[BUG]  [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[2]);  [CE]  cannot  find  symbol  c  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  errors[0]  =  Math.min(errors[1],  errors[2]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.min(errors[1],  errors[2]);	      errors[0]    =    Math.max(errors[1],    errors[1]);    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
97	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols)+  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols)+  1);  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i	      for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	24	None	replace
99	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    final  double  c  =  Math.sqrt(getSquare()  *(rows  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	1	None	add
100	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRealizationChecker();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRealizationChecker();  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRealizationChecker();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
101	[BUG]  [BUGGY]  double[][]  errors  =  new  double[cols.length];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double[][]  errors  =  new  double[cols.length];  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  errors  =  new  double[cols.length];	      	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	6	None	replace
102	[BUG]  [BUGGY]  cols  =  Math.min(cols,  getChiSquare());  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.min(cols,  getChiSquare());  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.min(cols,  getChiSquare());	      cols    =    Math.min(cols.length,    getChiSquare());    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
103	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(columns);  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double[][]  cols  =  getColumns().toArray(columns);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(columns);	      final    double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol  columns	10	None	replace
104	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().length;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double[][]  cols  =  getColumns().length;  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().length;	      final    double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
105	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    final  double  c  =  Math.sqrt(getSquare()  /(rows  *  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	16	None	add
106	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
107	[BUG]  [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[2],  errors[2]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[2],  errors[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
108	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns(),  errors.toArray(columns);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double[][]  cols  =  getColumns(),  errors.toArray(columns);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns(),  errors.toArray(columns);	      final    double[][]    cols    =    getColumns().toArray(errors);    	non-compiled	[CE]  ';'  expected	13	None	replace
109	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(cols  -  rows));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getSquare()  /(cols  -  rows));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getSquare()  /(cols  -  rows));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
111	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  /  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
112	[BUG]  [BUGGY]  Double  cols  =  Math.min(getChiSquare(),  cols);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  Double  cols  =  Math.min(getChiSquare(),  cols);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Double  cols  =  Math.min(getChiSquare(),  cols);	      int    cols    =    Math.min(getChiSquare(),    cols);    	non-compiled	[CE]  cannot  find  symbol  c	7	None	replace
113	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  -  getCurrentSquare()));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  -  getCurrentSquare()));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getCurrentSquare()  /(cols  -  getCurrentSquare()));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
114	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  cols));  final  double  c  =  Math.sqrt(getSquare()  *(cols  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    final  double  c  =  Math.sqrt(getSquare()  *(cols  -  cols));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	3	None	add
115	[BUG]  [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  static  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	static  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
116	[BUG]  [BUGGY]  final  double[][]  cols  =  getColumns().toArray(this.errors);  [CE]  cannot  find  symbol  errors  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double[][]  cols  =  getColumns().toArray(this.errors);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double[][]  cols  =  getColumns().toArray(this.errors);	      final    double[][]    cols    =    getColumns().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol  errors	13	None	replace
117	[BUG]  [BUGGY]  double[][]  cols  =  getColumns().toArray(cols);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double[][]  cols  =  getColumns().toArray(cols);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  cols  =  getColumns().toArray(cols);	      double[][]    cols    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
119	[BUG]  [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]      errors[0]  =  Math.max(errors[1],  errors[1]);  errors[0]  =  Math.max(errors[0],  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	        errors[0]    =    Math.max(errors[1],    errors[1]);    errors[0]  =  Math.max(errors[0],  errors[1]);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
121	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
123	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
124	[BUG]  [BUGGY]  errors[0]  =  Math.max(errors[1,  errors[1]);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  errors[0]  =  Math.max(errors[1,  errors[1]);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	errors[0]  =  Math.max(errors[1,  errors[1]);	      errors[0]    =    Math.max(errors[1],    errors[1]);    	non-compiled	[CE]  ']'  expected	15	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i	      for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i]    	non-compiled	[CE]  ']'  expected	22	None	replace
126	[BUG]  [BUGGY]  double[][]  covariances  =  getCovariances();  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  double[][]  covariances  =  getCovariances();  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	double[][]  covariances  =  getCovariances();	      	non-compiled	[CE]  cannot  find  symbol  c	6	None	replace
127	[BUG]  [BUGGY]  Math.sqrt(errors[i][i])*  cost;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  Math.sqrt(errors[i][i])*  cost;  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[i][i])*  cost;	      	non-compiled	[CE]  not  a  statement	6	None	replace
128	[BUG]  [BUGGY]  Math.sqrt(errors[i][i])*  cost);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  Math.sqrt(errors[i][i])*  cost);  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	Math.sqrt(errors[i][i])*  cost);	      	non-compiled	[CE]  not  a  statement	6	None	replace
129	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getSquare()  /(rows  -  cols));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.cos(getSquare()  /(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getSquare()  /(rows  -  cols));	  final    double    c    =    Math.sqrt(getSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
130	[BUG]  [BUGGY]  cols  =  Math.max(cols.length,  getChiSquare(),  rows);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  cols  =  Math.max(cols.length,  getChiSquare(),  rows);  [BUGGY]    final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	cols  =  Math.max(cols.length,  getChiSquare(),  rows);	      cols    =    Math.max(cols.length,    getChiSquare());    	non-compiled	[CE]  int  cannot  be  dereferenced	11	None	replace
131	[BUG]  [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  /(rows  -  cols));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];    [BUGGY]  final  double  c  =  Math.cos(getCurrentSquare()  /(rows  -  cols));  [BUGGY]    double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	final  double  c  =  Math.cos(getCurrentSquare()  /(rows  -  cols));	  final    double    c    =    Math.sqrt(getCurrentSquare()    /(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
