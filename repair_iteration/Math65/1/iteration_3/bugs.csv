bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows.length,  1);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows.length,  1);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows.length,  1);	  double    chiSquare    =    Math.min(results.length,    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
2	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  3);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  3);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  3);	  double    chiSquare    =    Math.min(results.length,    1);    	non-compiled	[CE]  cannot  find  symbol  results	36	None	replace
3	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  residualsWeights.length);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  residualsWeights.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  residualsWeights.length);	  double    chiSquare    =    Math.min(remainings.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  results	21	None	replace
4	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  remainings.length);  [CE]  cannot  find  symbol  results  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  remainings.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  remainings.length);	  double    chiSquare    =    Math.min(remainings.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  results	21	None	replace
5	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  columns);  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  columns);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  columns);	  double    chiSquare    =    Math.min(0,    rows);    double    chiSquare    =    Math.min(0,    columns);    	non-compiled	[CE]  cannot  find  symbol  columns	28	None	replace
6	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.columns);  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.columns);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.columns);	  double    chiSquare    =    Math.min(0,    rows);    double    chiSquare    =    Math.min(0,    columns);    	non-compiled	[CE]  cannot  find  symbol  columns	28	None	replace
7	[BUG]  [BUGGY]  Double  chiSquare  =  Math.min(0,  rows);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Math.min(0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  Math.min(0,  rows);	  double    chiSquare    =    Math.min(0,    rows);    double    chiSquare    =    Math.min(0,    columns);    	non-compiled	[CE]  incompatible  types	28	None	replace
8	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  2);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  Math.min(results.length,  2);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(results.length,  2);	  int    rows    =    Math.min(remainders.length,    1);    	non-compiled	[CE]  cannot  find  symbol  results	5	None	replace
9	[BUG]  [BUGGY]  int  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  chiSquare  =  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY;    int    chiSquare    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
10	[BUG]  [BUGGY]  long  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  long  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	long  chiSquare  =  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY;    int    chiSquare    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	int  chiSquare  =  1;	  double    chiSquare    =    1;    int    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	53	1	replace
12	[BUG]  [BUGGY]  int  chiSquare  =  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  chiSquare  =  1;	  double    chiSquare    =    1;    int    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	53	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  long  chiSquare  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	long  chiSquare  =  1;	  double    chiSquare    =    1;    int    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	53	1	replace
14	[BUG]  [BUGGY]  long  chiSquare  =  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  long  chiSquare  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	long  chiSquare  =  1;	  double    chiSquare    =    1;    int    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	53	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  this.rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.max(0,  this.rows);	  double    chiSquare    =    Math.min(0,    this.rows);    	compilable	  [FE]  AssertionFailedError  	50	1	replace
16	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  this.rows);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  this.rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(0,  this.rows);	  double    chiSquare    =    Math.min(0,    this.rows);    	compilable	  [FE]  AssertionFailedError  	50	1	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(0,  this.rows  +  1);	  double    chiSquare    =    Math.min(0,    this.rows);    	compilable	  [FE]  AssertionFailedError  	50	1	replace
18	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.rows  +  1);	  double    chiSquare    =    Math.min(0,    this.rows);    	compilable	  [FE]  AssertionFailedError  	50	1	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  this.rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(1,  this.rows);	  double    chiSquare    =    Math.min(0,    this.rows);    	compilable	  [FE]  AssertionFailedError  	50	1	replace
20	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  this.rows);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  this.rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(1,  this.rows);	  double    chiSquare    =    Math.min(0,    this.rows);    	compilable	  [FE]  AssertionFailedError  	50	1	replace
21	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.periods).doubleValue();  [CE]  cannot  find  symbol  periods  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.periods).doubleValue();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.periods).doubleValue();	  double    chiSquare    =    Math.min(0,    this.periods);    	non-compiled	[CE]  cannot  find  symbol  periods	46	None	replace
22	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.years);  [CE]  cannot  find  symbol  years  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.years);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.years);	  double    chiSquare    =    Math.min(0,    this.periods);    	non-compiled	[CE]  cannot  find  symbol  years	46	None	replace
23	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  this.periods);  [CE]  cannot  find  symbol  periods  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  this.periods);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(0,  this.periods);	  double    chiSquare    =    Math.max(0,    rows);    	non-compiled	[CE]  cannot  find  symbol  periods	45	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(1,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.max(1,  rows);	  double    chiSquare    =    Math.max(0,    rows);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
25	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(1,  rows);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(1,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(1,  rows);	  double    chiSquare    =    Math.max(0,    rows);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.max(0,  this.cols);	  double    chiSquare    =    Math.max(0,    rows);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
27	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  this.cols);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(0,  this.cols);	  double    chiSquare    =    Math.max(0,    rows);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  >  0)?  0  :  2;	  double    chiSquare    =(rows    >    0)?    0    :    1;    double    chiSquare    =(rows    >    0)?    0    :    2;    	compilable	  [FE]  AssertionFailedError  	105	1	replace
29	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  >  0)?  0  :  2;	  double    chiSquare    =(rows    >    0)?    0    :    1;    double    chiSquare    =(rows    >    0)?    0    :    2;    	compilable	  [FE]  AssertionFailedError  	105	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  >  1)?  1  :  2;	  double    chiSquare    =(rows    >    0)?    0    :    1;    double    chiSquare    =(rows    >    0)?    0    :    2;    	compilable	  [FE]  AssertionFailedError  	105	1	replace
31	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  2;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  >  1)?  1  :  2;	  double    chiSquare    =(rows    >    0)?    0    :    1;    double    chiSquare    =(rows    >    0)?    0    :    2;    	compilable	  [FE]  AssertionFailedError  	105	1	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  >  0)?  1  :  2;	  double    chiSquare    =(rows    >    0)?    0    :    1;    double    chiSquare    =(rows    >    0)?    0    :    2;    	compilable	  [FE]  AssertionFailedError  	105	1	replace
33	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  2;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  >  0)?  1  :  2;	  double    chiSquare    =(rows    >    0)?    0    :    1;    double    chiSquare    =(rows    >    0)?    0    :    2;    	compilable	  [FE]  AssertionFailedError  	105	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(2,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(2,  rows);	  double    chiSquare    =    Math.min(1,    rows);    	compilable	  [FE]  AssertionFailedError  	101	1	replace
35	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(2,  rows);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(2,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(2,  rows);	  double    chiSquare    =    Math.min(1,    rows);    	compilable	  [FE]  AssertionFailedError  	101	1	replace
36	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  this.periods);  [CE]  cannot  find  symbol  periods  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  this.periods);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(1,  this.periods);	  double    chiSquare    =    Math.min(1,    rows);    	non-compiled	[CE]  cannot  find  symbol  periods	101	None	replace
37	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)this).getChiSquare(0);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)this).getChiSquare(0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)this).getChiSquare(0);	  ((    VectorialConvergenceChecker)this).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
38	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)this).setChiSquare(chiSquare);  [CE]  cannot  find  symbol  chiSquare  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)this).setChiSquare(chiSquare);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)this).setChiSquare(chiSquare);	  ((    VectorialConvergenceChecker)this).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  chiSquare	104	None	replace
39	[BUG]  [BUGGY]  double[][]  rows  =  jf.getRemainders();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  jf.getRemainders();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  jf.getRemainders();	  double[][]    rows    =    jF.getRemainders();    	non-compiled	[CE]  cannot  find  symbol  jf	107	None	replace
40	[BUG]  [BUGGY]  double[][]  rows  =  jF.remainders();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  jF.remainders();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  jF.remainders();	  double[][]    rows    =    jF.getRemainders();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
41	[BUG]  [BUGGY]  double[][]  rows  =  i.getRows();  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  i.getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  i.getRows();	  double[][]    rows    =    ji.getRows();    	non-compiled	[CE]  cannot  find  symbol  i	81	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  0;  chiSquare  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  0;  chiSquare  =  0;	  double    chiSquare    =    1;    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	55	1	replace
43	[BUG]  [BUGGY]  double  chiSquare  =  0;  chiSquare  =  0;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  0;  chiSquare  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  0;  chiSquare  =  0;	  double    chiSquare    =    1;    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	55	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  0;  chiSquare  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  0;  chiSquare  =  1;	  double    chiSquare    =    1;    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	55	1	replace
45	[BUG]  [BUGGY]  double  chiSquare  =  0;  chiSquare  =  1;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  0;  chiSquare  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  0;  chiSquare  =  1;	  double    chiSquare    =    1;    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	55	1	replace
46	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  double  chiSquare  =  Math.min(0,  this.cols);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  double  chiSquare  =  Math.min(0,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    this.cols);    double  chiSquare  =  Math.min(0,  this.cols);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	47	None	add
47	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  Double  chiSquare  =  Math.min(0,  this.cols);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  Double  chiSquare  =  Math.min(0,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    this.cols);    Double  chiSquare  =  Math.min(0,  this.cols);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	47	None	add
48	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  int  chiSquare  =  Math.min(0,  this.cols);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  int  chiSquare  =  Math.min(0,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    this.cols);    int  chiSquare  =  Math.min(0,  this.cols);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	47	None	add
49	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  long  chiSquare  =  Math.min(0,  this.cols);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  long  chiSquare  =  Math.min(0,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    this.cols);    long  chiSquare  =  Math.min(0,  this.cols);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	47	None	add
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.MAX_VALUE;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.MAX_VALUE;	  double    chiSquare    =    Double.MIN_VALUE;    	compilable	  [FE]  AssertionFailedError  	39	1	replace
51	[BUG]  [BUGGY]  double  chiSquare  =  Double.MAX_VALUE;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.MAX_VALUE;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.MAX_VALUE;	  double    chiSquare    =    Double.MIN_VALUE;    	compilable	  [FE]  AssertionFailedError  	39	1	replace
52	[BUG]  [BUGGY]  long  chiSquare  =  Double.NaN;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  long  chiSquare  =  Double.NaN;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	long  chiSquare  =  Double.NaN;	  double    chiSquare    =    Double.NaN;    double    chiSquare    =    Double.NaN;    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
53	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)varianceChecker).getChiSquare();  [CE]  cannot  find  symbol  varianceChecker  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)varianceChecker).getChiSquare();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)varianceChecker).getChiSquare();	  ((    VectorialConvergenceChecker)remaining).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  varianceChecker	3	None	replace
54	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)constraint).getChiSquare();  [CE]  cannot  find  symbol  constraint  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)constraint).getChiSquare();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)constraint).getChiSquare();	  ((    VectorialConvergenceChecker)remaining).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  constraint	3	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(0,  this.cols  +  1);	  double    chiSquare    =    Math.min(0,    this.cols);    	compilable	  [FE]  AssertionFailedError  	48	1	replace
56	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.cols  +  1);	  double    chiSquare    =    Math.min(0,    this.cols);    	compilable	  [FE]  AssertionFailedError  	48	1	replace
57	[BUG]  [BUGGY]  int  rows  =  getLeftCount();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  getLeftCount();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getLeftCount();	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
58	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainingsWeights.size()  ]);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainingsWeights.size()  ]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[remainingsWeights.size()  ]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	102	None	replace
59	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[resultsWeights.size()  ]);  [CE]  cannot  find  symbol  resultsWeights  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[resultsWeights.size()  ]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[resultsWeights.size()  ]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	102	None	replace
60	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[regulars.size()  ]);  [CE]  cannot  find  symbol  regulars  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[regulars.size()  ]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[regulars.size()  ]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  regulars	102	None	replace
61	[BUG]  [BUGGY]  Double  chiSquare  =  Math.min(0,  this.cols);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Math.min(0,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  Math.min(0,  this.cols);	  double    chiSquare    =    Math.min(0,    rows);    Double    chiSquare    =    Math.min(0,    rows);    	non-compiled	[CE]  incompatible  types	27	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	71	1	replace
63	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INFINITY;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	71	1	replace
64	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  &  Double.POSITIVE_INFINITY;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  &  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  &  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	71	None	replace
65	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  +  1;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  +  1;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	71	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  1);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(rows,  1);	  double    chiSquare    =    Math.min(rows,    0);    	compilable	  [FE]  AssertionFailedError  	35	1	replace
67	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  1);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows,  1);	  double    chiSquare    =    Math.min(rows,    0);    	compilable	  [FE]  AssertionFailedError  	35	1	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
72	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  0,  0);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  Math.min(results.length,  0,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(results.length,  0,  0);	  int    rows    =    Math.min(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	6	None	replace
73	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  0,  rows);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  0,  rows);	  double    chiSquare    =    Double.parseDouble(jF,    rows);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	15	None	replace
74	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  dataArea,  rows);  [CE]  cannot  find  symbol  dataArea  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  dataArea,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  dataArea,  rows);	  double    chiSquare    =    Double.parseDouble(jF,    rows);    	non-compiled	[CE]  cannot  find  symbol  dataArea	15	None	replace
75	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  this.cols);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  this.cols);	  double    chiSquare    =    Double.parseDouble(jF,    rows);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	15	None	replace
76	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  column,  rows);  [CE]  cannot  find  symbol  column  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  column,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  column,  rows);	  double    chiSquare    =    Double.parseDouble(jF,    rows);    	non-compiled	[CE]  cannot  find  symbol  column	15	None	replace
77	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  double  chiSquare  =(rows  >  0)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  double  chiSquare  =(rows  >  0)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    0)?    1    :    1;    double  chiSquare  =(rows  >  0)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	111	None	add
78	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  Double  chiSquare  =(rows  >  0)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  Double  chiSquare  =(rows  >  0)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    0)?    1    :    1;    Double  chiSquare  =(rows  >  0)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	111	None	add
79	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  int  chiSquare  =(rows  >  0)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  int  chiSquare  =(rows  >  0)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    0)?    1    :    1;    int  chiSquare  =(rows  >  0)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	111	None	add
80	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Double  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Double  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double    chiSquare    =    Double.POSITIVE_INFINITY;    Double  chiSquare  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	72	None	add
81	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  double  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  double  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double    chiSquare    =    Double.POSITIVE_INFINITY;    double  chiSquare  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	72	None	add
82	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Integer  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Integer  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double    chiSquare    =    Double.POSITIVE_INFINITY;    Integer  chiSquare  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	72	None	add
83	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Single  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Single  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double    chiSquare    =    Double.POSITIVE_INFINITY;    Single  chiSquare  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  cannot  find  symbol	72	None	add
84	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Double  chiSquare  =  Double.POSITEIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Double  chiSquare  =  Double.POSITEIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double    chiSquare    =    Double.POSITIVE_INFINITY;    Double  chiSquare  =  Double.POSITEIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	72	None	add
85	[BUG]  [BUGGY]  double[][]  rows  =  this.getRows();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  this.getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  this.getRows();	  double[][]    rows    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
86	[BUG]  [BUGGY]  Double[][]  rows  =  getRows();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double[][]  rows  =  getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double[][]  rows  =  getRows();	  double[][]    rows    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
87	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  rows,  cost);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  rows,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  rows,  cost);	  double    chiSquare    =    Double.parseDouble(rows,    cost);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	16	None	replace
88	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jf,  rows,  cost);  [CE]  cannot  find  symbol  jf  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jf,  rows,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jf,  rows,  cost);	  double    chiSquare    =    Double.parseDouble(rows,    cost);    	non-compiled	[CE]  cannot  find  symbol  jf	16	None	replace
89	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(value,  rows);  [CE]  cannot  find  symbol  value  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(value,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(value,  rows);	  double    chiSquare    =    Double.parseDouble(rows,    cost);    	non-compiled	[CE]  cannot  find  symbol  value	16	None	replace
90	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(variables,  cost);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(variables,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(variables,  cost);	  double    chiSquare    =    Double.parseDouble(rows,    cost);    	non-compiled	[CE]  cannot  find  symbol  	16	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.POSITIVE_INFINITY  +  2;	  double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    	compilable	  [FE]  AssertionFailedError  	70	1	replace
92	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  +  2;	  double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    	compilable	  [FE]  AssertionFailedError  	70	1	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.POSITIVE_INFINITY  +  3;	  double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    	compilable	  [FE]  AssertionFailedError  	70	1	replace
94	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  3;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  +  3;	  double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    	compilable	  [FE]  AssertionFailedError  	70	1	replace
95	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  cols);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  cols);	  double    chiSquare    =    Double.parseDouble(jF);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	17	None	replace
96	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  cost);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  cost);	  double    chiSquare    =    Double.parseDouble(jF);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	17	None	replace
97	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  row);  [CE]  cannot  find  symbol  row  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  row);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  row);	  double    chiSquare    =    Double.parseDouble(jF);    	non-compiled	[CE]  cannot  find  symbol  row	17	None	replace
98	[BUG]  [BUGGY]  double[][]  rows  =  getColumns().toArray(new  double[rows.size()  ]);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getColumns().toArray(new  double[rows.size()  ]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getColumns().toArray(new  double[rows.size()  ]);	  double[][]    rows    =    getRows().toArray(new    double[rows.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
99	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[rows.size()  +  1]);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[rows.size()  +  1]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[rows.size()  +  1]);	  double[][]    rows    =    getRows().toArray(new    double[rows.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
100	[BUG]  [BUGGY]  Double[][]  rows  =  getRows().toArray(new  double[rows.size()  ]);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double[][]  rows  =  getRows().toArray(new  double[rows.size()  ]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double[][]  rows  =  getRows().toArray(new  double[rows.size()  ]);	  double[][]    rows    =    getRows().toArray(new    double[rows.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
101	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	69	None	add
102	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  Double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  Double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    Double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	69	None	add
103	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  int  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  int  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    int  chiSquare  =  Double.POSITIVE_INFINITY  +  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	69	None	add
104	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  long  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  long  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    long  chiSquare  =  Double.POSITIVE_INFINITY  +  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	69	None	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  long  chiSquare  =  Math.min(0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	long  chiSquare  =  Math.min(0,  rows);	  double    chiSquare    =    Math.min(0,    rows);    long    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	29	1	replace
106	[BUG]  [BUGGY]  long  chiSquare  =  Math.min(0,  rows);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  long  chiSquare  =  Math.min(0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	long  chiSquare  =  Math.min(0,  rows);	  double    chiSquare    =    Math.min(0,    rows);    long    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	29	1	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =  Math.min(0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	int  chiSquare  =  Math.min(0,  rows);	  double    chiSquare    =    Math.min(0,    rows);    long    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	29	1	replace
108	[BUG]  [BUGGY]  int  chiSquare  =  Math.min(0,  rows);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =  Math.min(0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  chiSquare  =  Math.min(0,  rows);	  double    chiSquare    =    Math.min(0,    rows);    long    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	29	1	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  4;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  4;	  double    chiSquare    =    3;    	compilable	  [FE]  AssertionFailedError  	88	1	replace
110	[BUG]  [BUGGY]  double  chiSquare  =  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  4;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  4;	  double    chiSquare    =    3;    	compilable	  [FE]  AssertionFailedError  	88	1	replace
111	[BUG]  [BUGGY]  Double[][]  rows  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double[][]  rows  =  jF.getColumns();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double[][]  rows  =  jF.getColumns();	  Double[][]    rows    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
112	[BUG]  [BUGGY]  Double[][]  rows  =  jf.getRows();  [CE]  cannot  find  symbol  jf  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double[][]  rows  =  jf.getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double[][]  rows  =  jf.getRows();	  Double[][]    rows    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol  jf	32	None	replace
113	[BUG]  [BUGGY]  Double[][]  rows  =  this.jF.getRows();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double[][]  rows  =  this.jF.getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double[][]  rows  =  this.jF.getRows();	  Double[][]    rows    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
114	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  ji.rows.length);  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  ji.rows.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainings.length,  ji.rows.length);	  double    chiSquare    =    Math.min(results.length,    ji.rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	85	None	replace
115	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  ji.rows.length  +  1);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  ji.rows.length  +  1);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  ji.rows.length  +  1);	  double    chiSquare    =    Math.min(results.length,    ji.rows.length);    	non-compiled	[CE]  cannot  find  symbol  results	85	None	replace
116	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows.length,  ji.rows.length);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows.length,  ji.rows.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows.length,  ji.rows.length);	  double    chiSquare    =    Math.min(results.length,    ji.rows.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
117	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  getColumnCount()  -  1;  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getColumnCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
118	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainingsWeights.length]);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainingsWeights.length]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[remainingsWeights.length]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.length]);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	93	None	replace
119	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[resultsWeights.length]);  [CE]  cannot  find  symbol  resultsWeights  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[resultsWeights.length]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[resultsWeights.length]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.length]);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	93	None	replace
120	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainingsWidths.length]);  [CE]  cannot  find  symbol  remainingsWidths  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainingsWidths.length]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[remainingsWidths.length]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.length]);    	non-compiled	[CE]  cannot  find  symbol  remainingsWidths	93	None	replace
121	[BUG]  [BUGGY]  double[][]  rows  =  getColumns().clone();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getColumns().clone();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getColumns().clone();	  double[][]    rows    =    getRows().clone();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
122	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  residuals.length);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  residuals.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  residuals.length);	  double    chiSquare    =    Math.min(results.length,    results.length);    	non-compiled	[CE]  cannot  find  symbol  results	86	None	replace
123	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  last);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  last);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  last);	  double    chiSquare    =    Math.min(results.length,    results.length);    	non-compiled	[CE]  cannot  find  symbol  results	86	None	replace
124	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  3);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  Math.min(results.length,  3);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(results.length,  3);	  int    rows    =    Math.min(results.length,    1);    	non-compiled	[CE]  cannot  find  symbol  results	7	None	replace
125	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(jF);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(jF);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(jF);	  double    chiSquare    =    Math.sqrt(rows);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	57	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.cos(rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.cos(rows);	  double    chiSquare    =    Math.sqrt(rows);    	compilable	  [FE]  AssertionFailedError  	57	1	replace
127	[BUG]  [BUGGY]  double  chiSquare  =  Math.cos(rows);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.cos(rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.cos(rows);	  double    chiSquare    =    Math.sqrt(rows);    	compilable	  [FE]  AssertionFailedError  	57	1	replace
128	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(getValue());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(getValue());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(getValue());	  double    chiSquare    =    Math.sqrt(rows);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
129	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(jF,  rows);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(jF,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(jF,  rows);	  double    chiSquare    =    Math.sqrt(rows);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	57	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.NEGATIVE_INFINITY  +  1;	  double    chiSquare    =    Double.NEGATIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	92	1	replace
131	[BUG]  [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.NEGATIVE_INFINITY  +  1;	  double    chiSquare    =    Double.NEGATIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	92	1	replace
132	[BUG]  [BUGGY]  Double  chiSquare  =  1;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  1;	  double    chiSquare    =    1;    Double    chiSquare    =    1;    	non-compiled	[CE]  incompatible  types	52	None	replace
133	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  double  chiSquare  =  Math.sqrt(rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  double  chiSquare  =  Math.sqrt(rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.sqrt(rows);    double  chiSquare  =  Math.sqrt(rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	56	None	add
134	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  Double  chiSquare  =  Math.sqrt(rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  Double  chiSquare  =  Math.sqrt(rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.sqrt(rows);    Double  chiSquare  =  Math.sqrt(rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	56	None	add
135	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  int  chiSquare  =  Math.sqrt(rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  int  chiSquare  =  Math.sqrt(rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.sqrt(rows);    int  chiSquare  =  Math.sqrt(rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	56	None	add
136	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  long  chiSquare  =  Math.sqrt(rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  long  chiSquare  =  Math.sqrt(rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.sqrt(rows);    long  chiSquare  =  Math.sqrt(rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	56	None	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  1)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  <  1)?  0  :  1;	  double    chiSquare    =(rows    <    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
138	[BUG]  [BUGGY]  double  chiSquare  =(rows  <  1)?  0  :  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  1)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  <  1)?  0  :  1;	  double    chiSquare    =(rows    <    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  <  1)?  1  :  1;	  double    chiSquare    =(rows    <    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
140	[BUG]  [BUGGY]  double  chiSquare  =(rows  <  1)?  1  :  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  <  1)?  1  :  1;	  double    chiSquare    =(rows    <    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
141	[BUG]  [BUGGY]  int  rows  =  getRowCount()  /  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  getRowCount()  /  1;  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getRowCount()  /  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
142	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  fields);  [CE]  cannot  find  symbol  fields  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  fields);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  fields);	  double    chiSquare    =    Math.min(0,    rows);    double    chiSquare    =    Math.min(0,    fields);    	non-compiled	[CE]  cannot  find  symbol  fields	30	None	replace
143	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  fields);  [CE]  cannot  find  symbol  fields  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  fields);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(0,  fields);	  double    chiSquare    =    Math.min(0,    rows);    double    chiSquare    =    Math.min(0,    fields);    	non-compiled	[CE]  cannot  find  symbol  fields	30	None	replace
144	[BUG]  [BUGGY]  Double  chiSquare  =  Math.min(0,  fields);  [CE]  cannot  find  symbol  fields  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Math.min(0,  fields);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  Math.min(0,  fields);	  double    chiSquare    =    Math.min(0,    rows);    double    chiSquare    =    Math.min(0,    fields);    	non-compiled	[CE]  cannot  find  symbol  fields	30	None	replace
145	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INT;  [CE]  cannot  find  symbol  POSITIVE_INT  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INT;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INT;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INT;    	non-compiled	[CE]  cannot  find  symbol  POSITIVE_INT	108	None	replace
146	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.MAX_INT;  [CE]  cannot  find  symbol  MAX_INT  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.MAX_INT;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.MAX_INT;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INT;    	non-compiled	[CE]  cannot  find  symbol  MAX_INT	108	None	replace
147	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INTEGER;  [CE]  cannot  find  symbol  POSITIVE_INTEGER  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INTEGER;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INTEGER;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INT;    	non-compiled	[CE]  cannot  find  symbol  POSITIVE_INTEGER	108	None	replace
148	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  double  chiSquare  =(rows  >  1)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  double  chiSquare  =(rows  >  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    1)?    1    :    1;    double  chiSquare  =(rows  >  1)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	59	None	add
149	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  Double  chiSquare  =(rows  >  1)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  Double  chiSquare  =(rows  >  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    1)?    1    :    1;    Double  chiSquare  =(rows  >  1)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	59	None	add
150	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  int  chiSquare  =(rows  >  1)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  int  chiSquare  =(rows  >  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    1)?    1    :    1;    int  chiSquare  =(rows  >  1)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	59	None	add
151	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  long  chiSquare  =(rows  >  1)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  long  chiSquare  =(rows  >  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    1)?    1    :    1;    long  chiSquare  =(rows  >  1)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	59	None	add
152	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)this.checker).getChiSquare();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)this.checker).getChiSquare();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)this.checker).getChiSquare();	  ((    VectorialConvergenceChecker)checker).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
153	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)checker).getChiSquare(0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)checker).getChiSquare(0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)checker).getChiSquare(0);	  ((    VectorialConvergenceChecker)checker).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
154	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)checker).setChiSquare(chiSquare);  [CE]  cannot  find  symbol  chiSquare  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)checker).setChiSquare(chiSquare);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)checker).setChiSquare(chiSquare);	  ((    VectorialConvergenceChecker)checker).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  chiSquare	94	None	replace
155	[BUG]  [BUGGY]  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  chiSquare  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	chiSquare  =  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY;    double    chiSquare    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  cannot  find  symbol  chiSquare	40	None	replace
156	[BUG]  [BUGGY]  Double  chiSquare  =(rows  >  0)?  0  :  1;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =(rows  >  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    Double    chiSquare    =(rows    >    0)?    0    :    1;    	non-compiled	[CE]  incompatible  types	23	None	replace
157	[BUG]  [BUGGY]  Double  chiSquare  =(rows  >  1)?  1  :  1;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =(rows  >  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =(rows  >  1)?  1  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    Double    chiSquare    =(rows    >    0)?    0    :    1;    	non-compiled	[CE]  incompatible  types	23	None	replace
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	Double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;	  Double    chiSquare    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	73	1	replace
159	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;	  Double    chiSquare    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	73	1	replace
160	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY;	  Double    chiSquare    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	73	None	replace
161	[BUG]  [BUGGY]  double[][]  rows  =  jf.getColumns();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  jf.getColumns();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  jf.getColumns();	  double[][]    rows    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jf	31	None	replace
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  2  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  >  1)?  2  :  1;	  double    chiSquare    =(rows    >    1)?    1    :    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
163	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  2  :  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  2  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  >  1)?  2  :  1;	  double    chiSquare    =(rows    >    1)?    1    :    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
164	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)variable).getChiSquare();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)variable).getChiSquare();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)variable).getChiSquare();	  ((    VectorialConvergenceChecker)result).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  	1	None	replace
165	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(this.variables);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(this.variables);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(this.variables);	  double    chiSquare    =    Double.parseDouble(variables);    	non-compiled	[CE]  cannot  find  symbol  	18	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	int  chiSquare  =(rows  >  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    int    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	24	1	replace
167	[BUG]  [BUGGY]  int  chiSquare  =(rows  >  0)?  0  :  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  chiSquare  =(rows  >  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    int    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	24	1	replace
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =(rows  >  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	int  chiSquare  =(rows  >  1)?  1  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    int    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	24	1	replace
169	[BUG]  [BUGGY]  int  chiSquare  =(rows  >  1)?  1  :  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =(rows  >  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  chiSquare  =(rows  >  1)?  1  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    int    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	24	1	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.NaN;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	Double  chiSquare  =  Double.NaN;	  double    chiSquare    =    Double.NaN;    Double    chiSquare    =    Double.NaN;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
171	[BUG]  [BUGGY]  Double  chiSquare  =  Double.NaN;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.NaN;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  Double.NaN;	  double    chiSquare    =    Double.NaN;    Double    chiSquare    =    Double.NaN;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  1)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  ==  1)?  0  :  1;	  double    chiSquare    =(rows    >    1)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
173	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  1)?  0  :  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  1)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  ==  1)?  0  :  1;	  double    chiSquare    =(rows    >    1)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
174	[BUG]  [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  double  chiSquare  =  Double.MIN_VALUE;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  double  chiSquare  =  Double.MIN_VALUE;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.MIN_VALUE;    double  chiSquare  =  Double.MIN_VALUE;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	38	None	add
175	[BUG]  [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  Double  chiSquare  =  Double.MIN_VALUE;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  Double  chiSquare  =  Double.MIN_VALUE;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.MIN_VALUE;    Double  chiSquare  =  Double.MIN_VALUE;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	38	None	add
176	[BUG]  [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  int  chiSquare  =  Double.MIN_VALUE;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  int  chiSquare  =  Double.MIN_VALUE;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.MIN_VALUE;    int  chiSquare  =  Double.MIN_VALUE;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	38	None	add
177	[BUG]  [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  long  chiSquare  =  Double.MIN_VALUE;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  long  chiSquare  =  Double.MIN_VALUE;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.MIN_VALUE;    long  chiSquare  =  Double.MIN_VALUE;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	38	None	add
178	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  ji);  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  ji);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(rows,  ji);	  double    chiSquare    =    Double.parseDouble(ji,    rows);    	non-compiled	[CE]  cannot  find  symbol  ji	90	None	replace
179	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  0);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(rows,  0);	  double    chiSquare    =    Double.parseDouble(ji,    rows);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	90	None	replace
180	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  i);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  i);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(rows,  i);	  double    chiSquare    =    Double.parseDouble(ji,    rows);    	non-compiled	[CE]  cannot  find  symbol  i	90	None	replace
181	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  jF);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  jF);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(rows,  jF);	  double    chiSquare    =    Double.parseDouble(ji,    rows);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	90	None	replace
182	[BUG]  [BUGGY]  double  chiSquare  =  3;  double  chiSquare  =  3;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  3;  double  chiSquare  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    3;    double  chiSquare  =  3;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	87	None	add
183	[BUG]  [BUGGY]  double  chiSquare  =  3;  Double  chiSquare  =  3;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  3;  Double  chiSquare  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    3;    Double  chiSquare  =  3;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	87	None	add
184	[BUG]  [BUGGY]  double  chiSquare  =  3;  int  chiSquare  =  3;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  3;  int  chiSquare  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    3;    int  chiSquare  =  3;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	87	None	add
185	[BUG]  [BUGGY]  double  chiSquare  =  3;  long  chiSquare  =  3;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  3;  long  chiSquare  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    3;    long  chiSquare  =  3;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	87	None	add
186	[BUG]  [BUGGY]  double  chiSquare  =  3;  chiSquare  =  3;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  3;  chiSquare  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    3;    chiSquare  =  3;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	87	None	add
187	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  getChiSquare();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  getChiSquare();	  double    chiSquare    =    getValue();    	compilable	  [FE]  StackOverflowError  	79	1	replace
188	[BUG]  [BUGGY]  double  chiSquare  =  getChiSquare();  [FE]  StackOverflowError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  getChiSquare();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  getChiSquare();	  double    chiSquare    =    getValue();    	compilable	  [FE]  StackOverflowError  	79	1	replace
189	[BUG]  [BUGGY]  double  chiSquare  =  getRowValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  getRowValue();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  getRowValue();	  double    chiSquare    =    getValue();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
190	[BUG]  [BUGGY]  double  chiSquare  =  getStandardValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  getStandardValue();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  getStandardValue();	  double    chiSquare    =    getValue();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
191	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  double  chiSquare  =  Math.min(0,  this.rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  double  chiSquare  =  Math.min(0,  this.rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    this.rows);    double  chiSquare  =  Math.min(0,  this.rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	49	None	add
192	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  Double  chiSquare  =  Math.min(0,  this.rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  Double  chiSquare  =  Math.min(0,  this.rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    this.rows);    Double  chiSquare  =  Math.min(0,  this.rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	49	None	add
193	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  int  chiSquare  =  Math.min(0,  this.rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  int  chiSquare  =  Math.min(0,  this.rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    this.rows);    int  chiSquare  =  Math.min(0,  this.rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	49	None	add
194	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  long  chiSquare  =  Math.min(0,  this.rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  long  chiSquare  =  Math.min(0,  this.rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    this.rows);    long  chiSquare  =  Math.min(0,  this.rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	49	None	add
195	[BUG]  [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  double  chiSquare  =(rows  <  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  double  chiSquare  =(rows  <  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    <    0)?    0    :    1;    double  chiSquare  =(rows  <  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	add
196	[BUG]  [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  Double  chiSquare  =(rows  <  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  Double  chiSquare  =(rows  <  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    <    0)?    0    :    1;    Double  chiSquare  =(rows  <  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	add
197	[BUG]  [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  int  chiSquare  =(rows  <  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  int  chiSquare  =(rows  <  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    <    0)?    0    :    1;    int  chiSquare  =(rows  <  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	add
198	[BUG]  [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  long  chiSquare  =(rows  <  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  long  chiSquare  =(rows  <  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    <    0)?    0    :    1;    long  chiSquare  =(rows  <  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	add
199	[BUG]  [BUGGY]  double[][]  rows  =  _jF.getRows();  [CE]  cannot  find  symbol  _jF  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  _jF.getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  _jF.getRows();	  double[][]    rows    =    _jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  _jF	106	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  ==  1)?  1  :  1;	  double    chiSquare    =(rows    ==    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
201	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  1)?  1  :  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  ==  1)?  1  :  1;	  double    chiSquare    =(rows    ==    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  ==  0)?  1  :  1;	  double    chiSquare    =(rows    ==    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
203	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  0)?  1  :  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  ==  0)?  1  :  1;	  double    chiSquare    =(rows    ==    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
204	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(resistances.length,  rows.length);  [CE]  cannot  find  symbol  resistances  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(resistances.length,  rows.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(resistances.length,  rows.length);	  double    chiSquare    =    Math.min(rows.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  resistances	19	None	replace
205	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  columns.length);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  columns.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  columns.length);	  double    chiSquare    =    Math.min(rows.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	19	None	replace
206	[BUG]  [BUGGY]  int  rows  =  this.getRowCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  this.getRowCount();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  this.getRowCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
207	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  getColumnCount()  -  2;  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getColumnCount()  -  2;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
208	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  jf);  [CE]  cannot  find  symbol  jf  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  jf);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(rows,  jf);	  double    chiSquare    =    Double.parseDouble(jf,    rows);    	non-compiled	[CE]  cannot  find  symbol  jf	89	None	replace
209	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)variate).getChiSquare(0,  0);  [CE]  cannot  find  symbol  variate  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)variate).getChiSquare(0,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)variate).getChiSquare(0,  0);	  ((    VectorialConvergenceChecker)variate).getChiSquare(0);    	non-compiled	[CE]  cannot  find  symbol  variate	2	None	replace
210	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)variate).getChiSquare(this.period);  [CE]  cannot  find  symbol  period  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)variate).getChiSquare(this.period);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)variate).getChiSquare(this.period);	  ((    VectorialConvergenceChecker)variate).getChiSquare(0);    	non-compiled	[CE]  cannot  find  symbol  period	2	None	replace
211	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  double  chiSquare  =(rows  ==  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  double  chiSquare  =(rows  ==  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    ==    0)?    0    :    1;    double  chiSquare  =(rows  ==  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	61	None	add
212	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  Double  chiSquare  =(rows  ==  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  Double  chiSquare  =(rows  ==  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    ==    0)?    0    :    1;    Double  chiSquare  =(rows  ==  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	61	None	add
213	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  double  chiSquare  =(rows  >=  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  double  chiSquare  =(rows  >=  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    ==    0)?    0    :    1;    double  chiSquare  =(rows  >=  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	61	None	add
214	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  int  chiSquare  =(rows  ==  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  int  chiSquare  =(rows  ==  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    ==    0)?    0    :    1;    int  chiSquare  =(rows  ==  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	61	None	add
215	[BUG]  [BUGGY]  int  chiSquare  =  Double.NaN;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =  Double.NaN;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  chiSquare  =  Double.NaN;	  double    chiSquare    =    Double.NaN;    long    chiSquare    =    Double.NaN;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
216	[BUG]  [BUGGY]  double  chiSquare  =  2;  double  chiSquare  =  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  2;  double  chiSquare  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    2;    double  chiSquare  =  2;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	77	None	add
217	[BUG]  [BUGGY]  double  chiSquare  =  2;  Double  chiSquare  =  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  2;  Double  chiSquare  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    2;    Double  chiSquare  =  2;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	77	None	add
218	[BUG]  [BUGGY]  double  chiSquare  =  2;  int  chiSquare  =  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  2;  int  chiSquare  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    2;    int  chiSquare  =  2;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	77	None	add
219	[BUG]  [BUGGY]  double  chiSquare  =  2;  long  chiSquare  =  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  2;  long  chiSquare  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    2;    long  chiSquare  =  2;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	77	None	add
220	[BUG]  [BUGGY]  double  chiSquare  =  2;  chiSquare  =  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  2;  chiSquare  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    2;    chiSquare  =  2;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	77	None	add
221	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  1);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  1);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainders.length,  1);	  double    chiSquare    =    Math.min(remainders.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainders	109	None	replace
222	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  2);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  2);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainders.length,  2);	  double    chiSquare    =    Math.min(remainders.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainders	109	None	replace
223	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(results.length,  1);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(results.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(results.length,  1);	  double    chiSquare    =    Math.max(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	58	None	replace
224	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(results.length,  2);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(results.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(results.length,  2);	  double    chiSquare    =    Math.max(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	58	None	replace
225	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(resultsWeights.length,  0);  [CE]  cannot  find  symbol  resultsWeights  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(resultsWeights.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(resultsWeights.length,  0);	  double    chiSquare    =    Math.max(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	58	None	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(rows,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.max(rows,  0);	  double    chiSquare    =    Math.max(results.length,    0);    	compilable	  [FE]  AssertionFailedError  	58	1	replace
227	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(rows,  0);  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(rows,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(rows,  0);	  double    chiSquare    =    Math.max(results.length,    0);    	compilable	  [FE]  AssertionFailedError  	58	1	replace
228	[BUG]  [BUGGY]  double[][]  rows  =  function.getColumns();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  function.getColumns();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  function.getColumns();	  double[][]    rows    =    function.getRows();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
229	[BUG]  [BUGGY]  double[][]  rows  =  this.function.getRows();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  this.function.getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  this.function.getRows();	  double[][]    rows    =    function.getRows();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
230	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  double  chiSquare  =  Math.min(rows,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  double  chiSquare  =  Math.min(rows,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(rows,    0);    double  chiSquare  =  Math.min(rows,  0);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	34	None	add
231	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  Double  chiSquare  =  Math.min(rows,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  Double  chiSquare  =  Math.min(rows,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(rows,    0);    Double  chiSquare  =  Math.min(rows,  0);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	34	None	add
232	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  double  chiSquare  =  Math.min(rows,  0,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  double  chiSquare  =  Math.min(rows,  0,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(rows,    0);    double  chiSquare  =  Math.min(rows,  0,  0);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	34	None	add
233	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  int  chiSquare  =  Math.min(rows,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  int  chiSquare  =  Math.min(rows,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(rows,    0);    int  chiSquare  =  Math.min(rows,  0);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	34	None	add
234	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  long  chiSquare  =  Math.min(rows,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  long  chiSquare  =  Math.min(rows,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(rows,    0);    long  chiSquare  =  Math.min(rows,  0);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	34	None	add
235	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  double  chiSquare  =(rows  >  1)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  double  chiSquare  =(rows  >  1)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    1)?    0    :    1;    double  chiSquare  =(rows  >  1)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	63	None	add
236	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  Double  chiSquare  =(rows  >  1)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  Double  chiSquare  =(rows  >  1)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    1)?    0    :    1;    Double  chiSquare  =(rows  >  1)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	63	None	add
237	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  int  chiSquare  =(rows  >  1)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  int  chiSquare  =(rows  >  1)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    1)?    0    :    1;    int  chiSquare  =(rows  >  1)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	63	None	add
238	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  long  chiSquare  =(rows  >  1)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  long  chiSquare  =(rows  >  1)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    1)?    0    :    1;    long  chiSquare  =(rows  >  1)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	63	None	add
239	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  double  chiSquare  =(rows  >  1)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  double  chiSquare  =(rows  >  1)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    1)?    0    :    1;    double  chiSquare  =(rows  >  1)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	63	None	add
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  0)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  <  0)?  1  :  1;	  double    chiSquare    =(rows    >    0)?    1    :    1;    	compilable	  [FE]  AssertionFailedError  	112	1	replace
241	[BUG]  [BUGGY]  double  chiSquare  =(rows  <  0)?  1  :  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  0)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  <  0)?  1  :  1;	  double    chiSquare    =(rows    >    0)?    1    :    1;    	compilable	  [FE]  AssertionFailedError  	112	1	replace
242	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  double  chiSquare  =  Math.min(1,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  double  chiSquare  =  Math.min(1,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(1,    rows);    double  chiSquare  =  Math.min(1,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	100	None	add
243	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  Double  chiSquare  =  Math.min(1,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  Double  chiSquare  =  Math.min(1,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(1,    rows);    Double  chiSquare  =  Math.min(1,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	100	None	add
244	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  double  chiSquare  =  Math.min(2,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  double  chiSquare  =  Math.min(2,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(1,    rows);    double  chiSquare  =  Math.min(2,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	100	None	add
245	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  int  chiSquare  =  Math.min(1,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  int  chiSquare  =  Math.min(1,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(1,    rows);    int  chiSquare  =  Math.min(1,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	100	None	add
246	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  double  chiSquare  =  Math.min(1,  columns);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  double  chiSquare  =  Math.min(1,  columns);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(1,    rows);    double  chiSquare  =  Math.min(1,  columns);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	100	None	add
247	[BUG]  [BUGGY]  double  chiSquare  =  Math.abs(resultsWeights.length);  [CE]  cannot  find  symbol  resultsWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.abs(resultsWeights.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.abs(resultsWeights.length);	  double    chiSquare    =    Math.abs(results.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	96	None	replace
248	[BUG]  [BUGGY]  double  chiSquare  =  Math.abs(results.length  -  1);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.abs(results.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.abs(results.length  -  1);	  double    chiSquare    =    Math.abs(results.length);    	non-compiled	[CE]  cannot  find  symbol  results	96	None	replace
249	[BUG]  [BUGGY]  double  chiSquare  =  Math.abs(results.length  +  1);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.abs(results.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.abs(results.length  +  1);	  double    chiSquare    =    Math.abs(results.length);    	non-compiled	[CE]  cannot  find  symbol  results	96	None	replace
250	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  double  chiSquare  =  Math.max(0,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  double  chiSquare  =  Math.max(0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.max(0,    rows);    double  chiSquare  =  Math.max(0,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	44	None	add
251	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  Double  chiSquare  =  Math.max(0,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  Double  chiSquare  =  Math.max(0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.max(0,    rows);    Double  chiSquare  =  Math.max(0,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	44	None	add
252	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  double  chiSquare  =  Math.max(0,  columns);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  double  chiSquare  =  Math.max(0,  columns);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.max(0,    rows);    double  chiSquare  =  Math.max(0,  columns);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	44	None	add
253	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  double  chiSquare  =  Math.max(0,  fields);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  double  chiSquare  =  Math.max(0,  fields);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.max(0,    rows);    double  chiSquare  =  Math.max(0,  fields);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	44	None	add
254	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  double  chiSquare  =  Math.max(0,  row);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  double  chiSquare  =  Math.max(0,  row);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.max(0,    rows);    double  chiSquare  =  Math.max(0,  row);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	44	None	add
255	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  0,  rows.length);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  0,  rows.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows,  0,  rows.length);	  double    chiSquare    =    Math.min(rows.length,    0);    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
256	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows.length,  2);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows.length,  2);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows.length,  2);	  double    chiSquare    =    Math.min(rows.length,    0);    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
257	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows.length,  0,  rows.length);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows.length,  0,  rows.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows.length,  0,  rows.length);	  double    chiSquare    =    Math.min(rows.length,    0);    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
258	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  residuals.length);  [CE]  cannot  find  symbol  remainders  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  residuals.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainders.length,  residuals.length);	  double    chiSquare    =    Math.min(remainders.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	103	None	replace
259	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  residualsWeights.length);  [CE]  cannot  find  symbol  remainders  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  residualsWeights.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainders.length,  residualsWeights.length);	  double    chiSquare    =    Math.min(remainders.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	103	None	replace
260	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variable.getChiSquare(),  cost);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(variable.getChiSquare(),  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(variable.getChiSquare(),  cost);	  double    chiSquare    =    Math.sqrt(variable.getChiSquare());    	non-compiled	[CE]  cannot  find  symbol  	110	None	replace
261	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variable,  cost.getChiSquare());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(variable,  cost.getChiSquare());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(variable,  cost.getChiSquare());	  double    chiSquare    =    Math.sqrt(variable.getChiSquare());    	non-compiled	[CE]  cannot  find  symbol  	110	None	replace
262	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variable,  function.getChiSquare());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(variable,  function.getChiSquare());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(variable,  function.getChiSquare());	  double    chiSquare    =    Math.sqrt(variable.getChiSquare());    	non-compiled	[CE]  cannot  find  symbol  	110	None	replace
263	[BUG]  [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  double  chiSquare  =  Double.NEGATIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  double  chiSquare  =  Double.NEGATIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.NEGATIVE_INFINITY;    double  chiSquare  =  Double.NEGATIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	91	None	add
264	[BUG]  [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  Double  chiSquare  =  Double.NEGATIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  Double  chiSquare  =  Double.NEGATIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.NEGATIVE_INFINITY;    Double  chiSquare  =  Double.NEGATIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	91	None	add
265	[BUG]  [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  int  chiSquare  =  Double.NEGATIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  int  chiSquare  =  Double.NEGATIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.NEGATIVE_INFINITY;    int  chiSquare  =  Double.NEGATIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	91	None	add
266	[BUG]  [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  long  chiSquare  =  Double.NEGATIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  long  chiSquare  =  Double.NEGATIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.NEGATIVE_INFINITY;    long  chiSquare  =  Double.NEGATIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	91	None	add
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  long  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	long  chiSquare  =(rows  >  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    long    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	25	1	replace
268	[BUG]  [BUGGY]  long  chiSquare  =(rows  >  0)?  0  :  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  long  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	long  chiSquare  =(rows  >  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    long    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	25	1	replace
269	[BUG]  [BUGGY]  int  chiSquare  =(rows  >  0)?  0  :  1;  long  chiSquare  =(rows  >  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  chiSquare  =(rows  >  0)?  0  :  1;  long  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  chiSquare  =(rows  >  0)?  0  :  1;  long  chiSquare  =(rows  >  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    long    chiSquare    =(rows    >    0)?    0    :    1;    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	25	None	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  2);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(rows,  2);	  double    chiSquare    =    Math.min(results.length,    2);    	compilable	  [FE]  AssertionFailedError  	37	1	replace
271	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  2);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  2);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows,  2);	  double    chiSquare    =    Math.min(results.length,    2);    	compilable	  [FE]  AssertionFailedError  	37	1	replace
272	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results,  rows.length);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results,  rows.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results,  rows.length);	  double    chiSquare    =    Math.min(rows.length,    results.length);    	non-compiled	[CE]  cannot  find  symbol  results	20	None	replace
273	[BUG]  [BUGGY]  Double  chiSquare  =  Math.min(results.length,  rows.length);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Math.min(results.length,  rows.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  Math.min(results.length,  rows.length);	  double    chiSquare    =    Math.min(rows.length,    results.length);    	non-compiled	[CE]  cannot  find  symbol  results	20	None	replace
274	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  rows);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  rows);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  rows);	  double    chiSquare    =    Math.min(rows.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	19	None	replace
275	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(resultsWeights.length,  rows);  [CE]  cannot  find  symbol  resultsWeights  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(resultsWeights.length,  rows);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(resultsWeights.length,  rows);	  double    chiSquare    =    Math.min(rows.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	19	None	replace
276	[BUG]  [BUGGY]  Double  chiSquare  =(rows  >  1)?  0  :  1;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =(rows  >  1)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =(rows  >  1)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    Double    chiSquare    =(rows    >    0)?    0    :    1;    	non-compiled	[CE]  incompatible  types	23	None	replace
277	[BUG]  [BUGGY]  double[][]  rows  =  this.jF.getColumns();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  this.jF.getColumns();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  this.jF.getColumns();	  double[][]    rows    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
278	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INT;  [CE]  cannot  find  symbol  POSITIVE_INT  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INT;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INT;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INT;    	non-compiled	[CE]  cannot  find  symbol  POSITIVE_INT	108	None	replace
279	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(variables,  rows);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(variables,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(variables,  rows);	  double    chiSquare    =    Double.parseDouble(ji,    rows);    	non-compiled	[CE]  cannot  find  symbol  	90	None	replace
280	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(period,  rows);  [CE]  cannot  find  symbol  period  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(period,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(period,  rows);	  double    chiSquare    =    Double.parseDouble(ji,    rows);    	non-compiled	[CE]  cannot  find  symbol  period	90	None	replace
281	[BUG]  [BUGGY]  Double[][]  rows  =  function.getRows();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double[][]  rows  =  function.getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double[][]  rows  =  function.getRows();	  double[][]    rows    =    function.getRows();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
282	[BUG]  [BUGGY]  double[][]  rows  =  function.getVectorRows();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  function.getVectorRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  function.getVectorRows();	  double[][]    rows    =    function.getRows();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
283	[BUG]  [BUGGY]  null  chiSquare  =  Math.min(0,  rows);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  null  chiSquare  =  Math.min(0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	null  chiSquare  =  Math.min(0,  rows);	  double    chiSquare    =    Math.min(0,    rows);    long    chiSquare    =    Math.min(0,    rows);    	non-compiled	[CE]  not  a  statement	29	None	replace
284	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  1);  [CE]  cannot  find  symbol  remainingsWeights  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  1);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(remainingsWeights.length,  1);	  int    rows    =    Math.min(remainings.length,    1);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	67	None	replace
285	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  1);  [CE]  cannot  find  symbol  resultsWeights  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  1);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(resultsWeights.length,  1);	  int    rows    =    Math.min(remainings.length,    1);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	67	None	replace
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  rows  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(1,  rows  +  1);	  double    chiSquare    =    Math.min(1,    rows);    	compilable	  [FE]  AssertionFailedError  	101	1	replace
287	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  rows  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  rows  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(1,  rows  +  1);	  double    chiSquare    =    Math.min(1,    rows);    	compilable	  [FE]  AssertionFailedError  	101	1	replace
288	[BUG]  [BUGGY]  double  chiSquare  =  getSecond();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  getSecond();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  getSecond();	  double    chiSquare    =    getValue();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
289	[BUG]  [BUGGY]  double[][]  rows  =  getSeconds();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getSeconds();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getSeconds();	  double[][]    rows    =    getColumns();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
290	[BUG]  [BUGGY]  double[][]  rows  =  this.jF.getRemainders();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  this.jF.getRemainders();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  this.jF.getRemainders();	  double[][]    rows    =    jF.getRemainders();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
291	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  dataItems);  [CE]  cannot  find  symbol  dataItems  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  dataItems);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  dataItems);	  double    chiSquare    =    Double.parseDouble(jF,    rows);    	non-compiled	[CE]  cannot  find  symbol  dataItems	15	None	replace
292	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  this.periods);  [CE]  cannot  find  symbol  periods  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  this.periods);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  this.periods);	  double    chiSquare    =    Double.parseDouble(jF,    rows);    	non-compiled	[CE]  cannot  find  symbol  periods	15	None	replace
293	[BUG]  [BUGGY]  double[][]  rows  =  this.jf.getColumns();  [CE]  cannot  find  symbol  jf  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  this.jf.getColumns();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  this.jf.getColumns();	  double[][]    rows    =    this.jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  jf	83	None	replace
294	[BUG]  [BUGGY]  double[][]  rows  =  this.jf.getVariants();  [CE]  cannot  find  symbol  jf  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  this.jf.getVariants();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  this.jf.getVariants();	  double[][]    rows    =    this.jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  jf	83	None	replace
295	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[ranges.size()  ]);  [CE]  cannot  find  symbol  ranges  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[ranges.size()  ]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[ranges.size()  ]);	  double[][]    rows    =    getRows().clone();    	non-compiled	[CE]  cannot  find  symbol  ranges	10	None	replace
296	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)variant).getChiSquare();  [CE]  cannot  find  symbol  variant  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)variant).getChiSquare();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)variant).getChiSquare();	  ((    VectorialConvergenceChecker)remaining).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  variant	3	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.POSITIVE_INFINITY  /  1;	  double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    	compilable	  [FE]  AssertionFailedError  	70	1	replace
298	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  /  1;	  double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    	compilable	  [FE]  AssertionFailedError  	70	1	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  4;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.POSITIVE_INFINITY  +  4;	  double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    	compilable	  [FE]  AssertionFailedError  	70	1	replace
300	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  4;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  4;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  +  4;	  double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    	compilable	  [FE]  AssertionFailedError  	70	1	replace
301	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)checker).setChiSquare(new  double[]  {  0  }  );  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)checker).setChiSquare(new  double[]  {  0  }  );  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)checker).setChiSquare(new  double[]  {  0  }  );	  ((    VectorialConvergenceChecker)checker).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
302	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)checker).setChiSquare(this.chiSquare);  [CE]  cannot  find  symbol  chiSquare  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)checker).setChiSquare(this.chiSquare);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)checker).setChiSquare(this.chiSquare);	  ((    VectorialConvergenceChecker)checker).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  chiSquare	94	None	replace
303	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  2);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  2);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(remainingsWeights.length,  2);	  int    rows    =    Math.min(remainings.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	68	None	replace
304	[BUG]  [BUGGY]  double[][]  rows  =  super.getRows();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  super.getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  super.getRows();	  double[][]    rows    =    ji.getRows();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
305	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(ji,  rows,  cost);  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(ji,  rows,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(ji,  rows,  cost);	  double    chiSquare    =    Double.parseDouble(rows,    cost);    	non-compiled	[CE]  cannot  find  symbol  ji	16	None	replace
306	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  long  chiSquare  =(rows  >  0)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  long  chiSquare  =(rows  >  0)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    0)?    1    :    1;    long  chiSquare  =(rows  >  0)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	111	None	add
307	[BUG]  [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  double  chiSquare  =(rows  <  0)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  double  chiSquare  =(rows  <  0)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    <    0)?    0    :    1;    double  chiSquare  =(rows  <  0)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	add
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	71	1	replace
309	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	71	1	replace
310	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  chiSquare  =  Math.min(0,  this.cols);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  chiSquare  =  Math.min(0,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    this.cols);    chiSquare  =  Math.min(0,  this.cols);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	47	None	add
311	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(raws.length,  0);  [CE]  cannot  find  symbol  raws  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(raws.length,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(raws.length,  0);	  double    chiSquare    =    Math.min(rows.length,    0);    	non-compiled	[CE]  cannot  find  symbol  raws	33	None	replace
312	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  3);  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  3);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(remainders.length,  3);	  int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainders	4	None	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  1  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  ==  0)?  1  :  0;	  double    chiSquare    =(rows    ==    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
314	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  0)?  1  :  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  1  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  ==  0)?  1  :  0;	  double    chiSquare    =(rows    ==    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
315	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)this).setChiSquare(new  double[]  {  0  }  );  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)this).setChiSquare(new  double[]  {  0  }  );  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)this).setChiSquare(new  double[]  {  0  }  );	  ((    VectorialConvergenceChecker)this).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
316	[BUG]  [BUGGY]  double  chiSquare  =  Math.abs(resultsWeight);  [CE]  cannot  find  symbol  resultsWeight  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.abs(resultsWeight);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.abs(resultsWeight);	  double    chiSquare    =    Math.abs(results.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWeight	96	None	replace
317	[BUG]  [BUGGY]  double  chiSquare  =  Math.abs(resultsWidth);  [CE]  cannot  find  symbol  resultsWidth  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.abs(resultsWidth);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.abs(resultsWidth);	  double    chiSquare    =    Math.abs(results.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWidth	96	None	replace
318	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainingsWeights.length,  residuals.length);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainingsWeights.length,  residuals.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainingsWeights.length,  residuals.length);	  double    chiSquare    =    Math.min(remainings.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	21	None	replace
319	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  0);  [CE]  cannot  find  symbol  remainings  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainings.length,  0);	  double    chiSquare    =    Math.min(rows,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	35	None	replace
320	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  int  chiSquare  =  Math.max(0,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  int  chiSquare  =  Math.max(0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.max(0,    rows);    int  chiSquare  =  Math.max(0,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	44	None	add
321	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  long  chiSquare  =  Math.max(0,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  long  chiSquare  =  Math.max(0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.max(0,    rows);    long  chiSquare  =  Math.max(0,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	44	None	add
322	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.periods.length);  [CE]  cannot  find  symbol  periods  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.periods.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.periods.length);	  double    chiSquare    =    Math.min(0,    this.periods);    	non-compiled	[CE]  cannot  find  symbol  periods	46	None	replace
323	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.periods,  0);  [CE]  cannot  find  symbol  periods  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.periods,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.periods,  0);	  double    chiSquare    =    Math.min(0,    this.periods);    	non-compiled	[CE]  cannot  find  symbol  periods	46	None	replace
324	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  long  chiSquare  =  Math.min(1,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  long  chiSquare  =  Math.min(1,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(1,    rows);    long  chiSquare  =  Math.min(1,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	100	None	add
325	[BUG]  [BUGGY]  Double  chiSquare  =  Math.min(0,  columns);  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Math.min(0,  columns);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  Math.min(0,  columns);	  double    chiSquare    =    Math.min(0,    rows);    double    chiSquare    =    Math.min(0,    columns);    	non-compiled	[CE]  cannot  find  symbol  columns	28	None	replace
326	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[requiresWeights.length]);  [CE]  cannot  find  symbol  requiresWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[requiresWeights.length]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[requiresWeights.length]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.length]);    	non-compiled	[CE]  cannot  find  symbol  requiresWeights	93	None	replace
327	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[regulars.length]);  [CE]  cannot  find  symbol  regulars  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[regulars.length]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[regulars.length]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.length]);    	non-compiled	[CE]  cannot  find  symbol  regulars	93	None	replace
328	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(resultsWeights.length,  1);  [CE]  cannot  find  symbol  resultsWeights  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(resultsWeights.length,  1);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(resultsWeights.length,  1);	  double    chiSquare    =    Math.min(results.length,    1);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	36	None	replace
329	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  ji.series.length);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  ji.series.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  ji.series.length);	  double    chiSquare    =    Math.min(results.length,    ji.rows.length);    	non-compiled	[CE]  cannot  find  symbol  results	85	None	replace
330	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  ji.rows.length);  [CE]  cannot  find  symbol  remainders  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  ji.rows.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainders.length,  ji.rows.length);	  double    chiSquare    =    Math.min(results.length,    ji.rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	85	None	replace
331	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  ji.rows);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  ji.rows);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  ji.rows);	  double    chiSquare    =    Math.min(results.length,    ji.rows.length);    	non-compiled	[CE]  cannot  find  symbol  results	85	None	replace
332	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(this.period);  [CE]  cannot  find  symbol  period  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(this.period);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(this.period);	  double    chiSquare    =    Math.sqrt(rows);    	non-compiled	[CE]  cannot  find  symbol  period	57	None	replace
333	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(JF_CHECKS);  [CE]  cannot  find  symbol  JF_CHECKS  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(JF_CHECKS);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(JF_CHECKS);	  double    chiSquare    =    Math.sqrt(rows);    	non-compiled	[CE]  cannot  find  symbol  JF_CHECKS	57	None	replace
334	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(JF_ChittleSupplier);  [CE]  cannot  find  symbol  JF_ChittleSupplier  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(JF_ChittleSupplier);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(JF_ChittleSupplier);	  double    chiSquare    =    Math.sqrt(rows);    	non-compiled	[CE]  cannot  find  symbol  JF_ChittleSupplier	57	None	replace
335	[BUG]  [BUGGY]  Double  chiSquare  =  0;  chiSquare  =  0;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  0;  chiSquare  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  0;  chiSquare  =  0;	  double    chiSquare    =    1;    chiSquare    =    1;    	non-compiled	[CE]  incompatible  types	55	None	replace
336	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[relativesWeights.size()  ]);  [CE]  cannot  find  symbol  relativesWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[relativesWeights.size()  ]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[relativesWeights.size()  ]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  relativesWeights	102	None	replace
337	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(resultsWeights,  0);  [CE]  cannot  find  symbol  resultsWeights  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(resultsWeights,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(resultsWeights,  0);	  double    chiSquare    =    Math.max(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	58	None	replace
338	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double    chiSquare    =    Double.POSITIVE_INFINITY;    chiSquare  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	72	None	add
339	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Double  chiSquare  =  Double.POSITIVE_INFINITY;  this.remainings  =  new  double[Row.MAX_ITERATIONS];  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Double  chiSquare  =  Double.POSITIVE_INFINITY;  this.remainings  =  new  double[Row.MAX_ITERATIONS];  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double    chiSquare    =    Double.POSITIVE_INFINITY;    Double  chiSquare  =  Double.POSITIVE_INFINITY;  this.remainings  =  new  double[Row.MAX_ITERATIONS];	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	72	None	add
340	[BUG]  [BUGGY]  double  chiSquare  =  0;  int  chiSquare  =  0;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  0;  int  chiSquare  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  0;  int  chiSquare  =  0;	  double    chiSquare    =    1;    int    chiSquare    =    1;    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	53	None	replace
341	[BUG]  [BUGGY]  int  rows  =  getLeftCount()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  getLeftCount()  +  1;  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getLeftCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
342	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  long  chiSquare  =(rows  ==  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  long  chiSquare  =(rows  ==  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    ==    0)?    0    :    1;    long  chiSquare  =(rows  ==  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	61	None	add
343	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  double  chiSquare  =(rows  ==  0)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  double  chiSquare  =(rows  ==  0)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    ==    0)?    0    :    1;    double  chiSquare  =(rows  ==  0)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	61	None	add
344	[BUG]  [BUGGY]  double[][]  rows  =  this._jf.getRows();  [CE]  cannot  find  symbol  _jf  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  this._jf.getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  this._jf.getRows();	  double[][]    rows    =    _jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  _jf	106	None	replace
345	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  resultsWeights.length);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  resultsWeights.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  resultsWeights.length);	  double    chiSquare    =    Math.min(results.length,    results.length);    	non-compiled	[CE]  cannot  find  symbol  results	86	None	replace
346	[BUG]  [BUGGY]  double[][]  rows  =  getRows().values().clone();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().values().clone();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().values().clone();	  double[][]    rows    =    getRows().clone();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(0,  this.rows  -  1);	  double    chiSquare    =    Math.min(0,    this.rows);    	compilable	  [FE]  AssertionFailedError  	50	1	replace
348	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.rows  -  1);	  double    chiSquare    =    Math.min(0,    this.rows);    	compilable	  [FE]  AssertionFailedError  	50	1	replace
349	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  rows  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(1,  rows  -  1);	  double    chiSquare    =    Math.min(1,    rows);    	compilable	  [FE]  AssertionFailedError  	101	1	replace
350	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  rows  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  rows  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(1,  rows  -  1);	  double    chiSquare    =    Math.min(1,    rows);    	compilable	  [FE]  AssertionFailedError  	101	1	replace
351	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Double  chiSquare  =  Double.POSITIVE_INFINITY;  this.remainings  =  new  double[rows][rows];  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  Double  chiSquare  =  Double.POSITIVE_INFINITY;  this.remainings  =  new  double[rows][rows];  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double    chiSquare    =    Double.POSITIVE_INFINITY;    Double  chiSquare  =  Double.POSITIVE_INFINITY;  this.remainings  =  new  double[rows][rows];	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	72	None	add
352	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)filter).getChiSquare();  [CE]  cannot  find  symbol  filter  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)filter).getChiSquare();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)filter).getChiSquare();	  ((    VectorialConvergenceChecker)checker).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  filter	94	None	replace
353	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  remainings.length);  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  remainings.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainings.length,  remainings.length);	  double    chiSquare    =    Math.min(remainings.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	21	None	replace
354	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  residualsWeights.length);  [CE]  cannot  find  symbol  remainings  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  residualsWeights.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainings.length,  residualsWeights.length);	  double    chiSquare    =    Math.min(remainings.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	21	None	replace
355	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  residuals.length);  [CE]  cannot  find  symbol  remainings  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  residuals.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainings.length,  residuals.length);	  double    chiSquare    =    Math.min(remainings.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	21	None	replace
356	[BUG]  [BUGGY]  double[][]  rows  =  jFrame.getRemainders();  [CE]  cannot  find  symbol  jFrame  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  jFrame.getRemainders();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  jFrame.getRemainders();	  double[][]    rows    =    jF.getRemainders();    	non-compiled	[CE]  cannot  find  symbol  jFrame	107	None	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(10.0,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(10.0,  0);	  double    chiSquare    =    Math.min(rows,    0);    	compilable	  [FE]  AssertionFailedError  	35	1	replace
358	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(10.0,  0);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(10.0,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(10.0,  0);	  double    chiSquare    =    Math.min(rows,    0);    	compilable	  [FE]  AssertionFailedError  	35	1	replace
359	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  ji.length);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(results.length,  ji.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  ji.length);	  double    chiSquare    =    Math.min(results.length,    results.length);    	non-compiled	[CE]  cannot  find  symbol  results	86	None	replace
360	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  1,  rows);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  1,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  1,  rows);	  double    chiSquare    =    Double.parseDouble(jF,    rows);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	15	None	replace
361	[BUG]  [BUGGY]  int  rows  =  getColumnsCount();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  getColumnsCount();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getColumnsCount();	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
362	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  remainings.length);  [CE]  cannot  find  symbol  remainders  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  remainings.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainders.length,  remainings.length);	  double    chiSquare    =    Math.min(remainders.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	103	None	replace
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  2  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  >  0)?  2  :  1;	  double    chiSquare    =(rows    >    0)?    1    :    1;    	compilable	  [FE]  AssertionFailedError  	112	1	replace
364	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  2  :  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  2  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  >  0)?  2  :  1;	  double    chiSquare    =(rows    >    0)?    1    :    1;    	compilable	  [FE]  AssertionFailedError  	112	1	replace
365	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[results.length]);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[results.length]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[results.length]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.length]);    	non-compiled	[CE]  cannot  find  symbol  results	93	None	replace
366	[BUG]  [BUGGY]  double[][]  rows  =  this.resistance.getRows();  [CE]  cannot  find  symbol  resistance  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  this.resistance.getRows();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  this.resistance.getRows();	  double[][]    rows    =    ji.getRows();    	non-compiled	[CE]  cannot  find  symbol  resistance	81	None	replace
367	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  int  chiSquare  =(rows  >  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  int  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  >  0)?  1  :  1;  int  chiSquare  =(rows  >  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    int    chiSquare    =(rows    >    0)?    0    :    1;    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	24	None	replace
368	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  double  chiSquare  =(rows  >  2)?  1  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  double  chiSquare  =(rows  >  2)?  1  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    1)?    1    :    1;    double  chiSquare  =(rows  >  2)?  1  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	59	None	add
369	[BUG]  [BUGGY]  double[][]  rows  =  function.getChiSquares();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  function.getChiSquares();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  function.getChiSquares();	  double[][]    rows    =    function.getRows();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
370	[BUG]  [BUGGY]  int  rows  =  this.getColumnCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  this.getColumnCount();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  this.getColumnCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
371	[BUG]  [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  double  chiSquare  =(rows  >=  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  double  chiSquare  =(rows  >=  0)?  0  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    <    0)?    0    :    1;    double  chiSquare  =(rows  >=  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	add
372	[BUG]  [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  double  chiSquare  =  Double.NEGATIVE_INFINITY;  System.arraycopy(rows,  0,  chiSquare,  0,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  double  chiSquare  =  Double.NEGATIVE_INFINITY;  System.arraycopy(rows,  0,  chiSquare,  0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.NEGATIVE_INFINITY;    double  chiSquare  =  Double.NEGATIVE_INFINITY;  System.arraycopy(rows,  0,  chiSquare,  0,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	91	None	add
373	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(variables,  jF);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(variables,  jF);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(variables,  jF);	  double    chiSquare    =    Double.parseDouble(jF);    	non-compiled	[CE]  cannot  find  symbol  	17	None	replace
374	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(last,  rows,  cost);  [CE]  cannot  find  symbol  last  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(last,  rows,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(last,  rows,  cost);	  double    chiSquare    =    Double.parseDouble(rows,    cost);    	non-compiled	[CE]  cannot  find  symbol  last	16	None	replace
375	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(last,  rows);  [CE]  cannot  find  symbol  last  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(last,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(last,  rows);	  double    chiSquare    =    Double.parseDouble(ji,    rows);    	non-compiled	[CE]  cannot  find  symbol  last	90	None	replace
376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(1,  this.cols);	  double    chiSquare    =    Math.min(0,    this.cols);    	compilable	  [FE]  AssertionFailedError  	48	1	replace
377	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  this.cols);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  this.cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(1,  this.cols);	  double    chiSquare    =    Math.min(0,    this.cols);    	compilable	  [FE]  AssertionFailedError  	48	1	replace
378	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  ji.rows.length);  [CE]  package  ji  does  not  exist  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  ji.rows.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows,  ji.rows.length);	  double    chiSquare    =    Math.min(results.length,    ji.rows.length);    	non-compiled	[CE]  package  ji  does  not  exist	85	None	replace
379	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  columns);  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  columns);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(0,  columns);	  double    chiSquare    =    Math.min(0,    rows);    double    chiSquare    =    Math.min(0,    columns);    	non-compiled	[CE]  cannot  find  symbol  columns	28	None	replace
380	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  columns);  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  columns);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(1,  columns);	  double    chiSquare    =    Math.min(0,    rows);    double    chiSquare    =    Math.min(0,    columns);    	non-compiled	[CE]  cannot  find  symbol  columns	28	None	replace
381	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  double  chiSquare  =(rows  ==  0)?  0  :  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  double  chiSquare  =(rows  ==  0)?  0  :  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    ==    0)?    0    :    1;    double  chiSquare  =(rows  ==  0)?  0  :  2;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	61	None	add
382	[BUG]  [BUGGY]  double  chiSquare  =  Math.abs(remainders.length);  [CE]  cannot  find  symbol  remainders  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.abs(remainders.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.abs(remainders.length);	  double    chiSquare    =    Math.abs(results.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	96	None	replace
383	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  rows.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  rows.length  -  1);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows,  rows.length  -  1);	  double    chiSquare    =    Math.min(rows.length,    0);    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
384	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  rows.length);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  rows.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows,  rows.length);	  double    chiSquare    =    Math.min(rows.length,    0);    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
385	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  this.period);  [CE]  cannot  find  symbol  period  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.max(0,  this.period);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(0,  this.period);	  double    chiSquare    =    Math.max(0,    rows);    	non-compiled	[CE]  cannot  find  symbol  period	45	None	replace
386	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainders.size()  ]);  [CE]  cannot  find  symbol  remainders  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainders.size()  ]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[remainders.size()  ]);	  double[][]    rows    =    getRows().toArray(new    double[rows.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  remainders	9	None	replace
387	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainings.size()  +  1]);  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainings.size()  +  1]);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[remainings.size()  +  1]);	  double[][]    rows    =    getRows().toArray(new    double[remainings.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  remainings	102	None	replace
388	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variable,  factor.getChiSquare());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(variable,  factor.getChiSquare());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(variable,  factor.getChiSquare());	  double    chiSquare    =    Math.sqrt(variable.getChiSquare());    	non-compiled	[CE]  cannot  find  symbol  	110	None	replace
389	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  getColumnCount()  +  1;  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getColumnCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  >  1)?  1  :  0;	  double    chiSquare    =(rows    >    1)?    1    :    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
391	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  >  1)?  1  :  0;	  double    chiSquare    =(rows    >    1)?    1    :    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
392	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INT  |  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  POSITIVE_INT  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INT  |  Double.POSITIVE_INFINITY;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INT  |  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INT;    	non-compiled	[CE]  cannot  find  symbol  POSITIVE_INT	108	None	replace
393	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(JF_CHECK_SQURE);  [CE]  cannot  find  symbol  JF_CHECK_SQURE  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(JF_CHECK_SQURE);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(JF_CHECK_SQURE);	  double    chiSquare    =    Math.sqrt(rows);    	non-compiled	[CE]  cannot  find  symbol  JF_CHECK_SQURE	57	None	replace
394	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(this.choice);  [CE]  cannot  find  symbol  choice  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.sqrt(this.choice);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(this.choice);	  double    chiSquare    =    Math.sqrt(rows);    	non-compiled	[CE]  cannot  find  symbol  choice	57	None	replace
395	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  fields);  [CE]  cannot  find  symbol  fields  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(1,  fields);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(1,  fields);	  double    chiSquare    =    Math.min(0,    rows);    double    chiSquare    =    Math.min(0,    fields);    	non-compiled	[CE]  cannot  find  symbol  fields	30	None	replace
396	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  variables);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  variables);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  variables);	  double    chiSquare    =    Double.parseDouble(variables);    	non-compiled	[CE]  cannot  find  symbol  	18	None	replace
397	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  double  chiSquare  =  Double.POSITIVE_INFINITY  +  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  double  chiSquare  =  Double.POSITIVE_INFINITY  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.POSITIVE_INFINITY    +    1;    double  chiSquare  =  Double.POSITIVE_INFINITY  +  2;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	69	None	add
398	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  3);  [CE]  cannot  find  symbol  remainings  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  int  rows  =  Math.min(remainings.length,  3);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(remainings.length,  3);	  int    rows    =    Math.min(remainings.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainings	68	None	replace
399	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)this).computeSquares();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)this).computeSquares();  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)this).computeSquares();	  ((    VectorialConvergenceChecker)this).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
400	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)this).setChiSquare(0,  0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  ((  VectorialConvergenceChecker)this).setChiSquare(0,  0);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)this).setChiSquare(0,  0);	  ((    VectorialConvergenceChecker)this).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
401	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  results.length);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {      [BUGGY]  double  chiSquare  =  Math.min(rows,  results.length);  [BUGGY]      double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows,  results.length);	  double    chiSquare    =    Math.min(rows.length,    results.length);    	non-compiled	[CE]  cannot  find  symbol  results	20	None	replace
