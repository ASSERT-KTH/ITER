bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)result).getChiSquare();  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  ((  VectorialConvergenceChecker)result).getChiSquare();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)result).getChiSquare();	      ((    VectorialConvergenceChecker)variate).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  result	9	None	replace
2	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)variate).getChiSquare(0);  [CE]  cannot  find  symbol  variate  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  ((  VectorialConvergenceChecker)variate).getChiSquare(0);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)variate).getChiSquare(0);	      ((    VectorialConvergenceChecker)variate).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  variate	9	None	replace
3	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)remaining).getChiSquare();  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  ((  VectorialConvergenceChecker)remaining).getChiSquare();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)remaining).getChiSquare();	      ((    VectorialConvergenceChecker)variate).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol  remaining	9	None	replace
4	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  2);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  Math.min(remainders.length,  2);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(remainders.length,  2);	      int    rows    =    Math.min(remainders.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainders	14	None	replace
5	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  1);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  Math.min(remainders.length,  1);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(remainders.length,  1);	      int    rows    =    Math.min(remainders.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainders	14	None	replace
6	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  0);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  Math.min(results.length,  0);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(results.length,  0);	      int    rows    =    Math.min(remainders.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	14	None	replace
7	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  1);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  Math.min(results.length,  1);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(results.length,  1);	      int    rows    =    Math.min(remainders.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	14	None	replace
8	[BUG]  [BUGGY]  double[][]  rows  =  getColumns();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  getColumns();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getColumns();	      double[][]    rows    =    getRows();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
9	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[rows.size()  ]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[rows.size()  ]);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[rows.size()  ]);	      double[][]    rows    =    getRows();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
10	[BUG]  [BUGGY]  double[][]  rows  =  getRows().clone();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  getRows().clone();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().clone();	      double[][]    rows    =    getRows();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
11	[BUG]  [BUGGY]  double  chiSquare  =  Double.NaN;  double  chiSquare  =  Double.NaN;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.NaN;  double  chiSquare  =  Double.NaN;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.NaN;    double  chiSquare  =  Double.NaN;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	add
12	[BUG]  [BUGGY]  double  chiSquare  =  Double.NaN;  Double  chiSquare  =  Double.NaN;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.NaN;  Double  chiSquare  =  Double.NaN;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.NaN;    Double  chiSquare  =  Double.NaN;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	add
13	[BUG]  [BUGGY]  double  chiSquare  =  Double.NaN;  int  chiSquare  =  Double.NaN;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.NaN;  int  chiSquare  =  Double.NaN;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.NaN;    int  chiSquare  =  Double.NaN;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	add
14	[BUG]  [BUGGY]  double  chiSquare  =  Double.NaN;  long  chiSquare  =  Double.NaN;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.NaN;  long  chiSquare  =  Double.NaN;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.NaN;    long  chiSquare  =  Double.NaN;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	add
15	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  rows);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.parseDouble(jF,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF,  rows);	  double    chiSquare    =    Double.parseDouble(rows);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	5	None	replace
16	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  cost);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.parseDouble(rows,  cost);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(rows,  cost);	  double    chiSquare    =    Double.parseDouble(rows);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	5	None	replace
17	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jF);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.parseDouble(jF);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jF);	  double    chiSquare    =    Double.parseDouble(rows);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	5	None	replace
18	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(variables);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.parseDouble(variables);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(variables);	  double    chiSquare    =    Double.parseDouble(rows);    	non-compiled	[CE]  cannot  find  symbol  	5	None	replace
19	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows.length,  residuals.length);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(rows.length,  residuals.length);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows.length,  residuals.length);	      double    chiSquare    =    Math.min(results.length,    rows.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
20	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows.length,  results.length);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(rows.length,  results.length);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows.length,  results.length);	      double    chiSquare    =    Math.min(results.length,    rows.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
21	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  rows.length);  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(remainings.length,  rows.length);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainings.length,  rows.length);	      double    chiSquare    =    Math.min(results.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	15	None	replace
22	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  1;  double  chiSquare  =(rows  >  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  1;  double  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    0)?    0    :    1;    double  chiSquare  =(rows  >  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	20	None	add
23	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  1;  Double  chiSquare  =(rows  >  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  1;  Double  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    0)?    0    :    1;    Double  chiSquare  =(rows  >  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	20	None	add
24	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  1;  int  chiSquare  =(rows  >  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  1;  int  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    0)?    0    :    1;    int  chiSquare  =(rows  >  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	20	None	add
25	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  1;  long  chiSquare  =(rows  >  0)?  0  :  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  1;  long  chiSquare  =(rows  >  0)?  0  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    0)?    0    :    1;    long  chiSquare  =(rows  >  0)?  0  :  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	20	None	add
26	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  double  chiSquare  =  Math.min(0,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  double  chiSquare  =  Math.min(0,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    rows);    double  chiSquare  =  Math.min(0,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	18	None	add
27	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  Double  chiSquare  =  Math.min(0,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  Double  chiSquare  =  Math.min(0,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    rows);    Double  chiSquare  =  Math.min(0,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	18	None	add
28	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  double  chiSquare  =  Math.min(0,  columns);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  double  chiSquare  =  Math.min(0,  columns);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    rows);    double  chiSquare  =  Math.min(0,  columns);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	18	None	add
29	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  long  chiSquare  =  Math.min(0,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  long  chiSquare  =  Math.min(0,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    rows);    long  chiSquare  =  Math.min(0,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	18	None	add
30	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  double  chiSquare  =  Math.min(0,  fields);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  double  chiSquare  =  Math.min(0,  fields);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    rows);    double  chiSquare  =  Math.min(0,  fields);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	18	None	add
31	[BUG]  [BUGGY]  double[][]  rows  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  jF.getColumns();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  jF.getColumns();	      double[][]    rows    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
32	[BUG]  [BUGGY]  Double[][]  rows  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  Double[][]  rows  =  jF.getRows();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double[][]  rows  =  jF.getRows();	      double[][]    rows    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
33	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows.length,  0);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(rows.length,  0);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows.length,  0);	      double    chiSquare    =    Math.min(results.length,    0);    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(rows,  0);	      double    chiSquare    =    Math.min(results.length,    0);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
35	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(rows,  0);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(rows,  0);	      double    chiSquare    =    Math.min(results.length,    0);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
36	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  1);  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(results.length,  1);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  1);	      double    chiSquare    =    Math.min(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	12	None	replace
37	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  2);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(results.length,  2);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  2);	      double    chiSquare    =    Math.min(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	12	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.MIN_VALUE;	  double    chiSquare    =    Double.NaN;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
39	[BUG]  [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.MIN_VALUE;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.MIN_VALUE;	  double    chiSquare    =    Double.NaN;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
40	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY;  double  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY;  double  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.POSITIVE_INFINITY;    double  chiSquare  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	add
41	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY;  Double  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY;  Double  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.POSITIVE_INFINITY;    Double  chiSquare  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	add
42	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY;  int  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY;  int  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.POSITIVE_INFINITY;    int  chiSquare  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	add
43	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY;  long  chiSquare  =  Double.POSITIVE_INFINITY;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY;  long  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Double.POSITIVE_INFINITY;    long  chiSquare  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	3	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.max(0,  rows);	  double    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
45	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.max(0,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(0,  rows);	  double    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
46	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.periods);  [CE]  cannot  find  symbol  periods  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  this.periods);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.periods);	  double    chiSquare    =    Math.min(0,    rows);    	non-compiled	[CE]  cannot  find  symbol  periods	19	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(0,  this.cols);	  double    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
48	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  this.cols);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.cols);	  double    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(0,  this.rows);	  double    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
50	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  this.rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(0,  this.rows);	  double    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
51	[BUG]  [BUGGY]  double  chiSquare  =  1;  double  chiSquare  =  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  1;  double  chiSquare  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    1;    double  chiSquare  =  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	add
52	[BUG]  [BUGGY]  double  chiSquare  =  1;  Double  chiSquare  =  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  1;  Double  chiSquare  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    1;    Double  chiSquare  =  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	add
53	[BUG]  [BUGGY]  double  chiSquare  =  1;  int  chiSquare  =  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  1;  int  chiSquare  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    1;    int  chiSquare  =  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	add
54	[BUG]  [BUGGY]  double  chiSquare  =  1;  long  chiSquare  =  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  1;  long  chiSquare  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    1;    long  chiSquare  =  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	add
55	[BUG]  [BUGGY]  double  chiSquare  =  1;  chiSquare  =  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  1;  chiSquare  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    1;    chiSquare  =  1;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.sqrt(rows);	      	compilable	  [FE]  AssertionFailedError  	6	1	replace
57	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.sqrt(rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(rows);	      	compilable	  [FE]  AssertionFailedError  	6	1	replace
58	[BUG]  [BUGGY]  double  chiSquare  =  Math.max(results.length,  0);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.max(results.length,  0);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.max(results.length,  0);	      	non-compiled	[CE]  cannot  find  symbol  results	6	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  >  1)?  1  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
60	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  1)?  1  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  >  1)?  1  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  ==  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
62	[BUG]  [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  ==  0)?  0  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  ==  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  >  1)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
64	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  1)?  0  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  >  1)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  <  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
66	[BUG]  [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  <  0)?  0  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  <  0)?  0  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
67	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  1);  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  Math.min(remainings.length,  1);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(remainings.length,  1);	      int    rows    =    Math.min(remainings.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	13	None	replace
68	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  2);  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  Math.min(remainings.length,  2);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(remainings.length,  2);	      int    rows    =    Math.min(remainings.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	13	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;	  double    chiSquare    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
70	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  +  1;	  double    chiSquare    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
71	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	4	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	Double  chiSquare  =  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
73	[BUG]  [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  Double  chiSquare  =  Double.POSITIVE_INFINITY;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	Double  chiSquare  =  Double.POSITIVE_INFINITY;	  double    chiSquare    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
74	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  getRowCount()  -  1;  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getRowCount()  -  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
75	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  getRowCount()  +  1;  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getRowCount()  +  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
76	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  2;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  getRowCount()  -  2;  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getRowCount()  -  2;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  2;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  2;	  double    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
78	[BUG]  [BUGGY]  double  chiSquare  =  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  2;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  2;	  double    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
79	[BUG]  [BUGGY]  double  chiSquare  =  getValue();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  getValue();  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  getValue();	  double    chiSquare    =    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
80	[BUG]  [BUGGY]  double[][]  rows  =  f.getRows();  [CE]  cannot  find  symbol  f  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  f.getRows();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  f.getRows();	      double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  f	11	None	replace
81	[BUG]  [BUGGY]  double[][]  rows  =  ji.getRows();  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  ji.getRows();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  ji.getRows();	      double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  ji	11	None	replace
82	[BUG]  [BUGGY]  double[][]  rows  =  function.getRows();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  function.getRows();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  function.getRows();	      double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
83	[BUG]  [BUGGY]  double[][]  rows  =  this.jf.getRows();  [CE]  cannot  find  symbol  jf  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  this.jf.getRows();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  this.jf.getRows();	      double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  jf	11	None	replace
84	[BUG]  [BUGGY]  int  rows  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  getColumnCount();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  getColumnCount();	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
85	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  ji.rows.length);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(results.length,  ji.rows.length);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  ji.rows.length);	      double    chiSquare    =    Math.min(results.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
86	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(results.length,  results.length);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(results.length,  results.length);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(results.length,  results.length);	      double    chiSquare    =    Math.min(results.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  3;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  3;	  double    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
88	[BUG]  [BUGGY]  double  chiSquare  =  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  3;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  3;	  double    chiSquare    =    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
89	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(jf,  rows);  [CE]  cannot  find  symbol  jf  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.parseDouble(jf,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(jf,  rows);	  double    chiSquare    =    Double.parseDouble(rows);    	non-compiled	[CE]  cannot  find  symbol  jf	5	None	replace
90	[BUG]  [BUGGY]  double  chiSquare  =  Double.parseDouble(ji,  rows);  [CE]  cannot  find  symbol  ji  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.parseDouble(ji,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.parseDouble(ji,  rows);	  double    chiSquare    =    Double.parseDouble(rows);    	non-compiled	[CE]  cannot  find  symbol  ji	5	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Double.NEGATIVE_INFINITY;	  double    chiSquare    =    Double.NaN;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
92	[BUG]  [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.NEGATIVE_INFINITY;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.NEGATIVE_INFINITY;	  double    chiSquare    =    Double.NaN;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
93	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainings.length]);  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainings.length]);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[remainings.length]);	      double[][]    rows    =    getRows();    	non-compiled	[CE]  cannot  find  symbol  remainings	10	None	replace
94	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)checker).getChiSquare();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  ((  VectorialConvergenceChecker)checker).getChiSquare();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)checker).getChiSquare();	      ((    VectorialConvergenceChecker)variate).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
95	[BUG]  [BUGGY]  double[][]  rows  =  this.jF.getRows();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  this.jF.getRows();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  this.jF.getRows();	      double[][]    rows    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
96	[BUG]  [BUGGY]  double  chiSquare  =  Math.abs(results.length);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.abs(results.length);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.abs(results.length);	      	non-compiled	[CE]  cannot  find  symbol  results	6	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  Math.sqrt(results[i]);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
98	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  0);  [CE]  cannot  find  symbol  remainingsWeights  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  0);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	int  rows  =  Math.min(remainingsWeights.length,  0);	      int    rows    =    Math.min(remainings.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	13	None	replace
99	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  int  chiSquare  =  Math.min(0,  rows);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(0,  rows);  int  chiSquare  =  Math.min(0,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =    Math.min(0,    rows);    int  chiSquare  =  Math.min(0,  rows);	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	18	None	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =  Math.min(1,  rows);	  double    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
101	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(1,  rows);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(1,  rows);	  double    chiSquare    =    Math.min(0,    rows);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
102	[BUG]  [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainings.size()  ]);  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  getRows().toArray(new  double[remainings.size()  ]);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  getRows().toArray(new  double[remainings.size()  ]);	      double[][]    rows    =    getRows();    	non-compiled	[CE]  cannot  find  symbol  remainings	10	None	replace
103	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  rows.length);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  rows.length);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainders.length,  rows.length);	      double    chiSquare    =    Math.min(results.length,    rows.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	15	None	replace
104	[BUG]  [BUGGY]  ((  VectorialConvergenceChecker)this).getChiSquare();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  ((  VectorialConvergenceChecker)this).getChiSquare();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	((  VectorialConvergenceChecker)this).getChiSquare();	      ((    VectorialConvergenceChecker)variate).getChiSquare();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
105	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  1;  double  chiSquare  =(rows  >  0)?  0  :  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  0)?  0  :  1;  double  chiSquare  =(rows  >  0)?  0  :  2;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double    chiSquare    =(rows    >    0)?    0    :    1;    double  chiSquare  =(rows  >  0)?  0  :  2;	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	20	None	add
106	[BUG]  [BUGGY]  double[][]  rows  =  _jf.getRows();  [CE]  cannot  find  symbol  _jf  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  _jf.getRows();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  _jf.getRows();	      double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  _jf	11	None	replace
107	[BUG]  [BUGGY]  double[][]  rows  =  jF.getRemainders();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double[][]  rows  =  jF.getRemainders();  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double[][]  rows  =  jF.getRemainders();	      double[][]    rows    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
108	[BUG]  [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INT;  [CE]  cannot  find  symbol  POSITIVE_INT  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INT;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INT;	  double    chiSquare    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  cannot  find  symbol  POSITIVE_INT	4	None	replace
109	[BUG]  [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  0);  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.min(remainders.length,  0);  [BUGGY]    double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.min(remainders.length,  0);	      double    chiSquare    =    Math.min(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainders	12	None	replace
110	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variable.getChiSquare());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =  Math.sqrt(variable.getChiSquare());  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =  Math.sqrt(variable.getChiSquare());	      	non-compiled	[CE]  cannot  find  symbol  	6	None	replace
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	double  chiSquare  =(rows  >  0)?  1  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
112	[BUG]  [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {    [BUGGY]  double  chiSquare  =(rows  >  0)?  1  :  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	double  chiSquare  =(rows  >  0)?  1  :  1;	  double    chiSquare    =(rows    >    0)?    0    :    1;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
