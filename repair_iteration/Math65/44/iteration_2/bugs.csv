bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ++this.targetValues;  [CE]  bad  operand  type  double[]  for  unary  operator  '++'  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.targetValues;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.targetValues;	  ++this.resultEvaluations;    	non-compiled	[CE]  bad  operand  type  double[]  for  unary  operator  '++'	16	None	replace
2	[BUG]  [BUGGY]  ++this.residualsWeights;  [CE]  bad  operand  type  double[]  for  unary  operator  '++'  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.residualsWeights;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residualsWeights;	  ++this.resultEvaluations;    	non-compiled	[CE]  bad  operand  type  double[]  for  unary  operator  '++'	16	None	replace
3	[BUG]  [BUGGY]  Integer  cols  =  jF.columns();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  Integer  cols  =  jF.columns();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.columns();	      Integer    cols    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
4	[BUG]  [BUGGY]  Integer  cols  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  Integer  cols  =  jF.getRows();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.getRows();	      Integer    cols    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
5	[BUG]  [BUGGY]  Integer  cols  =  this.jF.getColumns();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  Integer  cols  =  this.jF.getColumns();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  this.jF.getColumns();	      Integer    cols    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
6	[BUG]  [BUGGY]  ++this.residualsIterations;  [CE]  cannot  find  symbol  residualsIterations  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.residualsIterations;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residualsIterations;	  ++this.resultIterations;    	non-compiled	[CE]  cannot  find  symbol  residualsIterations	17	None	replace
7	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]    FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
8	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]      FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
9	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
10	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
11	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.updateJacobian();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.updateJacobian();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.updateJacobian();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.updateJacobian();    	non-compiled	[CE]  not  a  statement	11	None	replace
12	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.updateJacobian();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.updateJacobian();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.updateJacobian();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
13	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.updateJacobian();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.updateJacobian();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.updateJacobian();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.updateJacobian();    	non-compiled	[CE]  not  a  statement	11	None	replace
14	[BUG]  [BUGGY]  cols  =  jF.value(cols,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  cols  =  jF.value(cols,  cost);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  cost);	      cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	2	None	replace
15	[BUG]  [BUGGY]  cols  =  jF.value(point,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  cols  =  jF.value(point,  cols);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(point,  cols);	      cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	2	None	replace
16	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS);	      cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	2	None	replace
17	[BUG]  [BUGGY]  cols  =  jF.value(cols,  null);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  cols  =  jF.value(cols,  null);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  null);	      cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	2	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++cols;  ++cols;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++cols;    ++cols;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	16	add
19	[BUG]  [BUGGY]  ++cols;  ++cols;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++cols;  ++cols;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;    ++cols;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	16	add
20	[BUG]  [BUGGY]  ++cols;  int  cols  =  Math.min(cols.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++cols;  int  cols  =  Math.min(cols.length,  cols.length);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;    int  cols  =  Math.min(cols.length,  cols.length);	  	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	add
21	[BUG]  [BUGGY]  ++cols;  int  cols  =  jF.value(cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++cols;  int  cols  =  jF.value(cols);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;    int  cols  =  jF.value(cols);	  	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	18	None	add
22	[BUG]  [BUGGY]  ++cols;  int  cols  =  Math.min(cols.length,  cols);  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++cols;  int  cols  =  Math.min(cols.length,  cols);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;    int  cols  =  Math.min(cols.length,  cols);	  	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	add
23	[BUG]  [BUGGY]  ++cols;  int  cols  =  Math.max(cols.length,  cols);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++cols;  int  cols  =  Math.max(cols.length,  cols);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;    int  cols  =  Math.max(cols.length,  cols);	  	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	add
24	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
25	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++jacobianEvaluations;  }  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null)  {  ++jacobianEvaluations;  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++jacobianEvaluations;  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
26	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(point);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(point);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(point);	      MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
27	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(true);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(true);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(true);	      MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
28	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().getVisibleMatrixFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().getVisibleMatrixFunction();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().getVisibleMatrixFunction();	      MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
29	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  ++rows;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++rows;    ++rows;	  	compilable	  [FE]  FunctionEvaluationException  	6	16	add
30	[BUG]  [BUGGY]  ++rows;  ++rows;  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  ++rows;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    ++rows;	  	compilable	  [FE]  FunctionEvaluationException  	6	16	add
31	[BUG]  [BUGGY]  ++rows;  int  rows  =  Math.min(rows,  jF.value(rows));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]      FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  int  rows  =  Math.min(rows,  jF.value(rows));  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    int  rows  =  Math.min(rows,  jF.value(rows));	  	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	6	None	add
32	[BUG]  [BUGGY]  ++rows;  int  rows  =  Math.min(jF.value(rows));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]        FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  int  rows  =  Math.min(jF.value(rows));  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    int  rows  =  Math.min(jF.value(rows));	  	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	6	None	add
33	[BUG]  [BUGGY]  ++rows;  int  rows  =  Math.min(jF.value(rows),  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  int  rows  =  Math.min(jF.value(rows),  cost);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    int  rows  =  Math.min(jF.value(rows),  cost);	  	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	6	None	add
34	[BUG]  [BUGGY]  ++rows;  int  rows  =  Math.min(rows,  jF.value(cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  int  rows  =  Math.min(rows,  jF.value(cols));  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    int  rows  =  Math.min(rows,  jF.value(cols));	  	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	6	None	add
35	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  jF.value(cols,  cost);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  cost);	      int    cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	5	None	replace
36	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS);	      int    cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	5	None	replace
37	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  jF.value(cols,  1);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  1);	      int    cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	5	None	replace
38	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  2);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  jF.value(cols,  2);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  2);	      int    cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	5	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
40	[BUG]  [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
41	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	10	16	replace
42	[BUG]  [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	10	16	replace
43	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
44	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
45	[BUG]  [BUGGY]  Integer  cols  =  jF.getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  Integer  cols  =  jF.getColumnCount()  +  1;  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.getColumnCount()  +  1;	      Integer    cols    =    jF.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
46	[BUG]  [BUGGY]  Integer  cols  =  this.jF.getColumnCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  Integer  cols  =  this.jF.getColumnCount();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  this.jF.getColumnCount();	      Integer    cols    =    jF.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
47	[BUG]  [BUGGY]  Integer  cols  =  jF.getColumnCount()  *  2;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  Integer  cols  =  jF.getColumnCount()  *  2;  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.getColumnCount()  *  2;	      Integer    cols    =    jF.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
48	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++cols;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null)  {  ++cols;  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++cols;  }	  ++cols;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	19	None	replace
49	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols;  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  null)  {  ++cols;  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols;  }	  ++cols;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	19	None	replace
50	[BUG]  [BUGGY]  int  cols  =  jF.cols();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  jF.cols();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.cols();	      int    cols    =    jF.size();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
51	[BUG]  [BUGGY]  int  cols  =  jF.length();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  jF.length();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.length();	      int    cols    =    jF.size();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
52	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols,  cols.length);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  cols.length);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
53	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  +  1);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  cols.length  +  1);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
54	[BUG]  [BUGGY]  if(cols!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
55	[BUG]  [BUGGY]  if(cols!=  null)  {  ++jacobianEvaluations;  }  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  null)  {  ++jacobianEvaluations;  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++jacobianEvaluations;  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
56	[BUG]  [BUGGY]  if(cols!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
57	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols));  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(cols));	      int    cols    =    Math.min(cols.length,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	22	None	replace
58	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.value(point));  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols.length,  jF.value(point));  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jF.value(point));	      int    cols    =    Math.min(cols.length,    jF.value(cols));    	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	replace
59	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point));  [CE]  no  suitable  method  found  for  min(int,double[][])  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point));  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point));	      int    cols    =    Math.min(cols.length,    jF.value(cols));    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[][])	22	None	replace
60	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1,  rows);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1,  rows);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  cols.length  -  1,  rows);	      int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
61	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  cols.length  -  1);	      int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
62	[BUG]  [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)super.updateJacobian();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)super.updateJacobian();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)super.updateJacobian();	      MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)super.updateJacobian();    	non-compiled	[CE]  not  a  statement	12	None	replace
63	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateJacobian();  [CE]  '('  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateJacobian();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateJacobian();	      MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)super.updateJacobian();    	non-compiled	[CE]  '('  expected	12	None	replace
64	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateJacobian();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateJacobian();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateJacobian();	      MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)super.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
65	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.getVectorialFunction();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.getVectorialFunction();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.getVectorialFunction();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.getVectorialFunction();    	non-compiled	[CE]  not  a  statement	13	None	replace
66	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getVectorialFunction();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getVectorialFunction();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getVectorialFunction();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
67	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getValue();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getValue();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
68	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.object();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.object();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.object();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
69	[BUG]  [BUGGY]  ++this.residuals;  [CE]  bad  operand  type  double[]  for  unary  operator  '++'  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.residuals;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residuals;	  ++this.cobianEvaluations;    	non-compiled	[CE]  bad  operand  type  double[]  for  unary  operator  '++'	23	None	replace
70	[BUG]  [BUGGY]  ++this.colonEvaluations;  [CE]  cannot  find  symbol  colonEvaluations  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.colonEvaluations;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.colonEvaluations;	  ++this.cobianEvaluations;    	non-compiled	[CE]  cannot  find  symbol  colonEvaluations	23	None	replace
71	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)super.updateJacobianEvaluation();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)super.updateJacobianEvaluation();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)super.updateJacobianEvaluation();	      MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)super.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
72	[BUG]  [BUGGY]  int  cols  =  jF.value(point);  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  jF.value(point);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(point);	      int    cols    =    jF.size();    	non-compiled	[CE]  incompatible  types	4	None	replace
73	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jF.length);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
74	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
75	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
76	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
77	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
78	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
79	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
80	[BUG]  [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]    FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  	non-compiled	[CE]  ')'  expected	6	None	add
81	[BUG]  [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]      FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  	non-compiled	[CE]  ')'  expected	6	None	add
82	[BUG]  [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(  [CE]  ')'  expected  [FE]        FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(	  	non-compiled	[CE]  ')'  expected	6	None	add
83	[BUG]  [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP  [CE]  ')'  expected  [FE]          FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP	  	non-compiled	[CE]  ')'  expected	6	None	add
84	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null);	      MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
85	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this);	      MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
86	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(rows));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols,  jF.value(rows));  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(rows));	      int    cols    =    Math.min(cols.length,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	22	None	replace
87	[BUG]  [BUGGY]  ++this.resultSquares;  [CE]  cannot  find  symbol  resultSquares  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.resultSquares;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultSquares;	  ++this.resultEvaluations;    	non-compiled	[CE]  cannot  find  symbol  resultSquares	16	None	replace
88	[BUG]  [BUGGY]  ++this.resultEvaluations  +  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.resultEvaluations  +  1;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultEvaluations  +  1;	  ++this.resultEvaluations;    	non-compiled	[CE]  not  a  statement	16	None	replace
89	[BUG]  [BUGGY]  if(cols!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
90	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++cols.length;  }  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null)  {  ++cols.length;  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++cols.length;  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
91	[BUG]  [BUGGY]  ++cols;  int  cols  =  Math.min(cols,  jF.value(cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++cols;  int  cols  =  Math.min(cols,  jF.value(cols));  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;    int  cols  =  Math.min(cols,  jF.value(cols));	  	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	18	None	add
92	[BUG]  [BUGGY]  Integer  cols  =  jF.value(columns);  [CE]  cannot  find  symbol  columns  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  Integer  cols  =  jF.value(columns);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.value(columns);	      Integer    cols    =    jF.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol  columns	21	None	replace
93	[BUG]  [BUGGY]  Integer  cols  =  jF.columnCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  Integer  cols  =  jF.columnCount();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.columnCount();	      Integer    cols    =    jF.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
94	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  0);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  jF.value(cols,  0);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  0);	      int    cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	5	None	replace
95	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.removeVectorialFunction();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.removeVectorialFunction();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.removeVectorialFunction();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
96	[BUG]  [BUGGY]  cols  =  jF.value(cols,  1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  cols  =  jF.value(cols,  1);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  1);	      cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	2	None	replace
97	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  >  0)  {  ++cols;  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  >  0)  {  ++cols;  }	  ++cols;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	16	replace
98	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  >  0)  {  ++cols;  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  >  0)  {  ++cols;  }	  ++cols;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	16	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  cols)  {  ++cols;  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=  cols)  {  ++cols;  }	  ++cols;    	compilable	  [FE]  AssertionFailedError  	19	1	replace
100	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++cols;  }  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  cols)  {  ++cols;  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  cols)  {  ++cols;  }	  ++cols;    	compilable	  [FE]  AssertionFailedError  	19	1	replace
101	[BUG]  [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorialFunction)getObject();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorialFunction)getObject();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorFunction  jf  =(MultivariateVectorialFunction)getObject();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
102	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length  -  1);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jF.length  -  1);	      int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
103	[BUG]  [BUGGY]  ++this.resultIterations  +  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.resultIterations  +  1;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultIterations  +  1;	  ++this.resultIterations;    	non-compiled	[CE]  not  a  statement	17	None	replace
104	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
105	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.updateJacobian();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.updateJacobian();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.updateJacobian();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
106	[BUG]  [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]    FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  	non-compiled	[CE]  ')'  expected	6	None	add
107	[BUG]  [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]      FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  	non-compiled	[CE]  ')'  expected	6	None	add
108	[BUG]  [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [CE]  ')'  expected  [FE]        FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS	  	non-compiled	[CE]  ')'  expected	6	None	add
109	[BUG]  [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]          FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE	  	non-compiled	[CE]  ')'  expected	6	None	add
110	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.value(rows));  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols.length,  jF.value(rows));  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jF.value(rows));	      int    cols    =    Math.min(cols.length,    jF.value(cols));    	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	replace
111	[BUG]  [BUGGY]  ++this.valueEvaluations;  [CE]  cannot  find  symbol  valueEvaluations  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.valueEvaluations;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.valueEvaluations;	  ++this.resultEvaluations;    	non-compiled	[CE]  cannot  find  symbol  valueEvaluations	16	None	replace
112	[BUG]  [BUGGY]  ++this.targetEvaluations;  [CE]  cannot  find  symbol  targetEvaluations  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.targetEvaluations;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.targetEvaluations;	  ++this.resultEvaluations;    	non-compiled	[CE]  cannot  find  symbol  targetEvaluations	16	None	replace
113	[BUG]  [BUGGY]  ++this.resultSize;  [CE]  cannot  find  symbol  resultSize  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.resultSize;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultSize;	  ++this.resultEvaluations;    	non-compiled	[CE]  cannot  find  symbol  resultSize	16	None	replace
114	[BUG]  [BUGGY]  cols  =  jF.value(cols,  2);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  cols  =  jF.value(cols,  2);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  2);	      cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	2	None	replace
115	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
116	[BUG]  [BUGGY]  Integer  cols  =  jf.getColumnCount();  [CE]  cannot  find  symbol  jf  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  Integer  cols  =  jf.getColumnCount();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jf.getColumnCount();	      Integer    cols    =    jF.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol  jf	21	None	replace
117	[BUG]  [BUGGY]  ++cols;  int  cols  =  Math.min(cols.length,  jF.value(cols));  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++cols;  int  cols  =  Math.min(cols.length,  jF.value(cols));  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;    int  cols  =  Math.min(cols.length,  jF.value(cols));	  	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	add
118	[BUG]  [BUGGY]  ++this.valueIterations;  [CE]  cannot  find  symbol  valueIterations  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.valueIterations;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.valueIterations;	  ++this.resultIterations;    	non-compiled	[CE]  cannot  find  symbol  valueIterations	17	None	replace
119	[BUG]  [BUGGY]  ++this.targetIterations;  [CE]  cannot  find  symbol  targetIterations  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.targetIterations;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.targetIterations;	  ++this.resultIterations;    	non-compiled	[CE]  cannot  find  symbol  targetIterations	17	None	replace
120	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.getObject();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.getObject();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.getObject();	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
121	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.object;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.object;  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.object;	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
122	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
123	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  column.length);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols.length,  column.length);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  column.length);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
124	[BUG]  [BUGGY]  if(jacobianEvaluations  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(jacobianEvaluations  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobianEvaluations  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
125	[BUG]  [BUGGY]  if(jacobianEvaluations!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(jacobianEvaluations!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobianEvaluations!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
127	[BUG]  [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
128	[BUG]  [BUGGY]  if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
129	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  1);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length  -  1);	      int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
130	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  column.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  int  cols  =  Math.min(cols.length,  column.length  -  1);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  column.length  -  1);	      int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
131	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this);	      MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
132	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.setVectorialFunction(jF);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.setVectorialFunction(jF);  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.setVectorialFunction(jF);	      MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
133	[BUG]  [BUGGY]  ++this.cobianEvaluations  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  ++this.cobianEvaluations  +  1;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.cobianEvaluations  +  1;	  ++this.cobianEvaluations;    	non-compiled	[CE]  not  a  statement	23	None	replace
134	[BUG]  [BUGGY]  Integer  cols  =  jf.getColumns();  [CE]  cannot  find  symbol  jf  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  Integer  cols  =  jf.getColumns();  [BUGGY]    ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jf.getColumns();	      Integer    cols    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jf	20	None	replace
135	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  ++cols;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	16	replace
136	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  ++cols;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	16	replace
137	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [CE]  array  required,  but  int  found  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }	  ++cols;    	non-compiled	[CE]  array  required,  but  int  found	19	None	replace
138	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
139	[BUG]  [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
140	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
141	[BUG]  [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
142	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
143	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {    [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    	compilable	  [FE]  FunctionEvaluationException  	7	16	replace
