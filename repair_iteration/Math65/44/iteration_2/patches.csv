bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	74	16	add
2	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	74	16	add
3	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	74	16	add
4	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	74	16	add
5	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  	non-compiled	[CE]  cannot  find  symbol  columns	74	None	add
6	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	74	16	add
7	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	74	16	add
8	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }  [CE]  cannot  find  symbol  row  [FE]            FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }	  	non-compiled	[CE]  cannot  find  symbol  row	74	None	add
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian!=  null)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jacobian!=  null)  {  ++cols;  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	16	replace
10	[BUG]  [BUGGY]  if(jacobian!=  null)  {  ++cols;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian!=  null)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian!=  null)  {  ++cols;  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	16	replace
11	[BUG]  [BUGGY]  ++this.resultualsWeights;  [CE]  cannot  find  symbol  resultualsWeights  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.resultualsWeights;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultualsWeights;	  ++this.residualsWeights;    	non-compiled	[CE]  cannot  find  symbol  resultualsWeights	2	None	replace
12	[BUG]  [BUGGY]  ++this.residualsWeights  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.residualsWeights  +  1;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residualsWeights  +  1;	  ++this.residualsWeights;    	non-compiled	[CE]  not  a  statement	2	None	replace
13	[BUG]  [BUGGY]  ++this.results;  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.results;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.results;	  ++this.resultSquares;    	non-compiled	[CE]  cannot  find  symbol  results	87	None	replace
14	[BUG]  [BUGGY]  int  cols  =  Math.min(rows,  jF.value(cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(rows,  jF.value(cols));  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(rows,  jF.value(cols));	  int    cols    =    Math.min(cols.length,    jF.value(rows));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	110	None	replace
15	[BUG]  [BUGGY]  int  rows  =  Math.min(jF.value(rows));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(jF.value(rows));  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(jF.value(rows));	  ++rows;    int    rows    =    Math.min(rows,    jF.value(rows));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	31	None	replace
16	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jF.value(rows));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(cols,  jF.value(rows));  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(cols,  jF.value(rows));	  ++rows;    int    rows    =    Math.min(rows,    jF.value(rows));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	31	None	replace
17	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  jF.value(cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(rows,  jF.value(cols));  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(rows,  jF.value(cols));	  ++rows;    int    rows    =    Math.min(rows,    jF.value(rows));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	31	None	replace
18	[BUG]  [BUGGY]  int  rows  =  Math.min(0,  jF.value(rows));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(0,  jF.value(rows));  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(0,  jF.value(rows));	  ++rows;    int    rows    =    Math.min(rows,    jF.value(rows));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	31	None	replace
19	[BUG]  [BUGGY]  if(rows  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
20	[BUG]  [BUGGY]  if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
21	[BUG]  [BUGGY]  if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
22	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
23	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  3);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  3);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  3);	  int    cols    =    jF.value(cols,    2);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	38	None	replace
24	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  2  -  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  2  -  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  2  -  cols);	  int    cols    =    jF.value(cols,    2);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	38	None	replace
25	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1,  rows);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1,  rows);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  cols.length  -  1,  rows);	  int    cols    =    Math.min(cols.length,    cols.length    -    1,    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	60	None	replace
26	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1,  columns);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1,  columns);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  cols.length  -  1,  columns);	  int    cols    =    Math.min(cols.length,    cols.length    -    1,    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	60	None	replace
27	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1,  points);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1,  points);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  cols.length  -  1,  points);	  int    cols    =    Math.min(cols.length,    cols.length    -    1,    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	60	None	replace
28	[BUG]  [BUGGY]  Integer  cols  =  jF.getColumnCount()  *  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.getColumnCount()  *  1;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.getColumnCount()  *  1;	  Integer    cols    =    jF.getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
29	[BUG]  [BUGGY]  Integer  cols  =  jF.getColumnCount()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.getColumnCount()  *  2  +  1;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.getColumnCount()  *  2  +  1;	  Integer    cols    =    jF.getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [CE]  ')'  expected  [FE]        FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	80	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  [CE]  ')'  expected  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	80	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [CE]  ')'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	80	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D  [CE]  ')'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	80	None	replace
34	[BUG]  [BUGGY]  if(rows  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
35	[BUG]  [BUGGY]  if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
36	[BUG]  [BUGGY]  if(rows!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
37	[BUG]  [BUGGY]  if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    columns);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
38	[BUG]  [BUGGY]  if(cols!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    columns);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
39	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    columns);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
40	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.updateMatrix();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.updateMatrix();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.updateMatrix();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
41	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)factor.updateJacobian();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)factor.updateJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)factor.updateJacobian();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
42	[BUG]  [BUGGY]  Integer  cols  =  jF.getColumnCount()  /  2;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.getColumnCount()  /  2;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.getColumnCount()  /  2;	  Integer    cols    =    jF.getColumnCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
43	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows  >  0)  {  ++cols;  }	  if(cols    >    0)    {    ++cols;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	16	replace
44	[BUG]  [BUGGY]  if(rows  >  0)  {  ++cols;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  >  0)  {  ++cols;  }	  if(cols    >    0)    {    ++cols;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	16	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  <  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  <  0)  {  ++cols;  }	  if(cols    >    0)    {    ++cols;    }    	compilable	  [FE]  AssertionFailedError  	98	1	replace
46	[BUG]  [BUGGY]  if(cols  <  0)  {  ++cols;  }  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  <  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  <  0)  {  ++cols;  }	  if(cols    >    0)    {    ++cols;    }    	compilable	  [FE]  AssertionFailedError  	98	1	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  ==  0)  {  ++cols;  }	  if(cols    >    0)    {    ++cols;    }    	compilable	  [FE]  AssertionFailedError  	98	1	replace
48	[BUG]  [BUGGY]  if(cols  ==  0)  {  ++cols;  }  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  0)  {  ++cols;  }	  if(cols    >    0)    {    ++cols;    }    	compilable	  [FE]  AssertionFailedError  	98	1	replace
49	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.value;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.value;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.value;	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)getValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
50	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getMatrix();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getMatrix();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getMatrix();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)getValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
51	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.getVectorialFunction();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.getVectorialFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.getVectorialFunction();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)super.getVectorialFunction();    	non-compiled	[CE]  not  a  statement	65	None	replace
52	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.update();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.update();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.update();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)super.getVectorialFunction();    	non-compiled	[CE]  not  a  statement	65	None	replace
53	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.setVectorialFunction(jF);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.setVectorialFunction(jF);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.setVectorialFunction(jF);	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)super.getVectorialFunction();    	non-compiled	[CE]  not  a  statement	65	None	replace
54	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1,  row);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1,  row);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  cols.length  -  1,  row);	  int    cols    =    Math.min(cols,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	61	None	replace
55	[BUG]  [BUGGY]  ++this.cobianEvaluations  +  2;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.cobianEvaluations  +  2;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.cobianEvaluations  +  2;	  ++this.cobianEvaluations    +    1;    	non-compiled	[CE]  not  a  statement	133	None	replace
56	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.setVectorialFunction(jF,  cost);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.setVectorialFunction(jF,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.setVectorialFunction(jF,  cost);	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.setVectorialFunction(jF);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
57	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.setVectorialFunction(jF,  cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.setVectorialFunction(jF,  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.setVectorialFunction(jF,  cols);	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.setVectorialFunction(jF);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
58	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.setVectorialFunction(jF);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.setVectorialFunction(jF);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.setVectorialFunction(jF);	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.setVectorialFunction(jF);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
59	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(true);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
60	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  false);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  false);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  false);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(true);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
61	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  null);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  null);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(true);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
62	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  cols);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  cols);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(true);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
63	[BUG]  [BUGGY]  int  rows  =  Math.min(jF.value(rows),  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(jF.value(rows),  cols);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(jF.value(rows),  cols);	  ++rows;    int    rows    =    Math.min(jF.value(rows));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	32	None	replace
64	[BUG]  [BUGGY]  int  rows  =  Math.min(jF.value(rows,  cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(jF.value(rows,  cols));  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(jF.value(rows,  cols));	  ++rows;    int    rows    =    Math.min(jF.value(rows));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	32	None	replace
65	[BUG]  [BUGGY]  int  rows  =  Math.min(jF.value(cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(jF.value(cols));  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(jF.value(cols));	  ++rows;    int    rows    =    Math.min(jF.value(rows));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	32	None	replace
66	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  this.getMultivariateMatrixFunction().getVisibleMatrixFunction();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  this.getMultivariateMatrixFunction().getVisibleMatrixFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  this.getMultivariateMatrixFunction().getVisibleMatrixFunction();	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().getVisibleMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
67	[BUG]  [BUGGY]  Integer  cols  =  jF.value(columns,  cost);  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.value(columns,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.value(columns,  cost);	  Integer    cols    =    jF.value(columns);    	non-compiled	[CE]  cannot  find  symbol  columns	92	None	replace
68	[BUG]  [BUGGY]  Integer  cols  =  jF.value(cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.value(cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.value(cols);	  Integer    cols    =    jF.value(columns);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	92	None	replace
69	[BUG]  [BUGGY]  Integer  cols  =  jF.value(column);  [CE]  cannot  find  symbol  column  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.value(column);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.value(column);	  Integer    cols    =    jF.value(columns);    	non-compiled	[CE]  cannot  find  symbol  column	92	None	replace
70	[BUG]  [BUGGY]  int  rows  =  Math.min(jF.value(rows),  cost,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(jF.value(rows),  cost,  cols);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(jF.value(rows),  cost,  cols);	  ++rows;    int    rows    =    Math.min(jF.value(rows),    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	33	None	replace
71	[BUG]  [BUGGY]  int  rows  =  Math.min(jF.value(rows),  cost,  0);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(jF.value(rows),  cost,  0);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(jF.value(rows),  cost,  0);	  ++rows;    int    rows    =    Math.min(jF.value(rows),    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	33	None	replace
72	[BUG]  [BUGGY]  int  rows  =  Math.min(jF.value(cols),  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(jF.value(cols),  cost);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(jF.value(cols),  cost);	  ++rows;    int    rows    =    Math.min(jF.value(rows),    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	33	None	replace
73	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	75	16	replace
74	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	75	16	replace
75	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	75	16	replace
76	[BUG]  [BUGGY]  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	75	16	replace
77	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.getObject();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.getObject();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.getObject();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.getObject();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
78	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.fields.getObject();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.fields.getObject();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.fields.getObject();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.getObject();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
79	[BUG]  [BUGGY]  cols  =  jF.value(cols,  null,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  null,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  null,  cost);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	17	None	replace
80	[BUG]  [BUGGY]  cols  =  jF.value(cols,  cost,  null);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  cost,  null);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  cost,  null);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	17	None	replace
81	[BUG]  [BUGGY]  cols  =  jF.value(cols,  null,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  null,  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  null,  cols);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	17	None	replace
82	[BUG]  [BUGGY]  cols  =  jF.value(cols,  point);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  point);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  point);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	15	None	replace
83	[BUG]  [BUGGY]  cols  =  jF.value(colons,  point);  [CE]  cannot  find  symbol  colons  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(colons,  point);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(colons,  point);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  cannot  find  symbol  colons	15	None	replace
84	[BUG]  [BUGGY]  cols  =  jF.value(field,  cols);  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(field,  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(field,  cols);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  cannot  find  symbol  field	15	None	replace
85	[BUG]  [BUGGY]  cols  =  jF.value(point,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(point,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(point,  cost);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	15	None	replace
86	[BUG]  [BUGGY]  int  cols  =  jF.cols()  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.cols()  +  1;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.cols()  +  1;	  int    cols    =    jF.cols();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
87	[BUG]  [BUGGY]  int  cols  =  this.jF.cols();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  this.jF.cols();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  this.jF.cols();	  int    cols    =    jF.cols();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
88	[BUG]  [BUGGY]  cols  =  jF.value(cols,  3);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  3);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  3);	  cols    =    jF.value(cols,    2);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	114	None	replace
89	[BUG]  [BUGGY]  cols  =  jF.value(cols,  2  -  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  2  -  cols.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  2  -  cols.length);	  cols    =    jF.value(cols,    2);    	non-compiled	[CE]  int  cannot  be  dereferenced	114	None	replace
90	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	135	16	add
91	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	135	16	add
92	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	135	16	add
93	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	135	16	add
94	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  	non-compiled	[CE]  cannot  find  symbol  columns	135	None	add
95	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }  [CE]  cannot  find  symbol  fields  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }	  	non-compiled	[CE]  cannot  find  symbol  fields	135	None	add
96	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(cols);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(point);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
97	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(colons);  [CE]  cannot  find  symbol  colons  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(colons);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(colons);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(point);    	non-compiled	[CE]  cannot  find  symbol  colons	26	None	replace
98	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(field);  [CE]  cannot  find  symbol  field  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(field);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(field);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(point);    	non-compiled	[CE]  cannot  find  symbol  field	26	None	replace
99	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(point,  cost);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(point,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(point,  cost);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(point);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
100	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  cost,  iterations);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  cost,  iterations);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  cost,  iterations);	  int    cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	35	None	replace
101	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  cost,  targetValues);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  cost,  targetValues);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  cost,  targetValues);	  int    cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	35	None	replace
102	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  maxIterations);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  maxIterations);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  maxIterations);	  int    cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	35	None	replace
103	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  0,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  0,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  0,  cost);	  int    cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	35	None	replace
104	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  	compilable	  [FE]  FunctionEvaluationException  	78	16	add
105	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  	compilable	  [FE]  FunctionEvaluationException  	78	16	add
106	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  	compilable	  [FE]  FunctionEvaluationException  	78	16	add
107	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  	compilable	  [FE]  FunctionEvaluationException  	78	16	add
108	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  	compilable	  [FE]  FunctionEvaluationException  	78	16	add
109	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  	compilable	  [FE]  FunctionEvaluationException  	78	16	add
110	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE	  	non-compiled	[CE]  ')'  expected	78	None	add
111	[BUG]  [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)jF.updateJacobian();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)jF.updateJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)jF.updateJacobian();	  MultivariateMatrixFunction    super    =(MultivariateMatrixFunction)super.updateJacobian();    	non-compiled	[CE]  not  a  statement	62	None	replace
112	[BUG]  [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)this.super.updateJacobian();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)this.super.updateJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)this.super.updateJacobian();	  MultivariateMatrixFunction    super    =(MultivariateMatrixFunction)super.updateJacobian();    	non-compiled	[CE]  not  a  statement	62	None	replace
113	[BUG]  [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)super.update();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)super.update();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)super.update();	  MultivariateMatrixFunction    super    =(MultivariateMatrixFunction)super.updateJacobian();    	non-compiled	[CE]  not  a  statement	62	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jacobian!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  AssertionFailedError  	39	2	add
115	[BUG]  [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  AssertionFailedError  	39	2	add
116	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jacobian!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	39	16	add
117	[BUG]  [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	39	16	add
118	[BUG]  [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  If(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  If(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    If(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	non-compiled	[CE]  ';'  expected	39	None	add
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    jF.value(point);    if(jF.value(rows)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE    	non-compiled	[CE]  ')'  expected	109	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S  [CE]  ')'  expected  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    jF.value(point);    if(jF.value(rows)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE    	non-compiled	[CE]  ')'  expected	109	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]                  FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    jF.value(point);    if(jF.value(rows)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE    	non-compiled	[CE]  ')'  expected	109	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP  [CE]  ')'  expected  [FE]                    FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    jF.value(point);    if(jF.value(rows)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE    	non-compiled	[CE]  ')'  expected	109	None	replace
123	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  ++rows;    ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	30	None	replace
124	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	30	None	replace
125	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  ++rows;    ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	30	None	replace
126	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }	  ++rows;    ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	30	None	replace
127	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols.length;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++cols.length;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols.length;  }	  if(cols    ==    null)    {    ++cols.length;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	90	None	replace
128	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  1,  rows);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  1,  rows);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length  -  1,  rows);	  int    cols    =    Math.min(cols.length,    jacobian.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	129	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(jacobian.length,  jacobian.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	int  cols  =  Math.min(jacobian.length,  jacobian.length  -  1);	  int    cols    =    Math.min(cols.length,    jacobian.length    -    1);    	compilable	  [FE]  AssertionFailedError  	129	12	replace
130	[BUG]  [BUGGY]  int  cols  =  Math.min(jacobian.length,  jacobian.length  -  1);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(jacobian.length,  jacobian.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(jacobian.length,  jacobian.length  -  1);	  int    cols    =    Math.min(cols.length,    jacobian.length    -    1);    	compilable	  [FE]  AssertionFailedError  	129	12	replace
131	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  ji.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  ji.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  ji.length  -  1);	  int    cols    =    Math.min(cols.length,    jacobian.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	129	None	replace
132	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  cols);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().evaluate(this);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
133	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  cost);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  cost);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().evaluate(this);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
134	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  targetValues);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  targetValues);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  targetValues);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().evaluate(this);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
135	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	16	replace
136	[BUG]  [BUGGY]  if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	16	replace
137	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	16	replace
138	[BUG]  [BUGGY]  if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	16	replace
139	[BUG]  [BUGGY]  rows  >  0)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  not  a  statement  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  rows  >  0)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	rows  >  0)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  not  a  statement	141	None	replace
140	[BUG]  [BUGGY]  if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  cannot  find  symbol  columns	141	None	replace
141	[BUG]  [BUGGY]  cols  =  jF.value(cols,  0,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  0,  cols.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  0,  cols.length);	  cols    =    jF.value(cols,    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	96	None	replace
142	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.getVectorialFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.getVectorialFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.getVectorialFunction();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
143	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.clone();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.clone();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.clone();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jF!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  AssertionFailedError  	126	2	add
145	[BUG]  [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  AssertionFailedError  	126	2	add
146	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jF  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jF!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jF  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	126	16	add
147	[BUG]  [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jF  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jF  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jF  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	126	16	add
148	[BUG]  [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  If(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  If(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    If(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	non-compiled	[CE]  ';'  expected	126	None	add
149	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(this);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(this);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(this);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(null);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
150	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null,  cols);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null,  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null,  cols);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(null);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
151	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null,  null);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null,  null);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(null);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
152	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null,  cost);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(null,  cost);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(null);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jacobian    =    jF.value(point);    if(jacobian.length!=    rows)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	107	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [CE]  ')'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jacobian    =    jF.value(point);    if(jacobian.length!=    rows)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	107	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length  ==  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length  ==  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length  ==  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jacobian    =    jF.value(point);    if(jacobian.length!=    rows)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	107	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIM  [CE]  ')'  expected  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIM  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIM	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jacobian    =    jF.value(point);    if(jacobian.length!=    rows)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	107	None	replace
157	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  0,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  0,  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  0,  cols);	  int    cols    =    jF.value(cols,    0);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	94	None	replace
158	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  0,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  0,  cols.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  0,  cols.length);	  int    cols    =    jF.value(cols,    0);    	non-compiled	[CE]  int  cannot  be  dereferenced	94	None	replace
159	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  	compilable	  [FE]  FunctionEvaluationException  	76	16	add
160	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  	compilable	  [FE]  FunctionEvaluationException  	76	16	add
161	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  	compilable	  [FE]  FunctionEvaluationException  	76	16	add
162	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    if(cols  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  	compilable	  [FE]  FunctionEvaluationException  	76	16	add
163	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  	compilable	  [FE]  FunctionEvaluationException  	76	16	add
164	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  	compilable	  [FE]  FunctionEvaluationException  	76	16	add
165	[BUG]  [BUGGY]  if(cols!=  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null    ||    cols.length    <    2)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	115	None	replace
166	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  <  1)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null  ||  cols.length  <  1)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null  ||  cols.length  <  1)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null    ||    cols.length    <    2)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	115	None	replace
167	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null  ||  cols.length  <  2)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null    ||    cols.length    <    2)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	115	None	replace
168	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.function.updateJacobian();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.function.updateJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.function.updateJacobian();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
169	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)factor.updateJacobian();  [CE]  cannot  find  symbol  factor  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)factor.updateJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)factor.updateJacobian();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol  factor	64	None	replace
170	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.value(point),  cost);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  jF.value(point),  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jF.value(point),  cost);	  int    cols    =    Math.min(cols.length,    jF.value(point));    	non-compiled	[CE]  int  cannot  be  dereferenced	58	None	replace
171	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.value(point),  coefficient);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  jF.value(point),  coefficient);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jF.value(point),  coefficient);	  int    cols    =    Math.min(cols.length,    jF.value(point));    	non-compiled	[CE]  int  cannot  be  dereferenced	58	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D  [CE]  ')'  expected  [FE]        FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	106	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [CE]  ')'  expected  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	106	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [CE]  ')'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	106	None	replace
175	[BUG]  [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.D  [CE]  ')'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.D  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.D	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	106	None	replace
176	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateVector();  [CE]  '('  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateVector();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateVector();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)this.super.updateJacobian();    	non-compiled	[CE]  '('  expected	63	None	replace
177	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.update();  [CE]  '('  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.update();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.update();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)this.super.updateJacobian();    	non-compiled	[CE]  '('  expected	63	None	replace
178	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateRow();  [CE]  '('  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateRow();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateRow();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)this.super.updateJacobian();    	non-compiled	[CE]  '('  expected	63	None	replace
179	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  +  1,  rows);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  +  1,  rows);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  cols.length  +  1,  rows);	  int    cols    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
180	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  cols.length  +  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  cols.length  +  1);	  int    cols    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
181	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  cost);  [CE]  no  suitable  method  found  for  min(int,double[][],double)  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point),  cost);	  int    cols    =    Math.min(cols,    jF.value(point));    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[][],double)	59	None	replace
182	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  coefficient);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point),  coefficient);	  int    cols    =    Math.min(cols,    jF.value(point));    	non-compiled	[CE]  cannot  find  symbol  coefficient	59	None	replace
183	[BUG]  [BUGGY]  int  cols  =  Math.min(jF.value(cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(jF.value(cols));  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(jF.value(cols));	  int    cols    =    Math.min(cols,    jF.value(point));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	59	None	replace
184	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  ROI);  [CE]  cannot  find  symbol  ROI  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  ROI);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point),  ROI);	  int    cols    =    Math.min(cols,    jF.value(point));    	non-compiled	[CE]  cannot  find  symbol  ROI	59	None	replace
185	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  cols);  [CE]  no  suitable  method  found  for  min(int,double[][],int)  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point),  cols);	  int    cols    =    Math.min(cols,    jF.value(cols));    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[][],int)	57	None	replace
186	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point,  cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point,  cols));  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point,  cols));	  int    cols    =    Math.min(cols,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	57	None	replace
187	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  column);  [CE]  cannot  find  symbol  column  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  column);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point),  column);	  int    cols    =    Math.min(cols,    jF.value(cols));    	non-compiled	[CE]  cannot  find  symbol  column	57	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  [CE]  ')'  expected  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction(i);    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	81	None	replace
189	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [CE]  ')'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction(i);    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	81	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [CE]  ')'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction(i);    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	81	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Localized  [CE]  ')'  expected  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Localized  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Localized	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction(i);    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	81	None	replace
192	[BUG]  [BUGGY]  if(jF!=  null)  {  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=  null)  {  if(jacobian!=  null)  {  ++jacobianEvaluations;  }	  if(jacobian!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
193	[BUG]  [BUGGY]  if(jF!=  null)  {  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=  null)  {  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }	  if(jacobian!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
194	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    	compilable	  [FE]  FunctionEvaluationException  	79	16	replace
195	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    	compilable	  [FE]  FunctionEvaluationException  	79	16	replace
196	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    	compilable	  [FE]  FunctionEvaluationException  	79	16	replace
197	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    	compilable	  [FE]  FunctionEvaluationException  	79	16	replace
198	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    	compilable	  [FE]  FunctionEvaluationException  	79	16	replace
199	[BUG]  [BUGGY]  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  null);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    null);    }    	compilable	  [FE]  FunctionEvaluationException  	79	16	replace
200	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)object;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)object;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)object;	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.object;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
201	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.object;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.object;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.object;	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.object;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
202	[BUG]  [BUGGY]  Integer  cols  =  jF.columnCount()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.columnCount()  +  1;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.columnCount()  +  1;	  Integer    cols    =    jF.columnCount();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
203	[BUG]  [BUGGY]  Integer  cols  =  this.jF.columnCount();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  this.jF.columnCount();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  this.jF.columnCount();	  Integer    cols    =    jF.columnCount();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
204	[BUG]  [BUGGY]  Integer  cols  =  jF.columnCount()  *  2;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.columnCount()  *  2;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.columnCount()  *  2;	  Integer    cols    =    jF.columnCount();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
205	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	142	16	add
206	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	142	16	add
207	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	142	16	add
208	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	142	16	add
209	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  	non-compiled	[CE]  cannot  find  symbol  columns	142	None	add
210	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }  [CE]  cannot  find  symbol  row  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }	  	non-compiled	[CE]  cannot  find  symbol  row	142	None	add
211	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  cost);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  cost);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().value(this);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
212	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  cols);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  cols);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().value(this);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
213	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  null);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  null);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().value(this);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
214	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  0,  1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  0,  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  0,  1);	  int    cols    =    jF.value(cols,    1);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	37	None	replace
215	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  if(cols  >  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols    >    0)    {    ++cols;    }    if(cols  >  0)  {  ++cols;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	16	add
216	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  if(cols  >  0)  {  ++cols;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  if(cols  >  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++cols;    }    if(cols  >  0)  {  ++cols;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	16	add
217	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  If(cols  >  0)  {  ++cols;  }  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  If(cols  >  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++cols;    }    If(cols  >  0)  {  ++cols;  }	  	non-compiled	[CE]  ';'  expected	97	None	add
218	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  int  cols  >  0)  {  ++cols;  }  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  int  cols  >  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++cols;    }    int  cols  >  0)  {  ++cols;  }	  	non-compiled	[CE]  ';'  expected	97	None	add
219	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++cols;        ++cols;    ++cols;  ++cols;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	16	add
220	[BUG]  [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    ++cols;  ++cols;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	16	add
221	[BUG]  [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  this.residuals  =  new  VectorialConvergenceChecker(this,  cols);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  this.residuals  =  new  VectorialConvergenceChecker(this,  cols);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    ++cols;  ++cols;  this.residuals  =  new  VectorialConvergenceChecker(this,  cols);	  	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	18	None	add
222	[BUG]  [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  this.residuals  =  new  VectorialConvergenceChecker(this);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  this.residuals  =  new  VectorialConvergenceChecker(this);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    ++cols;  ++cols;  this.residuals  =  new  VectorialConvergenceChecker(this);	  	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	18	None	add
223	[BUG]  [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  this.residuals  =  new  VectorialConvergenceChecker();  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  this.residuals  =  new  VectorialConvergenceChecker();  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    ++cols;  ++cols;  this.residuals  =  new  VectorialConvergenceChecker();	  	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	18	None	add
224	[BUG]  [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  this.residualsWeights  =  new  double[Columns.length][1];  [CE]  cannot  find  symbol  Columns  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  ++cols;  ++cols;  this.residualsWeights  =  new  double[Columns.length][1];  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    ++cols;  ++cols;  this.residualsWeights  =  new  double[Columns.length][1];	  	non-compiled	[CE]  cannot  find  symbol  Columns	18	None	add
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols!=  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++cols;    }    if(cols!=  cols)  {  ++cols;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
226	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols!=  cols)  {  ++cols;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols!=  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++cols;    }    if(cols!=  cols)  {  ++cols;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
227	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols  >=  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++cols;    }    if(cols  >=  cols)  {  ++cols;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	16	add
228	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols  >=  cols)  {  ++cols;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols  >=  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++cols;    }    if(cols  >=  cols)  {  ++cols;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	16	add
229	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols  ==  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=    cols)    {    ++cols;    }    if(cols  ==  cols)  {  ++cols;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	16	add
230	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols  ==  cols)  {  ++cols;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols  ==  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++cols;    }    if(cols  ==  cols)  {  ++cols;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	16	add
231	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols  >>  cols)  {  ++cols;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++cols;  }  if(cols  >>  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++cols;    }    if(cols  >>  cols)  {  ++cols;  }	  	non-compiled	[CE]  incompatible  types	99	None	add
232	[BUG]  [BUGGY]  cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	16	None	replace
233	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cost);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	16	None	replace
234	[BUG]  [BUGGY]  cols  =  jF.value(point,  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(point,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(point,  DEFAULT_MAX_ITERATIONS);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	16	None	replace
235	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	16	None	replace
236	[BUG]  [BUGGY]  Integer  cols  =  f.getColumnCount();  [CE]  cannot  find  symbol  f  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  f.getColumnCount();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  f.getColumnCount();	  Integer    cols    =    jf.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol  f	116	None	replace
237	[BUG]  [BUGGY]  Integer  cols  =  f.getColumns();  [CE]  cannot  find  symbol  f  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  f.getColumns();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  f.getColumns();	  Integer    cols    =    jf.getColumns();    	non-compiled	[CE]  cannot  find  symbol  f	134	None	replace
238	[BUG]  [BUGGY]  double  cols  =  jF.value(point);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  double  cols  =  jF.value(point);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	double  cols  =  jF.value(point);	  int    cols    =    jF.value(point);    	non-compiled	[CE]  incompatible  types	72	None	replace
239	[BUG]  [BUGGY]  int  cols  =  jF.value(rows);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(rows);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(rows);	  int    cols    =    jF.value(point);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	72	None	replace
240	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length  +  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jF.length  +  1);	  int    cols    =    Math.min(cols.length,    jF.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	73	None	replace
241	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.length);  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.length);	  int    cols    =    Math.min(cols.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  length	73	None	replace
242	[BUG]  [BUGGY]  if(jacobianEvaluations!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobianEvaluations!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobianEvaluations!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(jacobianEvaluations!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	125	None	replace
243	[BUG]  [BUGGY]  int  cols  =  Math.min(jF.length,  js.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(jF.length,  js.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(jF.length,  js.length  -  1);	  int    cols    =    Math.min(cols.length,    jF.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	102	None	replace
244	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.length  -  1);	  int    cols    =    Math.min(cols.length,    jF.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	102	None	replace
245	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length  -  1,  jF.length);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length  -  1,  jF.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jF.length  -  1,  jF.length);	  int    cols    =    Math.min(cols.length,    jF.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	102	None	replace
246	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.removeVectorialFunction();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.removeVectorialFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.removeVectorialFunction();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.removeVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
247	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.updateVectorialFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.updateVectorialFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.updateVectorialFunction();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.removeVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
248	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    columns);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
249	[BUG]  [BUGGY]  if(cols!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    columns);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
250	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  jF.value(cols),  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(rows,  jF.value(cols),  cost);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(rows,  jF.value(cols),  cost);	  ++rows;    int    rows    =    Math.min(rows,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	34	None	replace
251	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols,  jF.value(rows));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(rows,  cols,  jF.value(rows));  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(rows,  cols,  jF.value(rows));	  ++rows;    int    rows    =    Math.min(rows,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	34	None	replace
252	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  ++rows;  ++rows;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++rows;        ++rows;    ++rows;  ++rows;	  	compilable	  [FE]  FunctionEvaluationException  	29	16	add
253	[BUG]  [BUGGY]  ++rows;    ++rows;  ++rows;  ++rows;  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  ++rows;  ++rows;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    ++rows;  ++rows;	  	compilable	  [FE]  FunctionEvaluationException  	29	16	add
254	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  ++cols;  ++rows;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++rows;        ++rows;    ++cols;  ++rows;	  	compilable	  [FE]  FunctionEvaluationException  	29	16	add
255	[BUG]  [BUGGY]  ++rows;    ++rows;  ++cols;  ++rows;  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  ++cols;  ++rows;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    ++cols;  ++rows;	  	compilable	  [FE]  FunctionEvaluationException  	29	16	add
256	[BUG]  [BUGGY]  ++rows;    ++rows;  int  ++rows;  ++rows;  [CE]  not  a  statement  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  int  ++rows;  ++rows;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    int  ++rows;  ++rows;	  	non-compiled	[CE]  not  a  statement	29	None	add
257	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  ++rows;  ++cols;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++rows;        ++rows;    ++rows;  ++cols;	  	compilable	  [FE]  FunctionEvaluationException  	29	16	add
258	[BUG]  [BUGGY]  ++rows;    ++rows;  ++rows;  ++cols;  [FE]  FunctionEvaluationException  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  ++rows;  ++cols;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    ++rows;  ++cols;	  	compilable	  [FE]  FunctionEvaluationException  	29	16	add
259	[BUG]  [BUGGY]  ++rows;    ++rows;  int  cols;  ++cols;  [CE]  variable  cols  might  not  have  been  initialized  [FE]            FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  int  cols;  ++cols;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    int  cols;  ++cols;	  	non-compiled	[CE]  variable  cols  might  not  have  been  initialized	29	None	add
260	[BUG]  [BUGGY]  cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols[0]);    }    	non-compiled	[CE]  not  a  statement	137	None	replace
261	[BUG]  [BUGGY]  if(cols!=  null)  {  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
262	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols[0]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	137	None	replace
263	[BUG]  [BUGGY]  cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[1]);  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[1]);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[1]);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols[0]);    }    	non-compiled	[CE]  not  a  statement	137	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.  [CE]  ')'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS    	non-compiled	[CE]  ')'  expected	108	None	replace
265	[BUG]  [BUGGY]  if(jcobian!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  cannot  find  symbol  jcobian  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jcobian!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jcobian!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null)    {    ++jcobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  jcobian	24	None	replace
266	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++jcobianEvaluations;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null)  {  ++jcobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++jcobianEvaluations;  }	  if(cols    ==    null)    {    ++jcobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	24	None	replace
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian  ==  null)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jacobian  ==  null)  {  ++cols;  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    	compilable	  [FE]  AssertionFailedError  	25	1	replace
268	[BUG]  [BUGGY]  if(jacobian  ==  null)  {  ++cols;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian  ==  null)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian  ==  null)  {  ++cols;  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    	compilable	  [FE]  AssertionFailedError  	25	1	replace
269	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	143	16	replace
270	[BUG]  [BUGGY]  if(rows  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	143	16	replace
271	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	143	16	replace
272	[BUG]  [BUGGY]  if(rows  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  >=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	143	16	replace
273	[BUG]  [BUGGY]  if(cols!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	143	None	replace
274	[BUG]  [BUGGY]  Integer  cols  =  this.jF.getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  this.jF.getColumnCount()  -  1;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  this.jF.getColumnCount()  -  1;	  Integer    cols    =    this.jF.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Localized  [CE]  ')'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Localized  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Localized	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMP    	non-compiled	[CE]  ')'  expected	83	None	replace
276	[BUG]  [BUGGY]  ++this.resultIterations  +  2;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.resultIterations  +  2;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultIterations  +  2;	  ++this.resultIterations    +    1;    	non-compiled	[CE]  not  a  statement	103	None	replace
277	[BUG]  [BUGGY]  ++this.resultIterations  *  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.resultIterations  *  1;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultIterations  *  1;	  ++this.resultIterations    +    1;    	non-compiled	[CE]  not  a  statement	103	None	replace
278	[BUG]  [BUGGY]  rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  not  a  statement	136	None	replace
279	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  <  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  <  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	compilable	  [FE]  FunctionEvaluationException  	136	16	replace
280	[BUG]  [BUGGY]  if(cols  <  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [FE]  FunctionEvaluationException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  <  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  <  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	compilable	  [FE]  FunctionEvaluationException  	136	16	replace
281	[BUG]  [BUGGY]  ||  cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ||  cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	||  cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
282	[BUG]  [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)super.updateJacobianEvaluation();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)super.updateJacobianEvaluation();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)super.updateJacobianEvaluation();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)super.updateJacobianEvaluation();    	non-compiled	[CE]  not  a  statement	71	None	replace
283	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateJacobianEvaluation();  [CE]  '('  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateJacobianEvaluation();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateJacobianEvaluation();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)super.updateJacobianEvaluation();    	non-compiled	[CE]  '('  expected	71	None	replace
284	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateJacobianEvaluation();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateJacobianEvaluation();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateJacobianEvaluation();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)super.updateJacobianEvaluation();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
285	[BUG]  [BUGGY]  ++this.residualsIterations  +  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.residualsIterations  +  1;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residualsIterations  +  1;	  ++this.residualsIterations;    	non-compiled	[CE]  not  a  statement	6	None	replace
286	[BUG]  [BUGGY]  Integer  cols  =  jF.columns()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.columns()  +  1;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.columns()  +  1;	  Integer    cols    =    jF.columns();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
287	[BUG]  [BUGGY]  Integer  cols  =  this.jF.columns();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  this.jF.columns();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  this.jF.columns();	  Integer    cols    =    jF.columns();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
288	[BUG]  [BUGGY]  Integer  cols  =  jf.columns();  [CE]  cannot  find  symbol  jf  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jf.columns();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jf.columns();	  Integer    cols    =    jF.columns();    	non-compiled	[CE]  cannot  find  symbol  jf	3	None	replace
289	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  2);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  2);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  cols.length  -  2);	  int    cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None	replace
290	[BUG]  [BUGGY]  if(rows!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    null)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	44	None	replace
291	[BUG]  [BUGGY]  if(rows!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols!=    null)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	44	None	replace
292	[BUG]  [BUGGY]  Integer  cols  =(this.jF!=  null)?  this.jF.getColumns()  :  0;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =(this.jF!=  null)?  this.jF.getColumns()  :  0;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =(this.jF!=  null)?  this.jF.getColumns()  :  0;	  Integer    cols    =    this.jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
293	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows    >    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	138	16	add
294	[BUG]  [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows    >    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	138	16	add
295	[BUG]  [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows    >    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  	non-compiled	[CE]  cannot  find  symbol  columns	138	None	add
296	[BUG]  [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }  [CE]  cannot  find  symbol  row  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows    >    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }	  	non-compiled	[CE]  cannot  find  symbol  row	138	None	add
297	[BUG]  [BUGGY]  Integer  cols  =  jF.getCols();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.getCols();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.getCols();	  Integer    cols    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
298	[BUG]  [BUGGY]  Integer  cols  =  jF.cols();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.cols();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.cols();	  Integer    cols    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(  [CE]  ')'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  ')'  expected	82	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf  ==  null)  {  throw  new  FunctionEvaluationException(  [CE]  ')'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf  ==  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf  ==  null)  {  throw  new  FunctionEvaluationException(	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  ')'  expected	82	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(  [CE]  ')'  expected  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  ')'  expected	82	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException  [CE]  '('  or  '['  expected  [FE]                  FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  '('  or  '['  expected	82	None	replace
303	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	compilable	  [FE]  FunctionEvaluationException  	77	16	replace
304	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	compilable	  [FE]  FunctionEvaluationException  	77	16	replace
305	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	compilable	  [FE]  FunctionEvaluationException  	77	16	replace
306	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	compilable	  [FE]  FunctionEvaluationException  	77	16	replace
307	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	compilable	  [FE]  FunctionEvaluationException  	77	16	replace
308	[BUG]  [BUGGY]  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	compilable	  [FE]  FunctionEvaluationException  	77	16	replace
309	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.cols;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++this.cols;	  ++this.colonEvaluations;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	70	16	replace
310	[BUG]  [BUGGY]  ++this.cols;  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.cols;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.cols;	  ++this.colonEvaluations;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	70	16	replace
311	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jacobian    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	41	16	add
312	[BUG]  [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	41	16	add
313	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jacobian    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	41	16	add
314	[BUG]  [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	41	16	add
315	[BUG]  [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  If(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  ';'  expected  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  If(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    If(jacobian  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	non-compiled	[CE]  ';'  expected	41	None	add
316	[BUG]  [BUGGY]  if(jF!=  null)  {  if(jacobian  ==  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  if(jacobian  ==  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=  null)  {  if(jacobian  ==  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(jacobian    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
317	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jF  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(jacobian    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	42	16	replace
318	[BUG]  [BUGGY]  if(jF  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(jacobian    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	42	16	replace
319	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)object();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)object();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)object();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.object();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
320	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.object();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.object();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.object();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.object();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
321	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.target();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.target();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.target();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.object();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
322	[BUG]  [BUGGY]  int  cols  =  jF.value(point,  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(point,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(point,  DEFAULT_MAX_ITERATIONS);	  int    cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	36	None	replace
323	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);	  int    cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	36	None	replace
324	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cols);	  int    cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	36	None	replace
325	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  int    cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	36	None	replace
326	[BUG]  [BUGGY]  ++this.residualsWights;  [CE]  cannot  find  symbol  residualsWights  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.residualsWights;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residualsWights;	  ++this.resultSize;    	non-compiled	[CE]  cannot  find  symbol  residualsWights	113	None	replace
327	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  <  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows  <  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(rows    >    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	139	16	replace
328	[BUG]  [BUGGY]  if(rows  <  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  <  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  <  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(rows    >    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	139	16	replace
329	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.updateMatrix();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.updateMatrix();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.updateMatrix();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)jf.updateJacobian();    	non-compiled	[CE]  not  a  statement	13	None	replace
330	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.updateJacobian();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.updateJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.updateJacobian();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)jf.updateJacobian();    	non-compiled	[CE]  not  a  statement	13	None	replace
331	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.update();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.update();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.update();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)jf.updateJacobian();    	non-compiled	[CE]  not  a  statement	13	None	replace
332	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.updateRow();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.updateRow();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jF.updateRow();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)jf.updateJacobian();    	non-compiled	[CE]  not  a  statement	13	None	replace
333	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++cols;  ++cols;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null)  {  ++cols;  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++cols;  ++cols;  }	  ++cols;    ++cols;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	19	None	replace
334	[BUG]  [BUGGY]  if(rows  ==  0)  {  ++cols;  ++cols;  }  else  {  throw  new  FunctionEvaluationException( " ");  }  [CE]  no  suitable  constructor  found  for  FunctionEvaluationException(String)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  0)  {  ++cols;  ++cols;  }  else  {  throw  new  FunctionEvaluationException( " ");  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  0)  {  ++cols;  ++cols;  }  else  {  throw  new  FunctionEvaluationException( " ");  }	  ++cols;    ++cols;    	non-compiled	[CE]  no  suitable  constructor  found  for  FunctionEvaluationException(String)	19	None	replace
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  0)  {  ++cols;  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows  ==  0)  {  ++cols;  ++cols;  }	  ++cols;    ++cols;    	compilable	  [FE]  AssertionFailedError  	19	1	replace
336	[BUG]  [BUGGY]  if(rows  ==  0)  {  ++cols;  ++cols;  }  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  0)  {  ++cols;  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  0)  {  ++cols;  ++cols;  }	  ++cols;    ++cols;    	compilable	  [FE]  AssertionFailedError  	19	1	replace
337	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++cols;  ++cols;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null)  {  ++cols;  ++cols;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++cols;  ++cols;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++cols;    ++cols;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	19	None	replace
338	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols),  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols),  cost);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(cols),  cost);	  ++cols;    int    cols    =    Math.min(cols,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	91	None	replace
339	[BUG]  [BUGGY]  cols  =  jF.value(cols,  maxIterations);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  maxIterations);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  maxIterations);	  cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	14	None	replace
340	[BUG]  [BUGGY]  cols  =  jF.value(cols,  cost,  iterations);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  cost,  iterations);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  cost,  iterations);	  cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	14	None	replace
341	[BUG]  [BUGGY]  cols  =  jF.value(cols,  cost,  targetValues);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  cost,  targetValues);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  cost,  targetValues);	  cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	14	None	replace
342	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols);  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  cols);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  cols);	  ++cols;    int    cols    =    Math.min(cols.length,    cols);    	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	replace
343	[BUG]  [BUGGY]  int  cols  =  jF.length()  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.length()  +  1;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.length()  +  1;	  int    cols    =    jF.length();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
344	[BUG]  [BUGGY]  int  cols  =  this.jF.length();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  this.jF.length();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  this.jF.length();	  int    cols    =    jF.length();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
345	[BUG]  [BUGGY]  ++this.targetValues.length;  [CE]  cannot  assign  a  value  to  final  variable  length  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.targetValues.length;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.targetValues.length;	  ++this.targetValues;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  length	1	None	replace
346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.targetValues[0];  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++this.targetValues[0];	  ++this.targetValues;    	compilable	  [FE]  AssertionFailedError  	1	13	replace
347	[BUG]  [BUGGY]  ++this.targetValues[0];  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.targetValues[0];  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.targetValues[0];	  ++this.targetValues;    	compilable	  [FE]  AssertionFailedError  	1	13	replace
348	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  column.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  column.length  +  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  column.length  +  1);	  int    cols    =    Math.min(cols.length,    column.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	123	None	replace
349	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  columns.length);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  columns.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  columns.length);	  int    cols    =    Math.min(cols.length,    column.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	123	None	replace
350	[BUG]  [BUGGY]  if(cols!=  null)  {  ++jcobianEvaluations;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++jcobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++jcobianEvaluations;  }	  if(cols!=    null)    {    ++jcobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
351	[BUG]  [BUGGY]  if(jcobian!=  null)  {  ++jcobianEvaluations;  }  [CE]  cannot  find  symbol  jcobian  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jcobian!=  null)  {  ++jcobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jcobian!=  null)  {  ++jcobianEvaluations;  }	  if(cols!=    null)    {    ++jcobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  jcobian	54	None	replace
352	[BUG]  [BUGGY]  if(rows  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	43	None	replace
353	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  rows);  [CE]  no  suitable  method  found  for  min(int,double[][],int)  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  rows);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point),  rows);	  int    cols    =    Math.min(cols,    jF.value(rows));    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[][],int)	86	None	replace
354	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point,  rows));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point,  rows));  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point,  rows));	  int    cols    =    Math.min(cols,    jF.value(rows));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	86	None	replace
355	[BUG]  [BUGGY]  if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    null)    {    ++bracobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	128	None	replace
356	[BUG]  [BUGGY]  if(cols!=  null)  {  ++bracobianEvaluations;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++bracobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++bracobianEvaluations;  }	  if(cols!=    null)    {    ++bracobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	128	None	replace
357	[BUG]  [BUGGY]  if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols!=    null)    {    ++bracobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	128	None	replace
358	[BUG]  [BUGGY]  ++this.resultEvaluations  +  2;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.resultEvaluations  +  2;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultEvaluations  +  2;	  ++this.resultEvaluations    +    1;    	non-compiled	[CE]  not  a  statement	88	None	replace
359	[BUG]  [BUGGY]  ++this.resultEvaluations  *  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.resultEvaluations  *  1;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultEvaluations  *  1;	  ++this.resultEvaluations    +    1;    	non-compiled	[CE]  not  a  statement	88	None	replace
360	[BUG]  [BUGGY]  int  cols  =  Math.max(cols.length,  cols);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.max(cols.length,  cols);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.max(cols.length,  cols);	  ++cols;    int    cols    =    Math.max(cols.length,    cols);    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
361	[BUG]  [BUGGY]  int  cols  =  Math.max(cols,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.max(cols,  cols.length);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.max(cols,  cols.length);	  ++cols;    int    cols    =    Math.max(cols.length,    cols);    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
362	[BUG]  [BUGGY]  ++cols;  int  cols  =  Math.max(cols.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;  int  cols  =  Math.max(cols.length,  cols.length);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;  int  cols  =  Math.max(cols.length,  cols.length);	  ++cols;    int    cols    =    Math.max(cols.length,    cols);    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
363	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    columns);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	104	None	replace
364	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	140	16	add
365	[BUG]  [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	compilable	  [FE]  FunctionEvaluationException  	140	16	add
366	[BUG]  [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  	non-compiled	[CE]  cannot  find  symbol  columns	140	None	add
367	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  	compilable	  [FE]  FunctionEvaluationException  	140	16	add
368	[BUG]  [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  	compilable	  [FE]  FunctionEvaluationException  	140	16	add
369	[BUG]  [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }  [CE]  cannot  find  symbol  fields  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }	  	non-compiled	[CE]  cannot  find  symbol  fields	140	None	add
370	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  +  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length  +  1);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
371	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  2);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  2);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length  -  2);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
372	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  column.length  -  1,  rows);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  column.length  -  1,  rows);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  column.length  -  1,  rows);	  int    cols    =    Math.min(cols.length,    column.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	130	None	replace
373	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  columns.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  columns.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  columns.length  -  1);	  int    cols    =    Math.min(cols.length,    column.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	130	None	replace
374	[BUG]  [BUGGY]  if(cols!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
375	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
376	[BUG]  [BUGGY]  if(jF!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  cannot  find  symbol  jcobianEvaluations  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(jF!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  cannot  find  symbol  jcobianEvaluations	127	None	replace
377	[BUG]  [BUGGY]  if(jF  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  cannot  find  symbol  jcobianEvaluations  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(jF!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  cannot  find  symbol  jcobianEvaluations	127	None	replace
378	[BUG]  [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorFunction)getObject();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorFunction)getObject();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorFunction  jf  =(MultivariateVectorFunction)getObject();	  MultivariateVectorFunction    jf    =(MultivariateVectorialFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
379	[BUG]  [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorialFunction)getValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorialFunction)getValue();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorFunction  jf  =(MultivariateVectorialFunction)getValue();	  MultivariateVectorFunction    jf    =(MultivariateVectorialFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
380	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(rows!=  cols)  {  ++cols;  }	  if(cols!=    cols)    {    ++cols;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	100	9	replace
381	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++cols;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  cols)  {  ++cols;  }	  if(cols!=    cols)    {    ++cols;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	100	9	replace
382	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  ==  cols)  {  ++cols;  }	  if(cols!=    cols)    {    ++cols;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	100	16	replace
383	[BUG]  [BUGGY]  if(cols  ==  cols)  {  ++cols;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  cols)  {  ++cols;  }	  if(cols!=    cols)    {    ++cols;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	100	16	replace
384	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.updateMatrix();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.updateMatrix();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.updateMatrix();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)super.updateJacobian();    	non-compiled	[CE]  not  a  statement	11	None	replace
385	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)function.updateJacobian();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)function.updateJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)function.updateJacobian();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)super.updateJacobian();    	non-compiled	[CE]  not  a  statement	11	None	replace
386	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols    ==    null)    {    ++jcobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	24	None	replace
387	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++jcobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	24	None	replace
388	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateJacobianEvaluator();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateJacobianEvaluator();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateJacobianEvaluator();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
389	[BUG]  [BUGGY]  ++this.residualsWheel;  [CE]  cannot  find  symbol  residualsWheel  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.residualsWheel;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residualsWheel;	  ++this.residuals;    	non-compiled	[CE]  cannot  find  symbol  residualsWheel	69	None	replace
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.residualsWeights[0];  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++this.residualsWeights[0];	  ++this.residualsWeights;    	compilable	  [FE]  AssertionFailedError  	2	13	replace
391	[BUG]  [BUGGY]  ++this.residualsWeights[0];  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.residualsWeights[0];  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residualsWeights[0];	  ++this.residualsWeights;    	compilable	  [FE]  AssertionFailedError  	2	13	replace
392	[BUG]  [BUGGY]  ++this.resultValues;  [CE]  cannot  find  symbol  resultValues  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.resultValues;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultValues;	  ++this.targetValues;    	non-compiled	[CE]  cannot  find  symbol  resultValues	1	None	replace
393	[BUG]  [BUGGY]  ++cols;  int  cols  =  Math.min(cols,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;  int  cols  =  Math.min(cols,  cols.length);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;  int  cols  =  Math.min(cols,  cols.length);	  ++cols;    int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	20	None	replace
394	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getObject();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getObject();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getObject();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.getObject();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
395	[BUG]  [BUGGY]  cols  =  jF.value(cols,  0,  1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  0,  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  0,  1);	  cols    =    jF.value(cols,    1);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	96	None	replace
396	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols;  ++cols;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++cols;  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols;  ++cols;  }	  ++cols;    ++cols;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	19	None	replace
397	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols;  ++cols;  }  else  {  throw  new  FunctionEvaluationException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++cols;  ++cols;  }  else  {  throw  new  FunctionEvaluationException( " ");  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols;  ++cols;  }  else  {  throw  new  FunctionEvaluationException( " ");  }	  ++cols;    ++cols;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	19	None	replace
398	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	16	replace
399	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	16	replace
400	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvalu  [CE]  '('  or  '['  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvalu  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvalu	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  '('  or  '['  expected	82	None	replace
401	[BUG]  [BUGGY]  ++this.resultSIMPLE;  [CE]  cannot  find  symbol  resultSIMPLE  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.resultSIMPLE;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultSIMPLE;	  ++this.resultSquares;    	non-compiled	[CE]  cannot  find  symbol  resultSIMPLE	87	None	replace
402	[BUG]  [BUGGY]  ++this.result;  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.result;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.result;	  ++this.resultSquares;    	non-compiled	[CE]  cannot  find  symbol  result	87	None	replace
403	[BUG]  [BUGGY]  cols  =  Math.min(cols,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  Math.min(cols,  cols.length);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  Math.min(cols,  cols.length);	  if(cols!=    cols)    {    ++cols;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	100	None	replace
404	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(points));  [CE]  cannot  find  symbol  points  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(points));  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(points));	  int    cols    =    Math.min(cols,    jF.value(rows));    	non-compiled	[CE]  cannot  find  symbol  points	86	None	replace
405	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols),  0);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols),  0);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(cols),  0);	  int    cols    =    Math.min(cols,    jF.value(rows));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	86	None	replace
406	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this,  function.updateJacobian();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this,  function.updateJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this,  function.updateJacobian();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.function.updateJacobian();    	non-compiled	[CE]  ';'  expected	105	None	replace
407	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getVectorFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getVectorFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getVectorFunction();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
408	[BUG]  [BUGGY]  if(jacobianEvaluations!=  null)  {  ++jacobianEvaluations;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobianEvaluations!=  null)  {  ++jacobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobianEvaluations!=  null)  {  ++jacobianEvaluations;  }	  if(jacobianEvaluations    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	124	None	replace
409	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.value();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.value();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.value();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.object();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
410	[BUG]  [BUGGY]  cols  =  jF.value(point,  null);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(point,  null);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(point,  null);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	15	None	replace
411	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().getSelectedMatrixFunction();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().getSelectedMatrixFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().getSelectedMatrixFunction();	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().getVisibleMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
412	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().getVisibilityMatrixFunction();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().getVisibilityMatrixFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().getVisibilityMatrixFunction();	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().getVisibleMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
413	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
414	[BUG]  [BUGGY]  ++this.colonEvaluations  +  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.colonEvaluations  +  1;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.colonEvaluations  +  1;	  ++this.colonEvaluations;    	non-compiled	[CE]  not  a  statement	70	None	replace
415	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols)-1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols)-1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(cols)-1);	  int    cols    =    Math.min(cols,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	57	None	replace
416	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols)+  1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols)+  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(cols)+  1);	  int    cols    =    Math.min(cols,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	57	None	replace
417	[BUG]  [BUGGY]  ++this.cobianEvaluations  *  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.cobianEvaluations  *  1;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.cobianEvaluations  *  1;	  ++this.cobianEvaluations    +    1;    	non-compiled	[CE]  not  a  statement	133	None	replace
418	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jacobian.length  -  1);  [CE]  variable  cols  might  not  have  been  initialized  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jacobian.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jacobian.length  -  1);	  int    cols    =    Math.min(cols.length,    jacobian.length    -    1);    	non-compiled	[CE]  variable  cols  might  not  have  been  initialized	129	None	replace
419	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }  [CE]  cannot  find  symbol  row  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    if(cols  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }	  	non-compiled	[CE]  cannot  find  symbol  row	135	None	add
420	[BUG]  [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }  [CE]  cannot  find  symbol  row  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  }	  	non-compiled	[CE]  cannot  find  symbol  row	140	None	add
421	[BUG]  [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)function.updateJacobian();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)function.updateJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  super  =(MultivariateMatrixFunction)function.updateJacobian();	  MultivariateMatrixFunction    super    =(MultivariateMatrixFunction)super.updateJacobian();    	non-compiled	[CE]  not  a  statement	62	None	replace
422	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  column.length);  [CE]  cannot  find  symbol  column  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  column.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  column.length);	  int    cols    =    Math.min(cols.length,    column.length);    	non-compiled	[CE]  cannot  find  symbol  column	123	None	replace
423	[BUG]  [BUGGY]  int  cols  =  Math.min(column,  column.length);  [CE]  cannot  find  symbol  column  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(column,  column.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(column,  column.length);	  int    cols    =    Math.min(cols.length,    column.length);    	non-compiled	[CE]  cannot  find  symbol  column	123	None	replace
424	[BUG]  [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(rows    >    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  cannot  find  symbol  columns	139	None	replace
425	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  [CE]  cannot  find  symbol  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MutableMultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MutableMultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction(i);    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
426	[BUG]  [BUGGY]  int  rows  =  Math.min(residualsWeights,  jf.length);  [CE]  cannot  find  symbol  jf  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(residualsWeights,  jf.length);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(residualsWeights,  jf.length);	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction(i);    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  cannot  find  symbol  jf	81	None	replace
427	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  jf  =  getMultivariateMatrixFunction(i);  [CE]  cannot  find  symbol  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MutableMultivariateVectorialFunction  jf  =  getMultivariateMatrixFunction(i);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MutableMultivariateVectorialFunction  jf  =  getMultivariateMatrixFunction(i);	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction(i);    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
428	[BUG]  [BUGGY]  int  rows  =  Math.min(residualsWeights,  -Math.sqrt(rows));  [CE]  no  suitable  method  found  for  min(double[],double)  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(residualsWeights,  -Math.sqrt(rows));  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(residualsWeights,  -Math.sqrt(rows));	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction(i);    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double)	81	None	replace
429	[BUG]  [BUGGY]  Integer  cols  =  jacobian.columnCount();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jacobian.columnCount();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jacobian.columnCount();	  Integer    cols    =    jF.columnCount();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
430	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.length  -  1,  rows);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.length  -  1,  rows);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.length  -  1,  rows);	  int    cols    =    Math.min(cols.length,    cols.length    -    1,    rows);    	non-compiled	[CE]  cannot  find  symbol  length	60	None	replace
431	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1,  columns);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1,  columns);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  cols.length  -  1,  columns);	  int    cols    =    Math.min(cols.length,    cols.length    -    1,    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	60	None	replace
432	[BUG]  [BUGGY]  AssertionFailedError  jf  =  new  AssertionFailedError(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  AssertionFailedError  jf  =  new  AssertionFailedError(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	AssertionFailedError  jf  =  new  AssertionFailedError(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);	  if(jF!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
433	[BUG]  [BUGGY]  Integer  cols  =  jF.value(columns,  1);  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.value(columns,  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.value(columns,  1);	  Integer    cols    =    jF.value(columns);    	non-compiled	[CE]  cannot  find  symbol  columns	92	None	replace
434	[BUG]  [BUGGY]  Integer  cols  =  jF.value(columns  +  1);  [CE]  cannot  find  symbol  columns  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.value(columns  +  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.value(columns  +  1);	  Integer    cols    =    jF.value(columns);    	non-compiled	[CE]  cannot  find  symbol  columns	92	None	replace
435	[BUG]  [BUGGY]  int  cols  =  jacobian.length();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jacobian.length();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jacobian.length();	  int    cols    =    jF.length();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
436	[BUG]  [BUGGY]  int  cols  =  jf.length();  [CE]  cannot  find  symbol  jf  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jf.length();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jf.length();	  int    cols    =    jF.length();    	non-compiled	[CE]  cannot  find  symbol  jf	51	None	replace
437	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.updateVectorialFunction(jF);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.updateVectorialFunction(jF);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.updateVectorialFunction(jF);	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.removeVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
438	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	143	16	replace
439	[BUG]  [BUGGY]  if(cols!=  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	143	16	replace
440	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  cannot  find  symbol  columns	143	None	replace
441	[BUG]  [BUGGY]  if(cols!=  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  cannot  find  symbol  columns	143	None	replace
442	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols.length;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++cols.length;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols.length;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	43	None	replace
443	[BUG]  [BUGGY]  if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }  [CE]  cannot  find  symbol  fields  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }	  if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  cannot  find  symbol  fields	141	None	replace
444	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jacobian.length);  [CE]  variable  cols  might  not  have  been  initialized  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jacobian.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jacobian.length);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  variable  cols  might  not  have  been  initialized	122	None	replace
445	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++cols;  }  If(cols!=  cols)  {  ++cols;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++cols;  }  If(cols!=  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++cols;    }    If(cols!=  cols)  {  ++cols;  }	  	non-compiled	[CE]  ';'  expected	99	None	add
446	[BUG]  [BUGGY]  cols  =  jF.value(cols,  null,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  null,  residualsWeights);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  null,  residualsWeights);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	17	None	replace
447	[BUG]  [BUGGY]  cols  =  jF.value(cols,  null,  rows);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  null,  rows);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  null,  rows);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	17	None	replace
448	[BUG]  [BUGGY]  cols  =  jF.value(cols,  null,  row);  [CE]  cannot  find  symbol  row  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  null,  row);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  null,  row);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  cannot  find  symbol  row	17	None	replace
449	[BUG]  [BUGGY]  Integer  cols  =  this.jf.getColumnCount();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  this.jf.getColumnCount();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  this.jf.getColumnCount();	  Integer    cols    =    jf.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol  jf	116	None	replace
450	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols;  int  cols  =  Math.min(cols,  jF.value(cols));  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++cols;  int  cols  =  Math.min(cols,  jF.value(cols));  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols;  int  cols  =  Math.min(cols,  jF.value(cols));  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,	  ++cols;    int    cols    =    Math.min(cols.length,    jF.value(cols));    	non-compiled	[CE]  ')'  expected	117	None	replace
451	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  0);  [CE]  no  suitable  method  found  for  min(int,double[][],int)  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  0);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point),  0);	  int    cols    =    Math.min(cols,    jF.value(point));    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[][],int)	59	None	replace
452	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  2);  [CE]  no  suitable  method  found  for  min(int,double[][],int)  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  2);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point),  2);	  int    cols    =    Math.min(cols,    jF.value(point));    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[][],int)	59	None	replace
453	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point)-1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point)-1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point)-1);	  int    cols    =    Math.min(cols,    jF.value(point));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	59	None	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jacobian!=  null)  {  ++jacobianEvaluations;  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
455	[BUG]  [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian!=  null)  {  ++jacobianEvaluations;  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
456	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
457	[BUG]  [BUGGY]  if(cols  >  0)  {  ++cols;  }  when(cols  >  0)  {  ++cols;  }  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++cols;  }  when(cols  >  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++cols;    }    when(cols  >  0)  {  ++cols;  }	  	non-compiled	[CE]  ';'  expected	97	None	add
458	[BUG]  [BUGGY]  int  cols  =  jF.value(colon);  [CE]  cannot  find  symbol  colon  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(colon);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(colon);	  int    cols    =    jF.value(point);    	non-compiled	[CE]  cannot  find  symbol  colon	72	None	replace
459	[BUG]  [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  cannot  find  symbol  columns	89	None	replace
460	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateVectorialFunction();  [CE]  '('  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateVectorialFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateVectorialFunction();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)this.super.updateJacobian();    	non-compiled	[CE]  '('  expected	63	None	replace
461	[BUG]  [BUGGY]  int  cols  =  jf.cols();  [CE]  cannot  find  symbol  jf  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jf.cols();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jf.cols();	  int    cols    =    jF.cols();    	non-compiled	[CE]  cannot  find  symbol  jf	50	None	replace
462	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=  0)  {  ++cols;  }	  if(cols    >    0)    {    ++cols;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	16	replace
463	[BUG]  [BUGGY]  if(cols!=  0)  {  ++cols;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  0)  {  ++cols;  }	  if(cols    >    0)    {    ++cols;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	16	replace
464	[BUG]  [BUGGY]  if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  fields);  }	  if(cols!=    null)    {    ++bracobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	128	None	replace
465	[BUG]  [BUGGY]  ++cols;  int  cols  =  Math.max(cols,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;  int  cols  =  Math.max(cols,  cols.length);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;  int  cols  =  Math.max(cols,  cols.length);	  ++cols;    int    cols    =    Math.max(cols.length,    cols);    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
466	[BUG]  [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.D  [CE]  ')'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.D  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF.value(cols,  LocalizedFormats.DIMENSIONS)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.D	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS    	non-compiled	[CE]  ')'  expected	108	None	replace
467	[BUG]  [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats  [CE]  ')'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS    	non-compiled	[CE]  ')'  expected	108	None	replace
468	[BUG]  [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIM  [CE]  ')'  expected  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIM  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF.value(cols,  LocalizedFormats.DIMENSIONS)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIM	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS    	non-compiled	[CE]  ')'  expected	108	None	replace
469	[BUG]  [BUGGY]  Integer  cols  =  jF.getColumnCount()  *  4;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.getColumnCount()  *  4;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.getColumnCount()  *  4;	  Integer    cols    =    jF.getColumnCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
470	[BUG]  [BUGGY]  int  rows  =  Math.min(jF.value(rows),  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(jF.value(rows),  cost);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(jF.value(rows),  cost);	  ++rows;    int    rows    =    Math.min(jF.value(rows),    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	33	None	replace
471	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS  [CE]  ')'  expected  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(point);  if(jacobian.length!=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jacobian    =    jF.value(point);    if(jacobian.length!=    rows)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	107	None	replace
472	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MutableMultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MutableMultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMP    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
473	[BUG]  [BUGGY]  int  rows  =  Math.min(residualsWeights,  0);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(residualsWeights,  0);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(residualsWeights,  0);	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMP    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	83	None	replace
474	[BUG]  [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
475	[BUG]  [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows  [CE]  ')'  expected  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows	  	non-compiled	[CE]  ')'  expected	29	None	add
476	[BUG]  [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [CE]  illegal  start  of  expression  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
477	[BUG]  [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  [CE]  ')'  expected  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  if(!jF.value(cols[i]))  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,	  	non-compiled	[CE]  ')'  expected	29	None	add
478	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  jf  =(MutableMultivariateVectorialFunction)super.getVectorialFunction();  [CE]  cannot  find  symbol  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MutableMultivariateVectorialFunction  jf  =(MutableMultivariateVectorialFunction)super.getVectorialFunction();  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MutableMultivariateVectorialFunction  jf  =(MutableMultivariateVectorialFunction)super.getVectorialFunction();	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    jF.value(point);    if(jF.value(rows)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
479	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  jf  =(MutableMultivariateVectorialFunction)this.targetValues.get(i);  [CE]  cannot  find  symbol  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MutableMultivariateVectorialFunction  jf  =(MutableMultivariateVectorialFunction)this.targetValues.get(i);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MutableMultivariateVectorialFunction  jf  =(MutableMultivariateVectorialFunction)this.targetValues.get(i);	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    jF.value(point);    if(jF.value(rows)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
480	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  jf  =(MutableMultivariateVectorialFunction)super.getVectoria();  [CE]  cannot  find  symbol  [FE]                  FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MutableMultivariateVectorialFunction  jf  =(MutableMultivariateVectorialFunction)super.getVectoria();  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MutableMultivariateVectorialFunction  jf  =(MutableMultivariateVectorialFunction)super.getVectoria();	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    jF.value(point);    if(jF.value(rows)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
481	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.updateMatrix();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.updateMatrix();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.updateMatrix();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)jf.updateJacobian();    	non-compiled	[CE]  not  a  statement	13	None	replace
482	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.update();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.update();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.update();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)jf.updateJacobian();    	non-compiled	[CE]  not  a  statement	13	None	replace
483	[BUG]  [BUGGY]  ++cols;    ++cols;  int  cols;  ++cols;  [CE]  variable  cols  might  not  have  been  initialized  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  int  cols;  ++cols;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    int  cols;  ++cols;	  	non-compiled	[CE]  variable  cols  might  not  have  been  initialized	18	None	add
484	[BUG]  [BUGGY]  ++cols;    ++cols;  int  cols  =  Math.min(cols.length,  cols);  [CE]  int  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  int  cols  =  Math.min(cols.length,  cols);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    int  cols  =  Math.min(cols.length,  cols);	  	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	add
485	[BUG]  [BUGGY]  ++cols;    ++cols;  int  cols  =  jF.value(cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  int  cols  =  jF.value(cols);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    int  cols  =  jF.value(cols);	  	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	18	None	add
486	[BUG]  [BUGGY]  ++cols;    ++cols;  int  cols  =  Math.min(cols,  cols);  [CE]  variable  cols  might  not  have  been  initialized  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  int  cols  =  Math.min(cols,  cols);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    int  cols  =  Math.min(cols,  cols);	  	non-compiled	[CE]  variable  cols  might  not  have  been  initialized	18	None	add
487	[BUG]  [BUGGY]  cols  =  cols.substring(0,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  cols.substring(0,  cols.length);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  cols.substring(0,  cols.length);	  if(cols    ==    null    ||    cols.length    <    2)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	115	None	replace
488	[BUG]  [BUGGY]  cols  =  cols.substring(0,  cols.length()  -  2);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  cols.substring(0,  cols.length()  -  2);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  cols.substring(0,  cols.length()  -  2);	  if(cols    ==    null    ||    cols.length    <    2)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	115	None	replace
489	[BUG]  [BUGGY]  cols  =  cols.value();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  cols.value();  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  cols.value();	  if(cols    ==    null    ||    cols.length    <    2)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	115	None	replace
490	[BUG]  [BUGGY]  Integer  cols  =  JFactory.columns();  [CE]  cannot  find  symbol  JFactory  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  JFactory.columns();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  JFactory.columns();	  Integer    cols    =    jF.columns();    	non-compiled	[CE]  cannot  find  symbol  JFactory	3	None	replace
491	[BUG]  [BUGGY]  Integer  cols  =  jacobian.columns();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jacobian.columns();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jacobian.columns();	  Integer    cols    =    jF.columns();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
492	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(last);  [CE]  cannot  find  symbol  last  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(last);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(last);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(point);    	non-compiled	[CE]  cannot  find  symbol  last	26	None	replace
493	[BUG]  [BUGGY]  Integer  cols  =(this.jF!=  null)?  this.jF  :  this.jF.getColumns();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =(this.jF!=  null)?  this.jF  :  this.jF.getColumns();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =(this.jF!=  null)?  this.jF  :  this.jF.getColumns();	  Integer    cols    =    this.jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
494	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    if(cols!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE	  	non-compiled	[CE]  ')'  expected	76	None	add
495	[BUG]  [BUGGY]  int  cols  =  Math.min(column,  column.length  -  1);  [CE]  cannot  find  symbol  column  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(column,  column.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(column,  column.length  -  1);	  int    cols    =    Math.min(cols.length,    column.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  column	130	None	replace
496	[BUG]  [BUGGY]  int  cols  =  Math.min(column.length,  column.length  -  1);  [CE]  cannot  find  symbol  column  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(column.length,  column.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(column.length,  column.length  -  1);	  int    cols    =    Math.min(cols.length,    column.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  column	130	None	replace
497	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  column.length  -  1);  [CE]  cannot  find  symbol  column  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  column.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  column.length  -  1);	  int    cols    =    Math.min(cols.length,    column.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  column	130	None	replace
498	[BUG]  [BUGGY]  cols  =  jF.value(cols,  0,  2);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  0,  2);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  0,  2);	  cols    =    jF.value(cols,    2);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	114	None	replace
499	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  ++rows;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  ++rows;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  ++rows;  }	  ++rows;    ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	30	None	replace
500	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  ++rows;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols!=  cols)  {  ++rows;  ++rows;  }	  ++rows;    ++rows;    	compilable	  [FE]  AssertionFailedError  	30	1	replace
501	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++rows;  ++rows;  }  [FE]  AssertionFailedError  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++rows;  ++rows;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  cols)  {  ++rows;  ++rows;  }	  ++rows;    ++rows;    	compilable	  [FE]  AssertionFailedError  	30	1	replace
502	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException( " ");  }  [CE]  no  suitable  constructor  found  for  FunctionEvaluationException(String)  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException( " ");  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  cols)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException( " ");  }	  ++rows;    ++rows;    	non-compiled	[CE]  no  suitable  constructor  found  for  FunctionEvaluationException(String)	30	None	replace
503	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException( " ");  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException( " ");  }	  ++rows;    ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	30	None	replace
504	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  columns);  [CE]  cannot  find  symbol  columns  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  columns);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  columns);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  columns	16	None	replace
505	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  row);  [CE]  cannot  find  symbol  row  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  row);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  row);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  row	16	None	replace
506	[BUG]  [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  columns  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(jF!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  	non-compiled	[CE]  cannot  find  symbol  columns	126	None	add
507	[BUG]  [BUGGY]  cols  =  jF.value(cols,  0,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  0,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  0,  cost);	  cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	14	None	replace
508	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.updateJacobianEvaluator();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.updateJacobianEvaluator();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.updateJacobianEvaluator();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
509	[BUG]  [BUGGY]  ++cols.length;  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols.length;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols.length;	  if(cols    ==    null)    {    ++cols.length;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	90	None	replace
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jF!=  null)  {  ++jacobianEvaluations;  }	  if(jacobian!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
511	[BUG]  [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++jacobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=  null)  {  ++jacobianEvaluations;  }	  if(jacobian!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
512	[BUG]  [BUGGY]  int  rows  =  Math.min(0,  jF.value(cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(0,  jF.value(cols));  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(0,  jF.value(cols));	  ++rows;    int    rows    =    Math.min(rows,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	34	None	replace
513	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  jF.value(cols)-1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(rows,  jF.value(cols)-1);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(rows,  jF.value(cols)-1);	  ++rows;    int    rows    =    Math.min(rows,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	34	None	replace
514	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(field));  [CE]  cannot  find  symbol  field  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(field));  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(field));	  int    cols    =    Math.min(cols.length,    jF.value(point));    	non-compiled	[CE]  cannot  find  symbol  field	58	None	replace
515	[BUG]  [BUGGY]  ++this.resultualsIterations;  [CE]  cannot  find  symbol  resultualsIterations  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.resultualsIterations;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultualsIterations;	  ++this.residualsIterations;    	non-compiled	[CE]  cannot  find  symbol  resultualsIterations	6	None	replace
516	[BUG]  [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.D  [CE]  ')'  expected  [FE]        FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.D  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.D	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	106	None	replace
517	[BUG]  [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats  [CE]  ')'  expected  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH)!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	106	None	replace
518	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  columns);  [CE]  cannot  find  symbol  columns  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  columns);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  columns);	  int    cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  columns	36	None	replace
519	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  1,  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  1,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  1,  DEFAULT_MAX_ITERATIONS);	  int    cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	36	None	replace
520	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  0,  2);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  0,  2);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  0,  2);	  int    cols    =    jF.value(cols,    2);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	38	None	replace
521	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns[0]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns[0]);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns[0]);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols[0]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	137	None	replace
522	[BUG]  [BUGGY]  if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols[0]);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
523	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  jf  =  getMultivariateMatrixFunction();  [CE]  cannot  find  symbol  [FE]        FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MutableMultivariateVectorialFunction  jf  =  getMultivariateMatrixFunction();  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MutableMultivariateVectorialFunction  jf  =  getMultivariateMatrixFunction();	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
524	[BUG]  [BUGGY]  Integer  cols  =  this.jf.getColumns();  [CE]  cannot  find  symbol  jf  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  this.jf.getColumns();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  this.jf.getColumns();	  Integer    cols    =    jf.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jf	134	None	replace
525	[BUG]  [BUGGY]  ++this.residualsWidth;  [CE]  cannot  find  symbol  residualsWidth  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.residualsWidth;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residualsWidth;	  ++this.resultSize;    	non-compiled	[CE]  cannot  find  symbol  residualsWidth	113	None	replace
526	[BUG]  [BUGGY]  ++this.residualsWeight;  [CE]  cannot  find  symbol  residualsWeight  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.residualsWeight;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residualsWeight;	  ++this.resultSize;    	non-compiled	[CE]  cannot  find  symbol  residualsWeight	113	None	replace
527	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jF!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	75	16	replace
528	[BUG]  [BUGGY]  if(jF!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	compilable	  [FE]  FunctionEvaluationException  	75	16	replace
529	[BUG]  [BUGGY]  if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(Point.MISMATCH_SIMPLE,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(Point.MISMATCH_SIMPLE,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows  ==  null)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(Point.MISMATCH_SIMPLE,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  if(cols    ==    null)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
530	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  residuals);  [CE]  no  suitable  method  found  for  min(int,double[][],double[])  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(point),  residuals);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(point),  residuals);	  int    cols    =    Math.min(cols,    jF.value(point));    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[][],double[])	59	None	replace
531	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(function);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(function);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(function);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(point);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
532	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(random);  [CE]  cannot  find  symbol  random  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(random);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(random);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(point);    	non-compiled	[CE]  cannot  find  symbol  random	26	None	replace
533	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(multivariateFunction);  [CE]  cannot  find  symbol  multivariateFunction  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(multivariateFunction);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(multivariateFunction);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(point);    	non-compiled	[CE]  cannot  find  symbol  multivariateFunction	26	None	replace
534	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.update();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.update();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.update();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
535	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateStandardJacobian();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateStandardJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)function.updateStandardJacobian();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
536	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  coefficient);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  coefficient);	  int    cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  cannot  find  symbol  coefficient	35	None	replace
537	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  baseUri,  cost);  [CE]  cannot  find  symbol  baseUri  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  baseUri,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  baseUri,  cost);	  int    cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  cannot  find  symbol  baseUri	35	None	replace
538	[BUG]  [BUGGY]  ++this.residualsWidths;  [CE]  cannot  find  symbol  residualsWidths  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.residualsWidths;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.residualsWidths;	  ++this.residuals;    	non-compiled	[CE]  cannot  find  symbol  residualsWidths	69	None	replace
539	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols,  cost));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols,  jF.value(cols,  cost));  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols,  jF.value(cols,  cost));	  int    cols    =    Math.min(cols,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	57	None	replace
540	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  +  2);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  +  2);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  cols.length  +  2);	  int    cols    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
541	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [CE]  ')'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    jF.value(point);    if(jF.value(rows)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE    	non-compiled	[CE]  ')'  expected	109	None	replace
542	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [CE]  ')'  expected  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  jF.value(point);  if(jF.value(rows)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    jF.value(point);    if(jF.value(rows)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE    	non-compiled	[CE]  ')'  expected	109	None	replace
543	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++cols;  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jF!=  null)  {  ++cols;  ++cols;  }	  ++cols;    ++cols;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	16	replace
544	[BUG]  [BUGGY]  if(jF!=  null)  {  ++cols;  ++cols;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++cols;  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=  null)  {  ++cols;  ++cols;  }	  ++cols;    ++cols;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	16	replace
545	[BUG]  [BUGGY]  if(jF!=  null)  {  ++cols;  ++cols;  }  else  {  throw  new  FunctionEvaluationException( " ");  }  [CE]  no  suitable  constructor  found  for  FunctionEvaluationException(String)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF!=  null)  {  ++cols;  ++cols;  }  else  {  throw  new  FunctionEvaluationException( " ");  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF!=  null)  {  ++cols;  ++cols;  }  else  {  throw  new  FunctionEvaluationException( " ");  }	  ++cols;    ++cols;    	non-compiled	[CE]  no  suitable  constructor  found  for  FunctionEvaluationException(String)	19	None	replace
546	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  ++rows;    ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	30	None	replace
547	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [CE]  incomparable  types:  int  and  <null>  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  ++rows;    ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	30	None	replace
548	[BUG]  [BUGGY]  if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=  null)  {  ++rows;  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  ++rows;    ++rows;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	30	None	replace
549	[BUG]  [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows    >    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(rows  >  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE	  	non-compiled	[CE]  ')'  expected	138	None	add
550	[BUG]  [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    if(jF.value(cols,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS    	non-compiled	[CE]  ')'  expected	108	None	replace
551	[BUG]  [BUGGY]  ++this.value;  [CE]  cannot  find  symbol  value  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.value;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.value;	  ++this.resultSize;    	non-compiled	[CE]  cannot  find  symbol  value	113	None	replace
552	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Local  [CE]  ')'  expected  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Local  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction(i);  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Local	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction(i);    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	81	None	replace
553	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  <  cols.length)  {  ++cols.length;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null  ||  cols.length  <  cols.length)  {  ++cols.length;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null  ||  cols.length  <  cols.length)  {  ++cols.length;  }	  if(cols    ==    null)    {    ++cols.length;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	90	None	replace
554	[BUG]  [BUGGY]  if(cols!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  cols)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols[0]);  }	  if(cols    >    0)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols[0]);    }    	non-compiled	[CE]  array  required,  but  int  found	137	None	replace
555	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateStandardJacobian();  [CE]  '('  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateStandardJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.super.updateStandardJacobian();	  MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)this.super.updateJacobian();    	non-compiled	[CE]  '('  expected	63	None	replace
556	[BUG]  [BUGGY]  ++this.colonIterations;  [CE]  cannot  find  symbol  colonIterations  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++this.colonIterations;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.colonIterations;	  ++this.colonEvaluations;    	non-compiled	[CE]  cannot  find  symbol  colonIterations	70	None	replace
557	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jf.length);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  jf.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jf.length);	  int    cols    =    Math.min(cols.length,    jF.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	73	None	replace
558	[BUG]  [BUGGY]  int  cols  =  Math.cols(jF.cols());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.cols(jF.cols());  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.cols(jF.cols());	  int    cols    =    jF.cols();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
559	[BUG]  [BUGGY]  if(cols!=  null  &&  cols.length  >  0)  {  ++cols;  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null  &&  cols.length  >  0)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null  &&  cols.length  >  0)  {  ++cols;  }	  if(cols!=    null)    {    ++cols;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	49	None	replace
560	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.clone();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.clone();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)jf.clone();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)jf.updateJacobian();    	non-compiled	[CE]  not  a  statement	13	None	replace
561	[BUG]  [BUGGY]  if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  nu  [CE]  ')'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  nu  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  nu	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  ')'  expected	82	None	replace
562	[BUG]  [BUGGY]  if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  [CE]  '('  or  '['  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  '('  or  '['  expected	82	None	replace
563	[BUG]  [BUGGY]  if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null  [CE]  ')'  expected  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  ')'  expected	82	None	replace
564	[BUG]  [BUGGY]  if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  Function  [CE]  '('  or  '['  expected  [FE]                  FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  Function  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(point!=  null)  {  ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  Function	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  '('  or  '['  expected	82	None	replace
565	[BUG]  [BUGGY]  if(jacobianEvaluations!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobianEvaluations!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobianEvaluations!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(jacobianEvaluations    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	124	None	replace
566	[BUG]  [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  	non-compiled	[CE]  ')'  expected	29	None	add
567	[BUG]  [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [CE]  ')'  expected  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS	  	non-compiled	[CE]  ')'  expected	29	None	add
568	[BUG]  [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)  ==  0)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++rows;    ++rows;  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)  ==  0)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;        ++rows;    for(int  i  =  0;  i  <  cols;  ++i)  {  if(jF.value(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE)  ==  0)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  	non-compiled	[CE]  ')'  expected	29	None	add
569	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  <  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(cols  <  cols)  {  ++cols;  }	  if(cols    >    0)    {    ++cols;    }    	compilable	  [FE]  AssertionFailedError  	98	1	replace
570	[BUG]  [BUGGY]  if(cols  <  cols)  {  ++cols;  }  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  <  cols)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  <  cols)  {  ++cols;  }	  if(cols    >    0)    {    ++cols;    }    	compilable	  [FE]  AssertionFailedError  	98	1	replace
571	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.removeVectorialFunction();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.removeVectorialFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)super.removeVectorialFunction();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)super.removeVectorialFunction();    	non-compiled	[CE]  not  a  statement	95	None	replace
572	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Local  [CE]  ')'  expected  [FE]        FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Local  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  jf  =  getMultivariateVectorialFunction();  if(jf!=  null)  {  throw  new  FunctionEvaluationException(point,  Local	  ++rows;    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    jf    =    getMultivariateVectorialFunction();    if(jf!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	80	None	replace
573	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	if(jacobian  ==  null)  {  ++jacobianEvaluations;  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
574	[BUG]  [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobian  ==  null)  {  ++jacobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobian  ==  null)  {  ++jacobianEvaluations;  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
575	[BUG]  [BUGGY]  Integer  cols  =  jf.columnCount();  [CE]  cannot  find  symbol  jf  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jf.columnCount();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jf.columnCount();	  Integer    cols    =    jF.columnCount();    	non-compiled	[CE]  cannot  find  symbol  jf	93	None	replace
576	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.updateMatrix();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.updateMatrix();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.updateMatrix();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
577	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.update();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.update();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)this.function.update();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
578	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols	  if(cols    ==    null    ||    cols.length    <    2)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  ')'  expected	115	None	replace
579	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  jacobian);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  jacobian);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().value(this,  jacobian);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().value(this);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
580	[BUG]  [BUGGY]  cols  =  jF.value(cols,  baseUri,  cost);  [CE]  cannot  find  symbol  baseUri  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  baseUri,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  baseUri,  cost);	  cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  cannot  find  symbol  baseUri	14	None	replace
581	[BUG]  [BUGGY]  cols  =  jF.value(cols,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  coefficient);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  coefficient);	  cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  cannot  find  symbol  coefficient	14	None	replace
582	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().withVisibleMatrixFunction();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().withVisibleMatrixFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().withVisibleMatrixFunction();	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().getVisibleMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
583	[BUG]  [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)this.function.updateJacobian();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)this.function.updateJacobian();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  super  =(MultivariateVectorialFunction)this.function.updateJacobian();	  MultivariateVectorialFunction    super    =(MultivariateVectorialFunction)super.updateJacobian();    	non-compiled	[CE]  not  a  statement	11	None	replace
584	[BUG]  [BUGGY]  int  cols  =  Math.min(jacobian.length,  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(jacobian.length,  cols.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(jacobian.length,  cols.length  -  1);	  int    cols    =    Math.min(cols.length,    jacobian.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	129	None	replace
585	[BUG]  [BUGGY]  int  cols  =  Math.min(jF.value(cols,  jacobian.length  -  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(jF.value(cols,  jacobian.length  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(jF.value(cols,  jacobian.length  -  1);	  int    cols    =    Math.min(cols.length,    jacobian.length    -    1);    	non-compiled	[CE]  ')'  expected	129	None	replace
586	[BUG]  [BUGGY]  if(cols!=  null  &&  cols.length  >  0)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null  &&  cols.length  >  0)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null  &&  cols.length  >  0)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols!=    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    columns);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
587	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++cols;  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null  ||  cols.length  <  2)  {  ++cols;  }	  if(cols    ==    null)    {    ++cols;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	48	None	replace
588	[BUG]  [BUGGY]  int  cols  =  jF.value(point,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(point,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(point,  cost);	  int    cols    =    jF.value(point);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	72	None	replace
589	[BUG]  [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorFunction)this.object();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorFunction)this.object();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorFunction  jf  =(MultivariateVectorFunction)this.object();	  MultivariateVectorFunction    jf    =(MultivariateVectorialFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
590	[BUG]  [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorFunction)this.getObject();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorFunction)this.getObject();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorFunction  jf  =(MultivariateVectorFunction)this.getObject();	  MultivariateVectorFunction    jf    =(MultivariateVectorialFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
591	[BUG]  [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  If(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  ';'  expected  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  If(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(rows!=    cols)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    If(rows!=  cols)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  	non-compiled	[CE]  ';'  expected	142	None	add
592	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  cost);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction(false,  cost);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction(true);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
593	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  null);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction().evaluate(this,  null);	  MultivariateMatrixFunction    jf    =    getMultivariateMatrixFunction().evaluate(this);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
594	[BUG]  [BUGGY]  if(jcobian  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  cannot  find  symbol  jcobian  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jcobian  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jcobian  ==  null)  {  ++jcobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols    ==    null)    {    ++jcobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  jcobian	24	None	replace
595	[BUG]  [BUGGY]  if(jcobian  ==  null)  {  ++jcobianEvaluations;  }  [CE]  cannot  find  symbol  jcobian  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jcobian  ==  null)  {  ++jcobianEvaluations;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jcobian  ==  null)  {  ++jcobianEvaluations;  }	  if(cols    ==    null)    {    ++jcobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  jcobian	24	None	replace
596	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  2  -  1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  2  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  2  -  1);	  int    cols    =    jF.value(cols,    2);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	38	None	replace
597	[BUG]  [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols    >    0)    {    ++rows;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    if(cols  >  0)  {  ++rows;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE	  	non-compiled	[CE]  ')'  expected	140	None	add
598	[BUG]  [BUGGY]  if(cols!=  null  &&  cols.length  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols!=  null  &&  cols.length  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null  &&  cols.length  >  0)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    null)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	44	None	replace
599	[BUG]  [BUGGY]  if(jacobianEvaluations  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobianEvaluations  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobianEvaluations  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    columns);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	104	None	replace
600	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null  ||  cols.length  <  2)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    columns);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	104	None	replace
601	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null  ||  cols.length  <  2)  {  ++cols;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols    ==    null)    {    ++cols;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	43	None	replace
602	[BUG]  [BUGGY]  cols  =  jF.value(cols,  2  -  1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  2  -  1);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  2  -  1);	  cols    =    jF.value(cols,    2);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	114	None	replace
603	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  column);  [CE]  cannot  find  symbol  column  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  column);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  column);	  int    cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  column	36	None	replace
604	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  rows);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  rows);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  rows);	  int    cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	36	None	replace
605	[BUG]  [BUGGY]  int  cols  =  Math.min(jacobian.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(jacobian.length,  cols.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(jacobian.length,  cols.length);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
606	[BUG]  [BUGGY]  cols  =  jF.value(colons,  cost);  [CE]  cannot  find  symbol  colons  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(colons,  cost);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(colons,  cost);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  cannot  find  symbol  colons	15	None	replace
607	[BUG]  [BUGGY]  cols  =  jF.value(row,  cols);  [CE]  cannot  find  symbol  row  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(row,  cols);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(row,  cols);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  cannot  find  symbol  row	15	None	replace
608	[BUG]  [BUGGY]  ++jcobianEvaluations;  [CE]  cannot  find  symbol  jcobianEvaluations  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++jcobianEvaluations;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++jcobianEvaluations;	  if(cols!=    null)    {    ++jcobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  jcobianEvaluations	54	None	replace
609	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getVectorianFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getVectorianFunction();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.getVectorianFunction();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
610	[BUG]  [BUGGY]  ++cols;    ++cols;  int  cols  =  Math.min(cols,  jF.value(cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  int  cols  =  Math.min(cols,  jF.value(cols));  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    int  cols  =  Math.min(cols,  jF.value(cols));	  	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	18	None	add
611	[BUG]  [BUGGY]  ++cols;    ++cols;  int  cols  =  Math.min(cols,  jF.length());  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++cols;    ++cols;  int  cols  =  Math.min(cols,  jF.length());  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;        ++cols;    int  cols  =  Math.min(cols,  jF.length());	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
612	[BUG]  [BUGGY]  Integer  cols  =(this.jF!=  null)?  this.jF.getColumns()  :  Collections.EMPTY_LIST;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =(this.jF!=  null)?  this.jF.getColumns()  :  Collections.EMPTY_LIST;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =(this.jF!=  null)?  this.jF.getColumns()  :  Collections.EMPTY_LIST;	  Integer    cols    =    this.jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
613	[BUG]  [BUGGY]  int  cols  =  Math.max(cols.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.max(cols.length,  cols.length);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.max(cols.length,  cols.length);	  ++cols;    int    cols    =    Math.max(cols.length,    cols);    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
614	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.value(point),  jacobian.length);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  jF.value(point),  jacobian.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jF.value(point),  jacobian.length);	  int    cols    =    Math.min(cols.length,    jF.value(point));    	non-compiled	[CE]  int  cannot  be  dereferenced	58	None	replace
615	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length  -  2);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length  -  2);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  jF.length  -  2);	  int    cols    =    Math.min(cols.length,    jF.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	102	None	replace
616	[BUG]  [BUGGY]  if(bracobianEvaluations!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  cannot  find  symbol  bracobianEvaluations  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(bracobianEvaluations!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(bracobianEvaluations!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	  if(cols!=    null)    {    ++bracobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  bracobianEvaluations	128	None	replace
617	[BUG]  [BUGGY]  ++bracobianEvaluations;  [CE]  cannot  find  symbol  bracobianEvaluations  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  ++bracobianEvaluations;  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++bracobianEvaluations;	  if(cols!=    null)    {    ++bracobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  bracobianEvaluations	128	None	replace
618	[BUG]  [BUGGY]  if(bracobianEvaluations!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [CE]  cannot  find  symbol  bracobianEvaluations  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(bracobianEvaluations!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(bracobianEvaluations!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  columns);  }	  if(cols!=    null)    {    ++bracobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  bracobianEvaluations	128	None	replace
619	[BUG]  [BUGGY]  if(bracobianEvaluations!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  cannot  find  symbol  bracobianEvaluations  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(bracobianEvaluations!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(bracobianEvaluations!=  null)  {  ++bracobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	  if(cols!=    null)    {    ++bracobianEvaluations;    }    else    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    }    	non-compiled	[CE]  cannot  find  symbol  bracobianEvaluations	128	None	replace
620	[BUG]  [BUGGY]  cols  =  jF.value(cols,  null,  residuals);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  null,  residuals);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  null,  residuals);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	17	None	replace
621	[BUG]  [BUGGY]  cols  =  jF.value(cols,  null,  null);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  null,  null);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  null,  null);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	17	None	replace
622	[BUG]  [BUGGY]  int  cols  =  jF.value(cols,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  jF.value(cols,  residualsWeights);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  jF.value(cols,  residualsWeights);	  ++cols;    int    cols    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	21	None	replace
623	[BUG]  [BUGGY]  if(jacobianEvaluations  ==  null)  {  ++cols;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  if(jacobianEvaluations  ==  null)  {  ++cols;  }  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(jacobianEvaluations  ==  null)  {  ++cols;  }	  if(cols    ==    null)    {    ++jacobianEvaluations;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	25	None	replace
624	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  rows.length  -  1,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  cols  =  Math.min(cols.length,  rows.length  -  1,  cols.length);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  cols  =  Math.min(cols.length,  rows.length  -  1,  cols.length);	  int    cols    =    Math.min(cols.length,    cols.length    -    1,    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	60	None	replace
625	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  column);  [CE]  cannot  find  symbol  column  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  column);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  column);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  column	16	None	replace
626	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  COMMA);  [CE]  cannot  find  symbol  COMMA  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  COMMA);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  COMMA);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  COMMA	16	None	replace
627	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  jF.value(cols),  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  int  rows  =  Math.min(rows,  jF.value(cols),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	int  rows  =  Math.min(rows,  jF.value(cols),  DEFAULT_MAX_ITERATIONS);	  ++rows;    int    rows    =    Math.min(rows,    jF.value(cols));    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	34	None	replace
628	[BUG]  [BUGGY]  Integer  cols  =  jF.value(rows);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  Integer  cols  =  jF.value(rows);  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	Integer  cols  =  jF.value(rows);	  Integer    cols    =    jF.value(columns);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	92	None	replace
629	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getImplicitValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getImplicitValue();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getImplicitValue();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)getValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
630	[BUG]  [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorialFunction)this.object;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorFunction  jf  =(MultivariateVectorialFunction)this.object;  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorFunction  jf  =(MultivariateVectorialFunction)this.object;	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)this.object;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
631	[BUG]  [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.update();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {      [BUGGY]  MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.update();  [BUGGY]      ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)function.update();	  MultivariateVectorialFunction    jf    =(MultivariateVectorialFunction)function.updateJacobian();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
