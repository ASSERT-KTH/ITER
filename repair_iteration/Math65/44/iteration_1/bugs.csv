bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  cols  =  Math.min(cols.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    int  cols  =  Math.min(cols.length,  cols.length);  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    int  cols  =  Math.min(cols.length,  cols.length);		non-compiled	[CE]  int  cannot  be  dereferenced	88	None	add
2	[BUG]  [BUGGY]    cols  =  jF.value(cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    cols  =  jF.value(cols);  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    cols  =  jF.value(cols);		non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	88	None	add
3	[BUG]  [BUGGY]    int  cols  =  Math.min(cols.length,  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    int  cols  =  Math.min(cols.length,  cols.length  -  1);  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    int  cols  =  Math.min(cols.length,  cols.length  -  1);		non-compiled	[CE]  int  cannot  be  dereferenced	88	None	add
4	[BUG]  [BUGGY]    int  cols  =  jF.size();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    int  cols  =  jF.size();  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    int  cols  =  jF.size();		non-compiled	[CE]  cannot  find  symbol	88	None	add
5	[BUG]  [BUGGY]    int  cols  =  jF.value(cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    int  cols  =  jF.value(cols);  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    int  cols  =  jF.value(cols);		non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	88	None	add
6	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]  ++rows;  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++rows;	++jacobianEvaluations;  	compilable	  [FE]  FunctionEvaluationException  	87	16	replace
7	[BUG]  [BUGGY]  ++rows;  [FE]  FunctionEvaluationException  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]  ++rows;  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++rows;	++jacobianEvaluations;  	compilable	  [FE]  FunctionEvaluationException  	87	16	replace
8	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]  if(cols  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	++jacobianEvaluations;  	non-compiled	[CE]  incomparable  types:  int  and  <null>	87	None	replace
9	[BUG]  [BUGGY]  if(cols!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]  if(cols!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols!=  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  }	++jacobianEvaluations;  	non-compiled	[CE]  incomparable  types:  int  and  <null>	87	None	replace
10	[BUG]  [BUGGY]  if(cols  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]  if(cols  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	if(cols  ==  null)  {  ++jacobianEvaluations;  }  else  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  }	++jacobianEvaluations;  	non-compiled	[CE]  incomparable  types:  int  and  <null>	87	None	replace
11	[BUG]  [BUGGY]    MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.updateJacobian();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.updateJacobian();  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.updateJacobian();		non-compiled	[CE]  cannot  find  symbol	88	None	add
12	[BUG]  [BUGGY]    MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)super.updateJacobian();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)super.updateJacobian();  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)super.updateJacobian();		non-compiled	[CE]  cannot  find  symbol	88	None	add
13	[BUG]  [BUGGY]    MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.getVectorialFunction();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.getVectorialFunction();  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)super.getVectorialFunction();		non-compiled	[CE]  cannot  find  symbol	88	None	add
14	[BUG]  [BUGGY]    MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction();  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    MultivariateMatrixFunction  jf  =  getMultivariateMatrixFunction();		non-compiled	[CE]  cannot  find  symbol	88	None	add
15	[BUG]  [BUGGY]    MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getObject();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getObject();  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    MultivariateVectorialFunction  jf  =(MultivariateVectorialFunction)getObject();		non-compiled	[CE]  cannot  find  symbol	88	None	add
16	[BUG]  [BUGGY]  ++this.resultEvaluations;  [CE]  cannot  find  symbol  resultEvaluations  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]  ++this.resultEvaluations;  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultEvaluations;	++jacobianEvaluations;  	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	87	None	replace
17	[BUG]  [BUGGY]  ++this.resultIterations;  [CE]  cannot  find  symbol  resultIterations  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]  ++this.resultIterations;  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.resultIterations;	++jacobianEvaluations;  	non-compiled	[CE]  cannot  find  symbol  resultIterations	87	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]  ++cols;  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	++cols;	++jacobianEvaluations;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	16	replace
19	[BUG]  [BUGGY]  ++cols;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]  ++cols;  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++cols;	++jacobianEvaluations;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	16	replace
20	[BUG]  [BUGGY]    Integer  cols  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    Integer  cols  =  jF.getColumns();  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    Integer  cols  =  jF.getColumns();		non-compiled	[CE]  cannot  find  symbol	88	None	add
21	[BUG]  [BUGGY]    Integer  cols  =  jF.getColumnCount();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    Integer  cols  =  jF.getColumnCount();  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    Integer  cols  =  jF.getColumnCount();		non-compiled	[CE]  cannot  find  symbol	88	None	add
22	[BUG]  [BUGGY]    int  cols  =  Math.min(cols.length,  jF.value(cols));  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]    int  cols  =  Math.min(cols.length,  jF.value(cols));  [BUGGY]  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	    int  cols  =  Math.min(cols.length,  jF.value(cols));		non-compiled	[CE]  int  cannot  be  dereferenced	88	None	add
23	[BUG]  [BUGGY]  ++this.cobianEvaluations;  [CE]  cannot  find  symbol  cobianEvaluations  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  [BUGGY]  ++this.cobianEvaluations;  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	++this.cobianEvaluations;	++jacobianEvaluations;  	non-compiled	[CE]  cannot  find  symbol  cobianEvaluations	87	None	replace
