bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
2	[BUG]  [BUGGY]    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
3	[BUG]  [BUGGY]    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
4	[BUG]  [BUGGY]    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
5	[BUG]  [BUGGY]    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar.length  >  0)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  covar.length;  ++i)  {	for  (int  i  =  0;  i  <  errors.length;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	19	1	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {	for  (int  i  =  0;  i  <  errors.length;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	19	1	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {	for  (int  i  =  0;  i  <  errors.length;  ++i)  {  	non-compiled	[CE]  int  cannot  be  dereferenced	19	None	replace
9	[BUG]  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
10	[BUG]  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
11	[BUG]  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
12	[BUG]  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
13	[BUG]  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  cols;  ++i)  {	for  (int  i  =  0;  i  <  errors.length;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	19	1	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {	for  (int  i  =  0;  i  <  errors.length;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	19	1	replace
16	[BUG]  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
17	[BUG]  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
18	[BUG]  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  [BUGGY]    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	    if(covar!=  null)  {  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
