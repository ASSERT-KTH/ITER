bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    cols;    ++i)    {    for(int  i  =  0;  i  <  cols;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    cols;    ++i)    {    For(int  i  =  0;  i  <  cols;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	14	None	add
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    cols;    ++i)    {    int  i  =  0;  i  <  cols;  ++i)  {	  	non-compiled	[CE]  >  expected	14	None	add
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    cols;    ++i)    {    int  cols  =  0;  i  <  cols;  ++i)  {	  	non-compiled	[CE]  >  expected	14	None	add
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covars.length;  ++i)  {  [CE]  cannot  find  symbol  covars  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covars.length;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covars.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  covars	8	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length  +  1;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols.length  +  1;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
7	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c);	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  *  c);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[0][i]  *  c);	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i]);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
18	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  covar.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  covar.length;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int  i  =  0;  i  <  covar.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  For(int  i  =  0;  i  <  covar.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  For(int  i  =  0;  i  <  covar.length;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length;    ++i)    {    For(int  i  =  0;  i  <  covar.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  int  i  =  0;  i  <  covar.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  int  i  =  0;  i  <  covar.length;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length;    ++i)    {    int  i  =  0;  i  <  covar.length;  ++i)  {	  	non-compiled	[CE]  >  expected	6	None	add
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  covar[.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  covar[.length;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int  i  =  0;  i  <  covar[.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  errors[0][i]  =  Math.sqrt(covar[0][i]  *  c);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[0][i]  =  Math.sqrt(covar[0][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0][i]  =  Math.sqrt(covar[0][i]  *  c);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
38	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  cols  =  getChiSquare();  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  cols  =  getChiSquare();  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    cols;    ++i)    {    int  cols  =  getChiSquare();  for(int  i  =  0;  i  <  cols;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    cols;    ++i)    {    for(int  i  =  0;  i  <  cols;  ++i)  {  }  errors[i]  =  Math.sqrt(covar[i][i])  *  c;	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
42	[BUG]  [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][0]  =  Math.sqrt(covar[i][0]  *  c);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i]  *  c);	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length;    ++i)    {    c  =  Math.sqrt(covar[i][i]);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length;    ++i)    {    c  =  Math.sqrt(covar[0][i]);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
48	[BUG]  [BUGGY]  if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  array  required,  but  double  found  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  array  required,  but  double  found	10	None	replace
49	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][i]  *  c);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
50	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  cols);  ++i)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  cols);  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    cols;    ++i)    {    for(int  i  =  0;  i  <  cols);  ++i)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    cols;    ++i)    {    for(int  i  =  0;  i  <  cols;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  1;  i  <  covar.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
54	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  1;  i  <  covar.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
55	[BUG]  [BUGGY]  cols[0]  =  Math.sqrt(covar[0][0]  *  c);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  cols[0]  =  Math.sqrt(covar[0][0]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[0]  =  Math.sqrt(covar[0][0]  *  c);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
56	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c);	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  covar.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  covar.length;  ++i)  {  }  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int  i  =  0;  i  <  covar.length;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  Covar.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  Covar.length;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int  i  =  0;  i  <  Covar.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
59	[BUG]  [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
60	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[i][i]  *  c);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
61	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[0][i]  *  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  cols  =  Math.sqrt(covar[0][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[0][i]  *  c);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
62	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i]);	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][i]);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
65	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i])*  c;	      if(covar!=    null)    {    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
66	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  *  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][i]  *  c);	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][0]  *  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  errors[0]  =  Math.sqrt(covar[1][0]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][0]  *  c);	      if(covar.length    >    0)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  }  [CE]  array  required,  but  double  found  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  }  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	if(covar!=  null)  {  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  }	      if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  array  required,  but  double  found	16	None	replace
69	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i]  *  c);	      if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  [CE]  cannot  find  symbol  columns  [FE]    AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  columns	15	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  c;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();    [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  c;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
