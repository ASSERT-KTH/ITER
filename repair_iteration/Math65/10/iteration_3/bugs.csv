bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  *  c,  cost);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  *  c,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][i]  *  c,  cost);	  errors[0]    =    Math.sqrt(covar[1][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
2	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  /  c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][i]  /  c);	  errors[0]    =    Math.sqrt(covar[1][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
3	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][i]  *  c,  errorCount);	  errors[0]    =    Math.sqrt(covar[1][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    For(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	28	None	add
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    int  i  =  0;  i  <  covar.length  -  1;  ++i)  {	  	non-compiled	[CE]  >  expected	28	None	add
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  covar[.length  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  covar[.length  -  1;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  covar[.length  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
8	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);	  cols[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
9	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);	  cols[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
10	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  cols[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
11	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  *  c,  cost);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  *  c,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[0][i]  *  c,  cost);	  errors[0]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[0][i]  *  c,  errorCount);	  errors[0]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  /  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[0][i]  /  c);	  errors[0]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][0]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][0]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][0]);	  cols[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
15	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][c]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][c]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][c]);	  cols[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
16	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][0],  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][0],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][0],  c);	  cols[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
17	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][0],  covar[i]);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][0],  covar[i]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][0],  covar[i]);	  cols[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  for(int  i  =  1;  i  <  covar.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  for(int  i  =  1;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    1;    i    <    covar.length;    ++i)    {    for(int  i  =  1;  i  <  covar.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
19	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  For(int  i  =  1;  i  <  covar.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  For(int  i  =  1;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    1;    i    <    covar.length;    ++i)    {    For(int  i  =  1;  i  <  covar.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	53	None	add
20	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  int  i  =  1;  i  <  covar.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  int  i  =  1;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    1;    i    <    covar.length;    ++i)    {    int  i  =  1;  i  <  covar.length;  ++i)  {	  	non-compiled	[CE]  >  expected	53	None	add
21	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  for(int  i  =  2;  i  <  covar.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  for(int  i  =  2;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    1;    i    <    covar.length;    ++i)    {    for(int  i  =  2;  i  <  covar.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar[i].length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  covar[i].length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int    i    =    0;    i    <    covar[.length;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar[i].length;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar[i].length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar[i].length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int    i    =    0;    i    <    covar[.length;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar[cols.length;  ++i)  {  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar[cols.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar[cols.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int    i    =    0;    i    <    covar[.length;    ++i)    {    	non-compiled	[CE]  ']'  expected	24	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]);	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    c    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  int  cannot  be  dereferenced	45	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]  *  jTj);	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    c    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	45	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length();  ++i)  {  c  =  Math.sqrt(covar[i][i]);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length();  ++i)  {  c  =  Math.sqrt(covar[i][i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length();  ++i)  {  c  =  Math.sqrt(covar[i][i]);	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    c    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  c;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  1;  i  <  c;  ++i)  {	  for(int    i    =    0;    i    <    c;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
29	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  c;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  c;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  1;  i  <  c;  ++i)  {	  for(int    i    =    0;    i    <    c;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c.length;  ++i)  {  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  c.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  c.length;  ++i)  {	  for(int    i    =    0;    i    <    c;    ++i)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	72	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  }	  if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i])*    c;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
32	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  For(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	For(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i])*  c;  }	  if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i])*    c;    }    	non-compiled	[CE]  '.class'  expected	68	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  1;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    c    =    Math.sqrt(covar[0][i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	46	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    c    =    Math.sqrt(covar[0][i]);    	non-compiled	[CE]  int  cannot  be  dereferenced	46	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[1][i]);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[1][i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[1][i]);	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    c    =    Math.sqrt(covar[0][i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	46	None	replace
36	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i].doubleValue());    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i].doubleValue());    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i].doubleValue());    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length  -  1;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length  -  1;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length  -  1;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    for(int  i  =  0;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  For(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  For(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    For(int  i  =  0;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	38	None	add
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  0;  i  <  rows;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    int  i  =  0;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  >  expected	38	None	add
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    for(int  i  =  0;  i  <  columns;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  rows);  ++i)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  rows);  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    for(int  i  =  0;  i  <  rows);  ++i)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
46	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue());	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i].doubleValue());    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i].doubleValue());    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
48	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i].doubleValue());    }    	non-compiled	[CE]  >  expected	47	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
51	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][0]  *  c,  cost);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[1][0]  *  c,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][0]  *  c,  cost);	  errors[0]    =    Math.sqrt(covar[1][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
52	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][0]  /  c);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[1][0]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][0]  /  c);	  errors[0]    =    Math.sqrt(covar[1][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
53	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][0]  *  c,  cols);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[1][0]  *  c,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][0]  *  c,  cols);	  errors[0]    =    Math.sqrt(covar[1][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	3	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	3	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	3	None	replace
57	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i])*  c  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i])*  c  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i])*  c  +  1;	  errors[i][i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
58	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i])*  c  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i])*  c  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i])*  c  +  2;	  errors[i][i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
59	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i])*  c,  cost;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i])*  c,  cost;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i])*  c,  cost;	  errors[i][i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  ';'  expected	65	None	replace
60	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][0]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][0]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][0]);	  cols[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
61	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][c]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][c]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][c]);	  cols[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
62	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][0],  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][0],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][0],  c);	  cols[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
63	[BUG]  [BUGGY]  cols[i][0]  =  Math.sqrt(covar[i][0]);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][0]  =  Math.sqrt(covar[i][0]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][0]  =  Math.sqrt(covar[i][0]);	  cols[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  3;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  covar.length  -  3;  ++i)  {	  for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  3;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  3;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length  -  3;  ++i)  {	  for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length();  ++i)  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length();  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length();  ++i)  {	  for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
67	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
69	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][0]);	  errors[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
70	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][c]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][c]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][c]);	  errors[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
71	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0],  c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][0],  c);	  errors[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
72	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0],  covar[i]);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0],  covar[i]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][0],  covar[i]);	  errors[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
77	[BUG]  [BUGGY]  int  cols  =  getChiSquare();  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  cols  =  getChiSquare();  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  cols  =  getChiSquare();  for(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    cols    =    getChiSquare();    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  possible  loss  of  precision	40	None	replace
78	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  /  c);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  /  c);	  cols[i]    =    Math.sqrt(covar[i][i].doubleValue()    *    c);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
79	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c,  errorCount);	  cols[i]    =    Math.sqrt(covar[i][i].doubleValue()    *    c);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
80	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c,  cost);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c,  cost);	  cols[i]    =    Math.sqrt(covar[i][i].doubleValue()    *    c);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
81	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][0]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][0]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][0]);	  errors[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
82	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][c]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][c]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][c]);	  errors[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
83	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][0],  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][0],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][0],  c);	  errors[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
84	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][jTj]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][jTj]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][jTj]);	  errors[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
85	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  covar.length;  ++i)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  For(int  i  =  0;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	For(int  i  =  0;  i  <  covar.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int    i    =    0;    i    <    covar.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	21	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  covar.length;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  covar.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    For(int    i    =    0;    i    <    covar.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	22	None	replace
87	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  covar.length;  ++i)  {  }  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  For(int  i  =  0;  i  <  covar.length;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	For(int  i  =  0;  i  <  covar.length;  ++i)  {  }	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int    i    =    0;    i    <    covar.length;    ++i)    {    }    	non-compiled	[CE]  '.class'  expected	57	None	replace
88	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	For(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    For(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	2	None	replace
89	[BUG]  [BUGGY]  cols[0]  =  Math.sqrt(covar[0][0]  /  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[0]  =  Math.sqrt(covar[0][0]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[0]  =  Math.sqrt(covar[0][0]  /  c);	  cols[0]    =    Math.sqrt(covar[0][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
90	[BUG]  [BUGGY]  cols[0]  =  Math.sqrt(covar[0][0]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[0]  =  Math.sqrt(covar[0][0]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[0]  =  Math.sqrt(covar[0][0]  *  c,  errorCount);	  cols[0]    =    Math.sqrt(covar[0][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
91	[BUG]  [BUGGY]  cols[0]  =  Math.sqrt(covar[1][0]  *  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[0]  =  Math.sqrt(covar[1][0]  *  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[0]  =  Math.sqrt(covar[1][0]  *  c);	  cols[0]    =    Math.sqrt(covar[0][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])*  c;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])*  c;  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])*  c;  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    errors[i]    =    Math.sqrt(covar[i][i])    *    c;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
93	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  c;	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    errors[i]    =    Math.sqrt(covar[i][i])    *    c;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
94	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[i][i]  *  c,  errorCount);	  cols    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
95	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  c,  errors);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  c,  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[i][i]  *  c,  errors);	  cols    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
96	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  c,  errors.length);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  c,  errors.length);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[i][i]  *  c,  errors.length);	  cols    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
97	[BUG]  [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  c,  cost);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  c,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][0]  =  Math.sqrt(covar[i][0]  *  c,  cost);	  errors[i][0]    =    Math.sqrt(covar[i][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
98	[BUG]  [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  /  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][0]  =  Math.sqrt(covar[i][0]  /  c);	  errors[i][0]    =    Math.sqrt(covar[i][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
99	[BUG]  [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][0]  =  Math.sqrt(covar[i][0]  *  c,  errorCount);	  errors[i][0]    =    Math.sqrt(covar[i][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
100	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);	  mistakes[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
101	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);	  mistakes[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
102	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c,  cost);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i]  *  c,  cost);	  mistakes[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
103	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[0][i]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[0][i]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[0][i]  *  c,  errorCount);	  cols    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
104	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[0][i]  /  c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[0][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[0][i]  /  c);	  cols    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
105	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[0][i]  *  c,  errors[i]);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[0][i]  *  c,  errors[i]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[0][i]  *  c,  errors[i]);	  cols    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
106	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[0][i]  *  c,  errors);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[0][i]  *  c,  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[0][i]  *  c,  errors);	  cols    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  covar.length  -  2;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  1;  i  <  covar.length  -  2;  ++i)  {	  for(int    i    =    1;    i    <    covar.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
108	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  covar.length  -  2;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  covar.length  -  2;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  1;  i  <  covar.length  -  2;  ++i)  {	  for(int    i    =    1;    i    <    covar.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  2;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  2;  i  <  covar.length;  ++i)  {	  for(int    i    =    1;    i    <    covar.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
110	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  covar.length;  ++i)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  2;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  2;  i  <  covar.length;  ++i)  {	  for(int    i    =    1;    i    <    covar.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  }	  if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
112	[BUG]  [BUGGY]  errors[0][i]  =  Math.sqrt(covar[0][i]  *  c,  cost);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0][i]  =  Math.sqrt(covar[0][i]  *  c,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0][i]  =  Math.sqrt(covar[0][i]  *  c,  cost);	  errors[0][i]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
113	[BUG]  [BUGGY]  errors[0][i]  =  Math.sqrt(covar[0][i]  /  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0][i]  =  Math.sqrt(covar[0][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0][i]  =  Math.sqrt(covar[0][i]  /  c);	  errors[0][i]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
114	[BUG]  [BUGGY]  errors[0][i]  =  Math.sqrt(covar[1][i]  *  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0][i]  =  Math.sqrt(covar[1][i]  *  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0][i]  =  Math.sqrt(covar[1][i]  *  c);	  errors[0][i]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    2;    ++i)    {    for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  For(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  For(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    2;    ++i)    {    For(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	30	None	add
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    2;    ++i)    {    int  i  =  0;  i  <  covar.length  -  2;  ++i)  {	  	non-compiled	[CE]  >  expected	30	None	add
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  covar[.length  -  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  covar[.length  -  2;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    2;    ++i)    {    for(int  i  =  0;  i  <  covar[.length  -  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  /  2;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  covar.length  /  2;  ++i)  {	  for(int    i    =    0;    i    <    covar.length    -    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  /  2;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  /  2;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length  /  2;  ++i)  {	  for(int    i    =    0;    i    <    covar.length    -    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
122	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  cost);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  cost);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
123	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	39	None	replace
125	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  1;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	replace
126	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  1;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  for(int  i  =  0;  i  <  c;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  for(int  i  =  0;  i  <  c;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    c;    ++i)    {    for(int  i  =  0;  i  <  c;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  For(int  i  =  0;  i  <  c;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  For(int  i  =  0;  i  <  c;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    c;    ++i)    {    For(int  i  =  0;  i  <  c;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	71	None	add
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  int  i  =  0;  i  <  c;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  int  i  =  0;  i  <  c;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    c;    ++i)    {    int  i  =  0;  i  <  c;  ++i)  {	  	non-compiled	[CE]  >  expected	71	None	add
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  int  c  =  0;  i  <  c;  ++i)  {  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  int  c  =  0;  i  <  c;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    c;    ++i)    {    int  c  =  0;  i  <  c;  ++i)  {	  	non-compiled	[CE]  >  expected	71	None	add
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  int  i  =  0;  i  <  covar.length;  ++i)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  int  i  =  0;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  int  i  =  0;  i  <  covar.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    int    i    =    0;    i    <    covar.length;    ++i)    {    	non-compiled	[CE]  >  expected	23	None	replace
133	[BUG]  [BUGGY]  int  i  =  0;  i  <  covar.length;  ++i)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  covar.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    int    i    =    0;    i    <    covar.length;    ++i)    {    	non-compiled	[CE]  >  expected	23	None	replace
134	[BUG]  [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c,  cost);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c,  cost);	  mistakes[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
135	[BUG]  [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);	  mistakes[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
136	[BUG]  [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);	  mistakes[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
137	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  cost);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
138	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
139	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  /  jTj);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  /  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  /  jTj);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
140	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
141	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
142	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  +  1;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  covar.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    cols.length    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  +  1;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  +  1;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    cols.length    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length  +  2;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length  +  2;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    cols.length    +    1;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	6	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length  +  3;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length  +  3;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length  +  3;  ++i)  {	  for(int    i    =    0;    i    <    cols.length    +    1;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	6	None	replace
146	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);	  cols[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
147	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);	  cols[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
148	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);	  cols[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    cols    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	4	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    cols    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	4	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length  -  1;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length  -  1;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length  -  1;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
152	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i],  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i],  c);	  cols[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
153	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[0][i]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[0][i]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[0][i]);	  cols[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  JTj);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  JTj);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  JTj);  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
155	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  *  jTj);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  *  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][i]  *  jTj);	  errors[0]    =    Math.sqrt(covar[1][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
156	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][i]  *  c  +  1);	  errors[0]    =    Math.sqrt(covar[1][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
157	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  *  jTj);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  *  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[0][i]  *  jTj);	  errors[0]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
158	[BUG]  [BUGGY]  int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  }	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i].doubleValue());    }    	non-compiled	[CE]  >  expected	63	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [CE]  variable  i  is  already  defined  in  method  guessParametersErrors()  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  guessParametersErrors()	52	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  cannot  find  symbol  columns	52	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [CE]  variable  i  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  guessParametersErrors()	52	None	replace
162	[BUG]  [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i][i]  =  Math.sqrt(covar[i][i]  /  c);	  mistakes[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
163	[BUG]  [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);	  mistakes[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
164	[BUG]  [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i][i]  =  Math.sqrt(covar[i][i]  *  c  +  1);	  mistakes[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  covar.length;  ++i)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  covar.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    int    i    =    0;    i    <    covar.length;    ++i)    {    	non-compiled	[CE]  >  expected	23	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  c;  ++i)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  c;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  c;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	3	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  COVARIABLES.length;  ++i)  {  [CE]  cannot  find  symbol  COVARIABLES  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  COVARIABLES.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  COVARIABLES.length;  ++i)  {	  for(int    i    =    0;    i    <    c;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  COVARIABLES	72	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  COVARS.length;  ++i)  {  [CE]  cannot  find  symbol  COVARS  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  COVARS.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  COVARS.length;  ++i)  {	  for(int    i    =    0;    i    <    c;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  COVARS	72	None	replace
169	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][0]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[1][0]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][0]  *  c  +  1);	  errors[0]    =    Math.sqrt(covar[1][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  for(int  i  =  1;  i  <  covar[.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  for(int  i  =  1;  i  <  covar[.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    1;    i    <    covar.length;    ++i)    {    for(int  i  =  1;  i  <  covar[.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
171	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    1;    i    <    covar.length;    ++i)    {    c  =  Math.sqrt(covar[i][i]);	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
172	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  >  expected	15	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj  +  1);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj  +  1);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
174	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  cols;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  >  expected	37	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  covar.length  -  1;  --i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  covar.length  -  1;  --i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  covar.length  -  1;  --i)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  double  c  =  Math.sqrt(covar[i][i]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  double  c  =  Math.sqrt(covar[i][i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    double  c  =  Math.sqrt(covar[i][i]);	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
177	[BUG]  [BUGGY]  cols[0]  =  Math.sqrt(covar[0][1]  *  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[0]  =  Math.sqrt(covar[0][1]  *  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[0]  =  Math.sqrt(covar[0][1]  *  c);	  cols[0]    =    Math.sqrt(covar[0][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    For(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	2	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    For(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	2	None	replace
180	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue());  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i].doubleValue());    }    	non-compiled	[CE]  >  expected	44	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue()  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue()  +  1);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i].doubleValue()  +  1);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i].doubleValue());    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  covar.length;  ++i)  {  }  [CE]  variable  i  is  already  defined  in  method  guessParametersErrors()  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  covar.length;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  i  =  0;  i  <  covar.length;  ++i)  {  }	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int    i    =    0;    i    <    covar.length;    ++i)    {    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  guessParametersErrors()	57	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  cols;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  cols;  i  <  covar.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int    i    =    0;    i    <    covar.length;    ++i)    {    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
184	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  covar.length;  ++i)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  cols;  i  <  covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  cols;  i  <  covar.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int    i    =    0;    i    <    covar.length;    ++i)    {    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Covar.length;  ++i)  {  [CE]  cannot  find  symbol  Covar  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  Covar.length;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  Covar.length;  ++i)  {	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int    i    =    0;    i    <    Covar.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  Covar	58	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
187	[BUG]  [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][0]  =  Math.sqrt(covar[i][0]);	  errors[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
188	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i],  c);	  errors[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
189	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  c  *  jTj);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  c  *  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i],  c  *  jTj);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
190	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[0][i]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][i]  =  Math.sqrt(covar[0][i]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[0][i]);	  cols[i][i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
191	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
192	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])*  c;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])*  c;  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])*  c;  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    errors[i]    =    Math.sqrt(covar[i][i])    *    c;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
194	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  /  c);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
195	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  c  +  1);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]);  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]);  }	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    c    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i].doubleValue());  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i].doubleValue());  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i].doubleValue());	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    c    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	45	None	replace
199	[BUG]  [BUGGY]  int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  >  expected	34	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
201	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c);	  errors[i]    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
202	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  >  expected	19	None	replace
203	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i]  /  c);	  cols[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
204	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);	  cols[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
205	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[i][i]  /  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[i][i]  /  c);	  cols    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
206	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[i][i]  *  jTj);	  cols    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
207	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);	  mistakes[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
208	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  mistakes[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
209	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);	  mistakes[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
210	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  >  expected	14	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
212	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[0][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[0][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[0][i]  *  c  +  1);	  cols    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
213	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[1][i]  *  c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[1][i]  *  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[1][i]  *  c);	  cols    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  double  c  =  Math.sqrt(covar[0][i]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  double  c  =  Math.sqrt(covar[0][i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    c;    ++i)    {    double  c  =  Math.sqrt(covar[0][i]);	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
215	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  >  expected	10	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj  +  1);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj  +  1);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
217	[BUG]  [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  jTj);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][0]  =  Math.sqrt(covar[i][0]  *  jTj);	  if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
218	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][i]  /  c);	  cols[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
219	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][i]  *  c  +  1);	  cols[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
220	[BUG]  [BUGGY]  errors[1][i]  =  Math.sqrt(covar[1][i]  *  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[1][i]  =  Math.sqrt(covar[1][i]  *  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[1][i]  =  Math.sqrt(covar[1][i]  *  c);	  errors[0][i]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  int  cols  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    cols    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	4	None	replace
222	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i])/  c;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i])/  c;	  errors[i][i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
223	[BUG]  [BUGGY]  errors[0][i]  =  Math.sqrt(covar[0][i])*  c;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0][i]  =  Math.sqrt(covar[0][i])*  c;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0][i]  =  Math.sqrt(covar[0][i])*  c;	  if(covar!=    null)    {    for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i])*    c;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
224	[BUG]  [BUGGY]  int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]);  }	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  >  expected	11	None	replace
225	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    cols    =    getChiSquare();    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	40	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  covar.length  -  2;  --i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  covar.length  -  2;  --i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    2;    ++i)    {    for(int  i  =  0;  i  <  covar.length  -  2;  --i)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  double  c  =  Math.sqrt(covar[i][0]  *  c);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  double  c  =  Math.sqrt(covar[i][0]  *  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    2;    ++i)    {    double  c  =  Math.sqrt(covar[i][0]  *  c);	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covars.length  +  1;  ++i)  {  [CE]  cannot  find  symbol  covars  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covars.length  +  1;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covars.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    cols.length    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  covars	6	None	replace
229	[BUG]  [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][1]  *  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][1]  *  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][0]  =  Math.sqrt(covar[i][1]  *  c);	  errors[i][0]    =    Math.sqrt(covar[i][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
230	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c  +  1);	  cols[i]    =    Math.sqrt(covar[i][i].doubleValue()    *    c);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
231	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  +  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  +  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i].doubleValue()  +  c);	  cols[i]    =    Math.sqrt(covar[i][i].doubleValue()    *    c);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
232	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i][i]  =  Math.sqrt(covar[i][i]);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i][i]    =    Math.sqrt(covar[i][i]);    }    	non-compiled	[CE]  >  expected	25	None	replace
233	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i],  c  *  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[1][i],  c  *  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[1][i],  c  *  c);	  errors[0]    =    Math.sqrt(covar[1][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c);  }  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  c);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i][i].doubleValue());    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  covar.length  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  covar.length  +  1;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  covar.length  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  covar.length  -  1;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  c;  ++i)  {  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  /  1;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	for(int  i  =  0;  i  <  covar.length  /  1;  ++i)  {	  for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  /  1;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  /  1;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length  /  1;  ++i)  {	  for(int    i    =    0;    i    <    covar.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  covar.length  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  covar.length  +  2;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    2;    ++i)    {    for(int  i  =  0;  i  <  covar.length  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length  -  2;  ++i)  {  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    covar.length    -    2;    ++i)    {    c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  }  else  {  errors[i]  =  Math.sqrt(covar[i][i])*  c;  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  }  else  {  errors[i]  =  Math.sqrt(covar[i][i])*  c;  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  }  else  {  errors[i]  =  Math.sqrt(covar[i][i])*  c;  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols;    ++i)    {    }    errors[i]    =    Math.sqrt(covar[i][i])    *    c;    	non-compiled	[CE]  'else'  without  'if'	41	None	replace
244	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c)/  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c)/  2;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  c)/  2;	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
245	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
246	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[i][i]  *  c  +  1);	  cols    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
247	[BUG]  [BUGGY]  cols[0]  =  Math.sqrt(covar[0][0]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[0]  =  Math.sqrt(covar[0][0]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[0]  =  Math.sqrt(covar[0][0]  *  c  +  1);	  cols[0]    =    Math.sqrt(covar[0][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
248	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;	  cols[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    c;    ++i)    {    c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  c;  ++i)  {  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    c;    ++i)    {    c  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[i][i]  *  c);  }	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    c    =    Math.sqrt(covar[i][i]);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
252	[BUG]  [BUGGY]  cols  =  Math.sqrt(covar[0][i],  c  *  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols  =  Math.sqrt(covar[0][i],  c  *  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols  =  Math.sqrt(covar[0][i],  c  *  c);	  cols    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
253	[BUG]  [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][0]  =  Math.sqrt(covar[i][0]  *  c  +  1);	  errors[i][0]    =    Math.sqrt(covar[i][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
254	[BUG]  [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  c)/  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][0]  =  Math.sqrt(covar[i][0]  *  c)/  2;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][0]  =  Math.sqrt(covar[i][0]  *  c)/  2;	  errors[i][0]    =    Math.sqrt(covar[i][0]    *    c);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
255	[BUG]  [BUGGY]  errors[0][i]  =  Math.sqrt(covar[0][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0][i]  =  Math.sqrt(covar[0][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0][i]  =  Math.sqrt(covar[0][i]  *  c  +  1);	  errors[0][i]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  for(int  i  =  1;  i  <  covar.length);  ++i)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  1;  i  <  covar.length;  ++i)  {  for(int  i  =  1;  i  <  covar.length);  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    1;    i    <    covar.length;    ++i)    {    for(int  i  =  1;  i  <  covar.length);  ++i)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
257	[BUG]  [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i],  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  cols[i][i]  =  Math.sqrt(covar[i][i],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	cols[i][i]  =  Math.sqrt(covar[i][i],  c);	  cols[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
258	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i],  c  *  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i],  c  *  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[0][i],  c  *  c);	  errors[0]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
259	[BUG]  [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  *  c  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[0]  =  Math.sqrt(covar[0][i]  *  c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[0]  =  Math.sqrt(covar[0][i]  *  c  +  1);	  errors[0]    =    Math.sqrt(covar[0][i]    *    c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  covar.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  cols;  i  <  covar.length;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  cols;  i  <  covar.length;  ++i)  {  }	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    for(int    i    =    0;    i    <    covar.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
261	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  c)*  c;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  c)*  c;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i],  c)*  c;	  errors[i][i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    for(int  i  =  0;  i  <  rows;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
263	[BUG]  [BUGGY]  int  cols  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  int  cols  =  0;  i  <  cols;  ++i)  {  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	int  cols  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    cols    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	4	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();      [BUGGY]  for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);  }  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	for(int  i  =  0;  i  <  covar.length;  ++i)  {  c  =  Math.sqrt(covar[0][i]);  }	  for(int    i    =    0;    i    <    covar.length;    ++i)    {    c    =    Math.sqrt(covar[0][i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
