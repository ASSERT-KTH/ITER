bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] double chiSquare = 0; [FE] AssertionFailedError [CONTEXT] public double getChiSquare() { [BUGGY] double chiSquare = 0; [BUGGY] for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getChiSquare() { [BUGGY] [BUGGY] double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	
3	[BUG] [BUGGY] for (int i = 0; i < rows; ++i) { [FE] AssertionFailedError [CONTEXT] public double getChiSquare() { double chiSquare = 0; [BUGGY] for (int i = 0; i < rows; ++i) { [BUGGY] final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getChiSquare() { double chiSquare = 0; [BUGGY] [BUGGY] for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	add	
5	[BUG] [BUGGY] final double residual = residuals[i]; [FE] AssertionFailedError [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { [BUGGY] final double residual = residuals[i]; [BUGGY] chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	257	257	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { [BUGGY] [BUGGY] final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	257	257	1	add	
7	[BUG] [BUGGY] chiSquare += residual * residual / residualsWeights[i]; [FE] AssertionFailedError [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; [BUGGY] chiSquare += residual * residual / residualsWeights[i]; [BUGGY] } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; [BUGGY] [BUGGY] chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	
9	[BUG] [BUGGY] return chiSquare; [FE] AssertionFailedError [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } [BUGGY] return chiSquare; [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } [BUGGY] [BUGGY] return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	
11	[BUG] [BUGGY] return inverse.getData(); [FE] AssertionFailedError [CONTEXT] } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); [BUGGY] return inverse.getData(); [BUGGY] } catch (InvalidMatrixException ime) { throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM); } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	294	294	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); [BUGGY] [BUGGY] return inverse.getData(); } catch (InvalidMatrixException ime) { throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM); } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	294	294	1	add	
13	[BUG] [BUGGY] double[] errors = new double[cols]; [FE] AssertionFailedError [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } [BUGGY] double[] errors = new double[cols]; [BUGGY] final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } [BUGGY] [BUGGY] double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	
15	[BUG] [BUGGY] final double c = Math.sqrt(getChiSquare() / (rows - cols)); [FE] AssertionFailedError [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; [BUGGY] final double c = Math.sqrt(getChiSquare() / (rows - cols)); [BUGGY] double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; [BUGGY] [BUGGY] final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	
17	[BUG] [BUGGY] double[][] covar = getCovariances(); [FE] AssertionFailedError [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); [BUGGY] double[][] covar = getCovariances(); [BUGGY] for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); [BUGGY] [BUGGY] double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	add	
19	[BUG] [BUGGY] for (int i = 0; i < errors.length; ++i) { [FE] AssertionFailedError [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); [BUGGY] for (int i = 0; i < errors.length; ++i) { [BUGGY] errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); [BUGGY] [BUGGY] for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	
21	[BUG] [BUGGY] errors[i] = Math.sqrt(covar[i][i]) * c; [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { [BUGGY] errors[i] = Math.sqrt(covar[i][i]) * c; [BUGGY] } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { [BUGGY] [BUGGY] errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	
23	[BUG] [BUGGY] return errors; [FE] AssertionFailedError [CONTEXT] throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } [BUGGY] return errors; [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } [BUGGY] [BUGGY] return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	add	
25	[BUG] [BUGGY] return objectiveEvaluations; [FE] AssertionFailedError [CONTEXT] public int getEvaluations() { [BUGGY] return objectiveEvaluations; [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getEvaluations [RETURN_TYPE] int  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	149	149	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int getEvaluations() { [BUGGY] [BUGGY] return objectiveEvaluations; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getEvaluations [RETURN_TYPE] int  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	149	149	1	add	
27	[BUG] [BUGGY] return jacobianEvaluations; [FE] AssertionFailedError [CONTEXT] public int getJacobianEvaluations() { [BUGGY] return jacobianEvaluations; [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getJacobianEvaluations [RETURN_TYPE] int  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	154	154	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int getJacobianEvaluations() { [BUGGY] [BUGGY] return jacobianEvaluations; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getJacobianEvaluations [RETURN_TYPE] int  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	154	154	1	add	
29	[BUG] [BUGGY] updateJacobian(); [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  [BUGGY] updateJacobian(); [BUGGY]   double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  [BUGGY] [BUGGY] updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	
31	[BUG] [BUGGY] double[][] jTj = new double[cols][cols]; [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  updateJacobian();  [BUGGY] double[][] jTj = new double[cols][cols]; [BUGGY] for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  updateJacobian();  [BUGGY] [BUGGY] double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	add	
33	[BUG] [BUGGY] for (int i = 0; i < cols; ++i) { [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  updateJacobian();  double[][] jTj = new double[cols][cols]; [BUGGY] for (int i = 0; i < cols; ++i) { [BUGGY] for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } }  [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	279	279	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  updateJacobian();  double[][] jTj = new double[cols][cols]; [BUGGY] [BUGGY] for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } }  [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	279	279	1	add	
35	[BUG] [BUGGY] for (int j = i; j < cols; ++j) { [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { [BUGGY] for (int j = i; j < cols; ++j) { [BUGGY] double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try { [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { [BUGGY] [BUGGY] for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try { [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	280	280	1	add	
37	[BUG] [BUGGY] double sum = 0; [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { [BUGGY] double sum = 0; [BUGGY] for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { [BUGGY] [BUGGY] double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	281	281	1	add	
39	[BUG] [BUGGY] for (int k = 0; k < rows; ++k) { [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; [BUGGY] for (int k = 0; k < rows; ++k) { [BUGGY] sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws FunctionEvaluationException, OptimizationException {  updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; [BUGGY] [BUGGY] for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	282	282	1	add	
41	[BUG] [BUGGY] sum += jacobian[k][i] * jacobian[k][j]; [FE] AssertionFailedError [CONTEXT]  updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { [BUGGY] sum += jacobian[k][i] * jacobian[k][j]; [BUGGY] } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { [BUGGY] [BUGGY] sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	283	283	1	add	
43	[BUG] [BUGGY] jTj[i][j] = sum; [FE] AssertionFailedError [CONTEXT] updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } [BUGGY] jTj[i][j] = sum; [BUGGY] jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); return inverse.getData(); } catch (InvalidMatrixException ime) { [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] updateJacobian();  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } [BUGGY] [BUGGY] jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); return inverse.getData(); } catch (InvalidMatrixException ime) { [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	
45	[BUG] [BUGGY] jTj[j][i] = sum; [FE] AssertionFailedError [CONTEXT]  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; [BUGGY] jTj[j][i] = sum; [BUGGY] } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); return inverse.getData(); } catch (InvalidMatrixException ime) { throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM); [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; [BUGGY] [BUGGY] jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); return inverse.getData(); } catch (InvalidMatrixException ime) { throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM); [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	add	
47	[BUG] [BUGGY] RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); [FE] AssertionFailedError [CONTEXT] for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  [BUGGY] RealMatrix inverse =    new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); [BUGGY] new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); return inverse.getData(); } catch (InvalidMatrixException ime) { throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM); } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  [BUGGY] [BUGGY] RealMatrix inverse =    new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); return inverse.getData(); } catch (InvalidMatrixException ime) { throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM); } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	292	293	1	add	
49	[BUG] [BUGGY] if (rows <= cols) { [FE] AssertionFailedError [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { [BUGGY] if (rows <= cols) { [BUGGY] throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	312	312	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { [BUGGY] [BUGGY] if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	312	312	1	add	
51	[BUG] [BUGGY] double criterion = 0; [FE] AssertionFailedError [CONTEXT] public double getRMS() { [BUGGY] double criterion = 0; [BUGGY] for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i]; } return Math.sqrt(criterion / rows); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getRMS [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getRMS() { [BUGGY] [BUGGY] double criterion = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i]; } return Math.sqrt(criterion / rows); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getRMS [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	
53	[BUG] [BUGGY] for (int i = 0; i < rows; ++i) { [FE] AssertionFailedError [CONTEXT] public double getRMS() { double criterion = 0; [BUGGY] for (int i = 0; i < rows; ++i) { [BUGGY] final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i]; } return Math.sqrt(criterion / rows); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getRMS [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getRMS() { double criterion = 0; [BUGGY] [BUGGY] for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i]; } return Math.sqrt(criterion / rows); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getRMS [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	
55	[BUG] [BUGGY] final double residual = residuals[i]; [FE] AssertionFailedError [CONTEXT] public double getRMS() { double criterion = 0; for (int i = 0; i < rows; ++i) { [BUGGY] final double residual = residuals[i]; [BUGGY] criterion += residual * residual * residualsWeights[i]; } return Math.sqrt(criterion / rows); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getRMS [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getRMS() { double criterion = 0; for (int i = 0; i < rows; ++i) { [BUGGY] [BUGGY] final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i]; } return Math.sqrt(criterion / rows); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getRMS [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	
57	[BUG] [BUGGY] criterion += residual * residual * residualsWeights[i]; [FE] AssertionFailedError [CONTEXT] public double getRMS() { double criterion = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; [BUGGY] criterion += residual * residual * residualsWeights[i]; [BUGGY] } return Math.sqrt(criterion / rows); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getRMS [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getRMS() { double criterion = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; [BUGGY] [BUGGY] criterion += residual * residual * residualsWeights[i]; } return Math.sqrt(criterion / rows); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getRMS [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	
59	[BUG] [BUGGY] return Math.sqrt(criterion / rows); [FE] AssertionFailedError [CONTEXT] public double getRMS() { double criterion = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i]; } [BUGGY] return Math.sqrt(criterion / rows); [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getRMS [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getRMS() { double criterion = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i]; } [BUGGY] [BUGGY] return Math.sqrt(criterion / rows); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getRMS [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	245	245	1	add	
61	[BUG] [BUGGY] protected AbstractLeastSquaresOptimizer() { [FE] AssertionFailedError [CONTEXT] [BUGGY] protected AbstractLeastSquaresOptimizer() { [BUGGY] setConvergenceChecker(new SimpleVectorialValueChecker()); setMaxIterations(DEFAULT_MAX_ITERATIONS); setMaxEvaluations(Integer.MAX_VALUE); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] <init> [RETURN_TYPE] AbstractLeastSquaresOptimizer()  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	116	116	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] protected AbstractLeastSquaresOptimizer() { setConvergenceChecker(new SimpleVectorialValueChecker()); setMaxIterations(DEFAULT_MAX_ITERATIONS); setMaxEvaluations(Integer.MAX_VALUE); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] <init> [RETURN_TYPE] AbstractLeastSquaresOptimizer()  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	116	116	1	add	
63	[BUG] [BUGGY] setConvergenceChecker(new SimpleVectorialValueChecker()); [FE] AssertionFailedError [CONTEXT] protected AbstractLeastSquaresOptimizer() { [BUGGY] setConvergenceChecker(new SimpleVectorialValueChecker()); [BUGGY] setMaxIterations(DEFAULT_MAX_ITERATIONS); setMaxEvaluations(Integer.MAX_VALUE); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] <init> [RETURN_TYPE] AbstractLeastSquaresOptimizer()  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	117	117	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected AbstractLeastSquaresOptimizer() { [BUGGY] [BUGGY] setConvergenceChecker(new SimpleVectorialValueChecker()); setMaxIterations(DEFAULT_MAX_ITERATIONS); setMaxEvaluations(Integer.MAX_VALUE); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] <init> [RETURN_TYPE] AbstractLeastSquaresOptimizer()  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	117	117	1	add	
65	[BUG] [BUGGY] setMaxIterations(DEFAULT_MAX_ITERATIONS); [FE] AssertionFailedError [CONTEXT] protected AbstractLeastSquaresOptimizer() { setConvergenceChecker(new SimpleVectorialValueChecker()); [BUGGY] setMaxIterations(DEFAULT_MAX_ITERATIONS); [BUGGY] setMaxEvaluations(Integer.MAX_VALUE); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] <init> [RETURN_TYPE] AbstractLeastSquaresOptimizer()  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	118	118	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected AbstractLeastSquaresOptimizer() { setConvergenceChecker(new SimpleVectorialValueChecker()); [BUGGY] [BUGGY] setMaxIterations(DEFAULT_MAX_ITERATIONS); setMaxEvaluations(Integer.MAX_VALUE); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] <init> [RETURN_TYPE] AbstractLeastSquaresOptimizer()  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	118	118	1	add	
67	[BUG] [BUGGY] setMaxEvaluations(Integer.MAX_VALUE); [FE] AssertionFailedError [CONTEXT] protected AbstractLeastSquaresOptimizer() { setConvergenceChecker(new SimpleVectorialValueChecker()); setMaxIterations(DEFAULT_MAX_ITERATIONS); [BUGGY] setMaxEvaluations(Integer.MAX_VALUE); [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] <init> [RETURN_TYPE] AbstractLeastSquaresOptimizer()  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	119	119	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected AbstractLeastSquaresOptimizer() { setConvergenceChecker(new SimpleVectorialValueChecker()); setMaxIterations(DEFAULT_MAX_ITERATIONS); [BUGGY] [BUGGY] setMaxEvaluations(Integer.MAX_VALUE); } [CLASS] AbstractLeastSquaresOptimizer [METHOD] <init> [RETURN_TYPE] AbstractLeastSquaresOptimizer()  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	119	119	1	add	
69	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] protected AbstractLeastSquaresOptimizer() { setConvergenceChecker(new SimpleVectorialValueChecker()); setMaxIterations(DEFAULT_MAX_ITERATIONS); setMaxEvaluations(Integer.MAX_VALUE); [BUGGY] } [BUGGY]  [CLASS] AbstractLeastSquaresOptimizer [METHOD] <init> [RETURN_TYPE] AbstractLeastSquaresOptimizer()  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	120	120	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected AbstractLeastSquaresOptimizer() { setConvergenceChecker(new SimpleVectorialValueChecker()); setMaxIterations(DEFAULT_MAX_ITERATIONS); setMaxEvaluations(Integer.MAX_VALUE); [BUGGY] [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] <init> [RETURN_TYPE] AbstractLeastSquaresOptimizer()  [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	120	120	1	add	
71	[BUG] [BUGGY] this.maxIterations = maxIterations; [FE] AssertionFailedError [CONTEXT] public void setMaxIterations(int maxIterations) { [BUGGY] this.maxIterations = maxIterations; [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] setMaxIterations [RETURN_TYPE] void  int maxIterations [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	124	124	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void setMaxIterations(int maxIterations) { [BUGGY] [BUGGY] this.maxIterations = maxIterations; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] setMaxIterations [RETURN_TYPE] void  int maxIterations [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	124	124	1	add	
73	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void setMaxIterations(int maxIterations) { this.maxIterations = maxIterations; [BUGGY] } [BUGGY]  [CLASS] AbstractLeastSquaresOptimizer [METHOD] setMaxIterations [RETURN_TYPE] void  int maxIterations [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	125	125	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void setMaxIterations(int maxIterations) { this.maxIterations = maxIterations; [BUGGY] [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] setMaxIterations [RETURN_TYPE] void  int maxIterations [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	125	125	1	add	
75	[BUG] [BUGGY] this.maxEvaluations = maxEvaluations; [FE] AssertionFailedError [CONTEXT] public void setMaxEvaluations(int maxEvaluations) { [BUGGY] this.maxEvaluations = maxEvaluations; [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] setMaxEvaluations [RETURN_TYPE] void  int maxEvaluations [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	139	139	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void setMaxEvaluations(int maxEvaluations) { [BUGGY] [BUGGY] this.maxEvaluations = maxEvaluations; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] setMaxEvaluations [RETURN_TYPE] void  int maxEvaluations [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	139	139	1	add	
77	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void setMaxEvaluations(int maxEvaluations) { this.maxEvaluations = maxEvaluations; [BUGGY] } [BUGGY]  [CLASS] AbstractLeastSquaresOptimizer [METHOD] setMaxEvaluations [RETURN_TYPE] void  int maxEvaluations [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	140	140	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void setMaxEvaluations(int maxEvaluations) { this.maxEvaluations = maxEvaluations; [BUGGY] [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] setMaxEvaluations [RETURN_TYPE] void  int maxEvaluations [VARIABLES] boolean VectorialConvergenceChecker checker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	140	140	1	add	
79	[BUG] [BUGGY] this.checker = convergenceChecker; [FE] AssertionFailedError [CONTEXT] public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) { [BUGGY] this.checker = convergenceChecker; [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] setConvergenceChecker [RETURN_TYPE] void  VectorialConvergenceChecker convergenceChecker [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	159	159	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) { [BUGGY] [BUGGY] this.checker = convergenceChecker; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] setConvergenceChecker [RETURN_TYPE] void  VectorialConvergenceChecker convergenceChecker [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	159	159	1	add	
81	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) { this.checker = convergenceChecker; [BUGGY] } [BUGGY]  [CLASS] AbstractLeastSquaresOptimizer [METHOD] setConvergenceChecker [RETURN_TYPE] void  VectorialConvergenceChecker convergenceChecker [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	160	160	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) { this.checker = convergenceChecker; [BUGGY] [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] setConvergenceChecker [RETURN_TYPE] void  VectorialConvergenceChecker convergenceChecker [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	160	160	1	add	
83	[BUG] [BUGGY] if (++iterations > maxIterations) { [FE] AssertionFailedError [CONTEXT] protected void incrementIterationsCounter() throws OptimizationException { [BUGGY] if (++iterations > maxIterations) { [BUGGY] throw new OptimizationException(new MaxIterationsExceededException(maxIterations)); } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] incrementIterationsCounter [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	173	173	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void incrementIterationsCounter() throws OptimizationException { [BUGGY] [BUGGY] if (++iterations > maxIterations) { throw new OptimizationException(new MaxIterationsExceededException(maxIterations)); } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] incrementIterationsCounter [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	173	173	1	add	
85	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] protected void incrementIterationsCounter() throws OptimizationException { if (++iterations > maxIterations) { throw new OptimizationException(new MaxIterationsExceededException(maxIterations)); } [BUGGY] } [BUGGY]  [CLASS] AbstractLeastSquaresOptimizer [METHOD] incrementIterationsCounter [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void incrementIterationsCounter() throws OptimizationException { if (++iterations > maxIterations) { throw new OptimizationException(new MaxIterationsExceededException(maxIterations)); } [BUGGY] [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] incrementIterationsCounter [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] objective point residuals residualsWeights targetValues double cost double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols iterations jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	add	
87	[BUG] [BUGGY] ++jacobianEvaluations; [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { [BUGGY] ++jacobianEvaluations; [BUGGY] jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { [BUGGY] [BUGGY] ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	184	184	1	add	
89	[BUG] [BUGGY] jacobian = jF.value(point); [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; [BUGGY] jacobian = jF.value(point); [BUGGY] if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; [BUGGY] [BUGGY] jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	add	
91	[BUG] [BUGGY] if (jacobian.length != rows) { [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); [BUGGY] if (jacobian.length != rows) { [BUGGY] throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); [BUGGY] [BUGGY] if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	
93	[BUG] [BUGGY] for (int i = 0; i < rows; i++) { [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } [BUGGY] for (int i = 0; i < rows; i++) { [BUGGY] final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } [BUGGY] [BUGGY] for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	
95	[BUG] [BUGGY] final double[] ji = jacobian[i]; [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { [BUGGY] final double[] ji = jacobian[i]; [BUGGY] final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { [BUGGY] [BUGGY] final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	
97	[BUG] [BUGGY] final double factor = -Math.sqrt(residualsWeights[i]); [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; [BUGGY] final double factor = -Math.sqrt(residualsWeights[i]); [BUGGY] for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	192	192	1	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; [BUGGY] [BUGGY] final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	192	192	1	add	
99	[BUG] [BUGGY] for (int j = 0; j < cols; ++j) { [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); [BUGGY] for (int j = 0; j < cols; ++j) { [BUGGY] ji[j] *= factor; } } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); [BUGGY] [BUGGY] for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	
