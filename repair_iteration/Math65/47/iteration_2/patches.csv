bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cols  =  jF.value(cols,  maxIterations);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  maxIterations);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  maxIterations);	  cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
2	[BUG]  [BUGGY]  cols  =  jF.value(cols,  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  1);	  cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    2);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  2);  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  2);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    2);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  2);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    2);    i++)    {    For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {	  	non-compiled	[CE]  '.class'  expected	13	None	add
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2));  i++)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    2);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2));  i++)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobian  =  jF.value(i);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobian  =  jF.value(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobian  =  jF.value(i);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	72	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(point);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(point);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(i);    	compilable	  [FE]  AssertionFailedError  	72	14	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(point);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(point);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(point);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(i);    	compilable	  [FE]  AssertionFailedError  	72	14	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(i  +  1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(i  +  1);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	72	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  this.residualsWeights.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  this.residualsWeights.length;  i++)  {	  for(int    i    =    0;    i    <    this.residualsWeights;    i++)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.residualsWeights.length;  i++)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  this.residualsWeights.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  this.residualsWeights.length;  i++)  {	  for(int    i    =    0;    i    <    this.residualsWeights;    i++)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.residualsWeights  +  1;  i++)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  this.residualsWeights  +  1;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  this.residualsWeights  +  1;  i++)  {	  for(int    i    =    0;    i    <    this.residualsWeights;    i++)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
14	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  false);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  false);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  false);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
15	[BUG]  [BUGGY]  cols  =  jF.value(cols,  3);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  3);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  3);	  cols    =    jF.value(cols,    2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
16	[BUG]  [BUGGY]  cols  =  jF.value(cols,  4);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  4);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  4);	  cols    =    jF.value(cols,    2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  final  double[][]  jacobian  =  jF.value(i);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  final  double[][]  jacobian  =  jF.value(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  i++)  {  final  double[][]  jacobian  =  jF.value(i);	  for(int    i    =    0;    i    <    cols;    i++)    {    final    double[][]    jacobian    =    jF.value(i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	70	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  i++)  {  final  double[][]  jacobian  =  jF.value(i);  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  i++)  {  final  double[][]  jacobian  =  jF.value(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  columns;  i++)  {  final  double[][]  jacobian  =  jF.value(i);	  for(int    i    =    0;    i    <    cols;    i++)    {    final    double[][]    jacobian    =    jF.value(i);    	non-compiled	[CE]  cannot  find  symbol  columns	70	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(point);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(point);	  for(int    i    =    0;    i    <    cols;    i++)    {    final    double[][]    jacobian    =    jF.value(i);    	compilable	  [FE]  AssertionFailedError  	70	14	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(point);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(point);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(point);	  for(int    i    =    0;    i    <    cols;    i++)    {    final    double[][]    jacobian    =    jF.value(i);    	compilable	  [FE]  AssertionFailedError  	70	14	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(i  +  1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(i  +  1);	  for(int    i    =    0;    i    <    cols;    i++)    {    final    double[][]    jacobian    =    jF.value(i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	70	None	replace
22	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.convergenceChecker();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.convergenceChecker();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.convergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    jF.convergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  i++)  {  int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	non-compiled	[CE]  >  expected	37	None	replace
24	[BUG]  [BUGGY]  int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	non-compiled	[CE]  >  expected	37	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  3;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	48	10	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	48	10	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  1;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	48	13	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  1;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	48	13	replace
29	[BUG]  [BUGGY]  cols  =  Math.min(cols,  cols.length  -  1,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.min(cols,  cols.length  -  1,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.min(cols,  cols.length  -  1,  rows);	  cols    =    Math.min(cols,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
30	[BUG]  [BUGGY]  cols  =  Math.min(cols,  cols.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.min(cols,  cols.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.min(cols,  cols.length  -  2);	  cols    =    Math.min(cols,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
31	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  1);	  int    cols    =    Math.min(residualsWeights,    2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
32	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  3);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  3);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  3);	  int    cols    =    Math.min(residualsWeights,    2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  i  =  0;  i  <  cols;  i++)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  i  =  0;  i  <  cols;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  i++)  {  int  i  =  0;  i  <  cols;  i++)  {	  for(int    i    =    0;    i    <    cols;    i++)    {    int    i    =    0;    i    <    cols;    i++)    {    	non-compiled	[CE]  >  expected	12	None	replace
34	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols;  i++)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  i  =  0;  i  <  cols;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  i  =  0;  i  <  cols;  i++)  {	  for(int    i    =    0;    i    <    cols;    i++)    {    int    i    =    0;    i    <    cols;    i++)    {    	non-compiled	[CE]  >  expected	12	None	replace
35	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights.length,  2);	  int    cols    =    Math.min(residualsWeights.length,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
36	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights.length,  1);	  int    cols    =    Math.min(residualsWeights.length,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
37	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights.length,  0);	  int    cols    =    Math.min(residualsWeights.length,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
38	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  3);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights.length,  3);	  int    cols    =    Math.min(residualsWeights.length,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights,  cols));  i++)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights,  cols));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights,  cols));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    rows));    i++)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.max(residualsWeights.length,  cols));  i++)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.max(residualsWeights.length,  cols));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.max(residualsWeights.length,  cols));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    rows));    i++)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
41	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  row);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  row);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  0,  row);	  int    cols    =    Math.min(residualsWeights,    row);    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
42	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  true);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  true);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  true);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
43	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length);  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    1);    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  3);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  3);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    1);    i++)    {    	compilable	  [FE]  AssertionFailedError  	16	8	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  3);  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  3);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  3);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    1);    i++)    {    	compilable	  [FE]  AssertionFailedError  	16	8	replace
47	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(variable);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(variable);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(variable);	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
48	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getRangeConvergenceChecker();  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getRangeConvergenceChecker();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.getRangeConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
49	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(true);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(true);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(true);	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	55	None	replace
51	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	55	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[]  jacobian[]  =  -Math.sqrt(residualsWeights[i]);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[]  jacobian[]  =  -Math.sqrt(residualsWeights[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[]  jacobian[]  =  -Math.sqrt(residualsWeights[i]);	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  incompatible  types	55	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[]  jacobian[]  =  -Math.sqrt(jacobian[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[]  jacobian[]  =  -Math.sqrt(jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[]  jacobian[]  =  -Math.sqrt(jacobian[i]);	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	55	None	replace
54	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
55	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  false);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  false);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
56	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  true);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  true);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
57	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    For(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	non-compiled	[CE]  '.class'  expected	36	None	replace
59	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    For(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	non-compiled	[CE]  '.class'  expected	36	None	replace
60	[BUG]  [BUGGY]  cols  =  Math.max(cols.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.max(cols.length,  cols.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.max(cols.length,  cols.length);	  cols    =    Math.min(cols.length,    column.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  [CE]  cannot  find  symbol  j  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  j  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    j    <    cols;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  j	90	None	replace
62	[BUG]  [BUGGY]  For(int  i  =  0;  j  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  For(int  i  =  0;  j  <  cols;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	For(int  i  =  0;  j  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    j    <    cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	90	None	replace
63	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    j    <    cols;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  i	90	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	49	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  jacobian.length;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  jacobian.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  jacobian.length;  ++i)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  jacobian.length;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  jacobian.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
67	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jF.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jF.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  jF.length  -  1);	  int    cols    =    Math.min(residualsWeights,    jF.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
68	[BUG]  [BUGGY]  int  cols  =  Math.max(residualsWeights,  jF.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.max(residualsWeights,  jF.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.max(residualsWeights,  jF.length);	  int    cols    =    Math.min(residualsWeights,    jF.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
69	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jF.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jF.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  jF.length  +  1);	  int    cols    =    Math.min(residualsWeights,    jF.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
70	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols.length)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols.length)+  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  cols.length)+  1;	  int    cols    =    Math.min(residualsWeights,    cols.length    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
71	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols.length  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  cols.length  +  2);	  int    cols    =    Math.min(residualsWeights,    cols.length    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
72	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
73	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
74	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this.variance);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this.variance);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this.variance);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
75	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  cols.length  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.min(cols.length,  cols.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.min(cols.length,  cols.length  +  2);	  cols    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
76	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  cols.length)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.min(cols.length,  cols.length)+  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.min(cols.length,  cols.length)+  1;	  cols    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
77	[BUG]  [BUGGY]  cols  =  jF.value(cols,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  cols);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
78	[BUG]  [BUGGY]  cols  =  jF.value(cols,  value);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  value);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  value);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
79	[BUG]  [BUGGY]  int  cols  =  Math.max(residualsWeights,  jacobian.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.max(residualsWeights,  jacobian.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.max(residualsWeights,  jacobian.length);	  int    cols    =    Math.min(residualsWeights,    jacobian.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
80	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  jacobian.length  -  1);	  int    cols    =    Math.min(residualsWeights,    jacobian.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
81	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jacobian.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(cols,  jacobian.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(cols,  jacobian.length);	  int    cols    =    Math.min(residualsWeights,    jacobian.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  final  double[][]  jacobian  =  jF.value(cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  final  double[][]  jacobian  =  jF.value(cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  i++)  {  final  double[][]  jacobian  =  jF.value(cols);	  for(int    i    =    0;    i    <    cols;    i++)    {    final    double[][]    jacobian    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	69	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(rows);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(rows);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  i++)  {  final  double[][]  jacobian  =  jF.value(rows);	  for(int    i    =    0;    i    <    cols;    i++)    {    final    double[][]    jacobian    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	69	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  i++)  {  final  double[][]  jacobian  =  jF.value(cols);  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  i++)  {  final  double[][]  jacobian  =  jF.value(cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  columns;  i++)  {  final  double[][]  jacobian  =  jF.value(cols);	  for(int    i    =    0;    i    <    cols;    i++)    {    final    double[][]    jacobian    =    jF.value(cols);    	non-compiled	[CE]  cannot  find  symbol  columns	69	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  3;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  3;  i++)  {	  for(int    i    =    0;    i    <    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	8	10	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  3;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  3;  i++)  {	  for(int    i    =    0;    i    <    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	8	10	replace
87	[BUG]  [BUGGY]  int  cols  =  Math.min(rows.length,  residualsWeights.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(rows.length,  residualsWeights.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(rows.length,  residualsWeights.length);	  int    cols    =    Math.min(residualsWeights.length,    rows.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
88	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  convergenceChecker.getVariableConvergenceChecker();  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  convergenceChecker.getVariableConvergenceChecker();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  convergenceChecker.getVariableConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    jacobian.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  int  cannot  be  dereferenced	94	None	replace
92	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights[i],  cols);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  final  double[][]  cols  =  jF.value(cols);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  final  double[][]  cols  =  jF.value(cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  i++)  {  final  double[][]  cols  =  jF.value(cols);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    final    double[][]    cols    =    jF.value(cols);    	non-compiled	[CE]  int  cannot  be  dereferenced	75	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  final  double[][]  cols  =  jF.value(cols);  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  final  double[][]  cols  =  jF.value(cols);  }  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  i++)  {  final  double[][]  cols  =  jF.value(cols);  }	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    final    double[][]    cols    =    jF.value(cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
95	[BUG]  [BUGGY]  final  double[][]  cols  =  jF.value(cols);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  final  double[][]  cols  =  jF.value(cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	final  double[][]  cols  =  jF.value(cols);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    final    double[][]    cols    =    jF.value(cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
96	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(cols.length,  cols.length  -  2);	  int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
97	[BUG]  [BUGGY]  int  cols  =  Math.max(cols.length,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.max(cols.length,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.max(cols.length,  cols.length  -  1);	  int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
98	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variables,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variables,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variables,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variables);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
99	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variables);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
100	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variables.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variables.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variables.length);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variables);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
101	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  cols.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.min(cols.length,  cols.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.min(cols.length,  cols.length  -  2);	  cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
102	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  cols.length  -  1,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.min(cols.length,  cols.length  -  1,  cols.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.min(cols.length,  cols.length  -  1,  cols.length);	  cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
103	[BUG]  [BUGGY]  cols  =  Math.max(cols.length,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.max(cols.length,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.max(cols.length,  cols.length  -  1);	  cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
104	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker,  jF.getVariableConvergenceChecker();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker,  jF.getVariableConvergenceChecker();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker,  jF.getVariableConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    jF,    jF.getVariableConvergenceChecker();    	non-compiled	[CE]  ';'  expected	20	None	replace
105	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  jF.getVariableConvergenceChecker());  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  jF.getVariableConvergenceChecker());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  jF.getVariableConvergenceChecker());	  VectorialConvergenceChecker    convergenceChecker    =    jF,    jF.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
106	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF,  jF.getRowConvergenceChecker();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF,  jF.getRowConvergenceChecker();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF,  jF.getRowConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    jF,    jF.getVariableConvergenceChecker();    	non-compiled	[CE]  ';'  expected	20	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2,  cols.length);  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2,  cols.length);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2,  cols.length);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    2);    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
108	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.max(residualsWeights.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  Math.max(residualsWeights.length,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	3	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.max(residualsWeights.length,  cols);  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.max(residualsWeights.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.max(residualsWeights.length,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	3	replace
110	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(cols);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(cols);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
111	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(rows,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(rows,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(rows,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
112	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(colons);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(colons);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(colons);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
113	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variables);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variables);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variables);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
114	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  jacobian.length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  For(int  i  =  0;  i  <  jacobian.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	For(int  i  =  0;  i  <  jacobian.length;  i++)  {	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    For(int    i    =    0;    i    <    jacobian.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	3	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights,  cols);  i++)  {  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    rows);    i++)    {    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	92	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    for(int  i  =  0;  i  <  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    For(int  i  =  0;  i  <  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	47	None	add
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[]  cols  =  -Math.sqrt(residualsWeights[i]);  for(int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[]  cols  =  -Math.sqrt(residualsWeights[i]);  for(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    final  double[]  cols  =  -Math.sqrt(residualsWeights[i]);  for(int  i  =  0;  i  <  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    int  i  =  0;  i  <  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	47	None	add
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[]  cols  =  -Math.sqrt(cols[i]);  for(int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[]  cols  =  -Math.sqrt(cols[i]);  for(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    final  double[]  cols  =  -Math.sqrt(cols[i]);  for(int  i  =  0;  i  <  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
121	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	For(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    For(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	54	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    rows);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    rows);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    rows);    i++)    {    For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {	  	non-compiled	[CE]  '.class'  expected	91	None	add
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  columns);  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  columns);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    rows);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  columns);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  rows);  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  rows);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    rows);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  rows);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
127	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  2);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(cols.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(cols.length,  2);	  int    cols    =    Math.min(cols.length,    row);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
128	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  0);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(cols.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(cols.length,  0);	  int    cols    =    Math.min(cols.length,    row);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    1);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  1);  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  1);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    1);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  1);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    1);    i++)    {    For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {	  	non-compiled	[CE]  '.class'  expected	15	None	add
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights[i].length,  1);  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights[i].length,  1);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    1);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights[i].length,  1);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
133	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols));  i++)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols));    i++)    {    	non-compiled	[CE]  '.class'  expected	77	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows.length;  i++)  {	  for(int    i    =    0;    i    <    cols.length;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
135	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(cols,  cols.length  -  1);	  int    cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
136	[BUG]  [BUGGY]  int  cols  =  Math.max(cols.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.max(cols.length,  cols.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.max(cols.length,  cols.length);	  int    cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  int  i  =  0;  i  <  jacobian.length;  i++)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  int  i  =  0;  i  <  jacobian.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  i++)  {  int  i  =  0;  i  <  jacobian.length;  i++)  {	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    i    =    0;    i    <    jacobian.length;    i++)    {    	non-compiled	[CE]  >  expected	4	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  int  i  =  0;  i  <  jacobian.length;  i++)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  int  i  =  0;  i  <  jacobian.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  i++)  {  int  i  =  0;  i  <  jacobian.length;  i++)  {	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    i    =    0;    i    <    jacobian.length;    i++)    {    	non-compiled	[CE]  >  expected	4	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  for(int  i  =  0;  i  <  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  for(int  i  =  0;  i  <  2;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    i++)    {    for(int  i  =  0;  i  <  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  For(int  i  =  0;  i  <  2;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  For(int  i  =  0;  i  <  2;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    i++)    {    For(int  i  =  0;  i  <  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  final  double[]  cols  =  -Math.sqrt(residualsWeights[i]);  for(int  i  =  0;  i  <  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  final  double[]  cols  =  -Math.sqrt(residualsWeights[i]);  for(int  i  =  0;  i  <  2;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    i++)    {    final  double[]  cols  =  -Math.sqrt(residualsWeights[i]);  for(int  i  =  0;  i  <  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  int  i  =  0;  i  <  2;  i++)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  int  i  =  0;  i  <  2;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    i++)    {    int  i  =  0;  i  <  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  final  double[]  cols  =  -Math.sqrt(cols[i]);  for(int  i  =  0;  i  <  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  final  double[]  cols  =  -Math.sqrt(cols[i]);  for(int  i  =  0;  i  <  2;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    i++)    {    final  double[]  cols  =  -Math.sqrt(cols[i]);  for(int  i  =  0;  i  <  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
144	[BUG]  [BUGGY]  int  cols  =  Math.max(cols.length,  jacobian.length);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.max(cols.length,  jacobian.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.max(cols.length,  jacobian.length);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
145	[BUG]  [BUGGY]  cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
146	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cols);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols)-  1);  i++)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols)-  1);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols)-  1);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights[i],    cols));    i++)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols)+  1);  i++)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols)+  1);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols)+  1);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights[i],    cols));    i++)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
149	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  cols.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  0,  cols.length);	  int    cols    =    Math.min(residualsWeights,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
150	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  cols  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  cols  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  0,  cols  -  1);	  int    cols    =    Math.min(residualsWeights,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
151	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  1,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  1,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  1,  cols);	  int    cols    =    Math.min(residualsWeights,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
152	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  cols.length  -  2);	  int    cols    =    Math.min(residualsWeights,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
153	[BUG]  [BUGGY]  int  cols  =  Math.max(residualsWeights,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.max(residualsWeights,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.max(residualsWeights,  cols.length  -  1);	  int    cols    =    Math.min(residualsWeights,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights[i],    cols);    i++)    {    	compilable	  [FE]  AssertionFailedError  	35	14	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols);  i++)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights[i],    cols);    i++)    {    	compilable	  [FE]  AssertionFailedError  	35	14	replace
156	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.max(residualsWeights[i],  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  Math.max(residualsWeights[i],  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights[i],    cols);    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	15	replace
157	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.max(residualsWeights[i],  cols);  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.max(residualsWeights[i],  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.max(residualsWeights[i],  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights[i],    cols);    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	15	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(resultsWeights[i],  cols);  i++)  {  [CE]  cannot  find  symbol  resultsWeights  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(resultsWeights[i],  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(resultsWeights[i],  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights[i],    cols);    i++)    {    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	35	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    for(int  i  =  0;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  For(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  For(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    For(int  i  =  0;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	45	None	add
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  0;  i  <  rows;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    int  i  =  0;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  >  expected	45	None	add
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  rows);  ++i)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  for(int  i  =  0;  i  <  rows);  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    for(int  i  =  0;  i  <  rows);  ++i)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobian  =  jF.value(cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobian  =  jF.value(cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobian  =  jF.value(cols);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	73	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(rows);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(rows);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(rows);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	73	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(field);  [CE]  cannot  find  symbol  field  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(field);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(field);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(cols);    	non-compiled	[CE]  cannot  find  symbol  field	73	None	replace
166	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols,  cost  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols,  cost  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  cols,  cost  -  1);	  int    cols    =    Math.min(residualsWeights,    cols,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
167	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols,  cost  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols,  cost  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  cols,  cost  +  1);	  int    cols    =    Math.min(residualsWeights,    cols,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
168	[BUG]  [BUGGY]  int  cols  =  Math.max(residualsWeights,  cols,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.max(residualsWeights,  cols,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.max(residualsWeights,  cols,  cost);	  int    cols    =    Math.min(residualsWeights,    cols,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  i  =  0;  i  <  cols;  ++)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  i  =  0;  i  <  cols;  ++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  i++)  {  int  i  =  0;  i  <  cols;  ++)  {	  for(int    i    =    0;    i    <    cols;    i++)    {    int    i    =    0;    i    <    cols;    ++)    {    	non-compiled	[CE]  >  expected	81	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  i++)  {  int  i  =  0;  i  <  cols;  ++)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  i++)  {  int  i  =  0;  i  <  cols;  ++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  columns;  i++)  {  int  i  =  0;  i  <  cols;  ++)  {	  for(int    i    =    0;    i    <    cols;    i++)    {    int    i    =    0;    i    <    cols;    ++)    {    	non-compiled	[CE]  >  expected	81	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  final  double[]  jacobian[]  =  -Math.sqrt(residualsWeights[i]);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  final  double[]  jacobian[]  =  -Math.sqrt(residualsWeights[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  i++)  {  final  double[]  jacobian[]  =  -Math.sqrt(residualsWeights[i]);	  for(int    i    =    0;    i    <    cols;    i++)    {    int    i    =    0;    i    <    cols;    ++)    {    	non-compiled	[CE]  incompatible  types	81	None	replace
172	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols;  ++)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  i  =  0;  i  <  cols;  ++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  i  =  0;  i  <  cols;  ++)  {	  for(int    i    =    0;    i    <    cols;    i++)    {    int    i    =    0;    i    <    cols;    ++)    {    	non-compiled	[CE]  >  expected	81	None	replace
173	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  For(int  i  =  0;  i  <  cols;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	For(int  i  =  0;  i  <  cols;  i++)  {	  for(int    i    =    0;    i    <    cols;    i++)    {    For(int    i    =    0;    i    <    cols;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
174	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	For(int  i  =  0;  i  <  rows;  i++)  {	  for(int    i    =    0;    i    <    cols;    i++)    {    For(int    i    =    0;    i    <    cols;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i]);  [CE]  no  suitable  method  found  for  min(double)  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i]);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	95	None	replace
176	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights[i]);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  int  cols  =  Math.min(residualsWeights[i]);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  int  cols  =  Math.min(residualsWeights[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  i++)  {  int  cols  =  Math.min(residualsWeights[i]);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i]);    	non-compiled	[CE]  int  cannot  be  dereferenced	95	None	replace
178	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
179	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
180	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  point);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  point);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  point);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
181	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
182	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
183	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  false);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  false);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
184	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  dataArea);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  dataArea);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  dataArea);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols  +  1));  i++)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols  +  1));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols  +  1));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols    +    1));    i++)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows  +  1));  i++)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows  +  1));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows  +  1));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols    +    1));    i++)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  Math.min(residualsWeights.length,  cols  +  1));  i++)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  1;  i  <  Math.min(residualsWeights.length,  cols  +  1));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  1;  i  <  Math.min(residualsWeights.length,  cols  +  1));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols    +    1));    i++)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
188	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
189	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
190	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  this);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  this);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  this);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
191	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  this.targetValues);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  this.targetValues);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  this.targetValues);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
192	[BUG]  [BUGGY]  int  cols  =  Math.min(column,  residualsWeights.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(column,  residualsWeights.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(column,  residualsWeights.length);	  int    cols    =    Math.min(residualsWeights.length,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
193	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(null,  null);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(null,  null);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(null,  null);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
194	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(null,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(null,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(null,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
195	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols,  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  cols,  1);	  int    cols    =    Math.min(residualsWeights,    cols,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
196	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  cols,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  cols,  2);	  int    cols    =    Math.min(residualsWeights,    cols,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
197	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(point,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(point,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.value(point,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    jF.value(point);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
198	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.value(cols);	  VectorialConvergenceChecker    convergenceChecker    =    jF.value(point);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
199	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(rows);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.value(rows);	  VectorialConvergenceChecker    convergenceChecker    =    jF.value(point);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
200	[BUG]  [BUGGY]  final  double[][]  cols  =  jF.value(cols);  for(int  i  =  0;  i  <  cols.length;  i++)  {  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  final  double[][]  cols  =  jF.value(cols);  for(int  i  =  0;  i  <  cols.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	final  double[][]  cols  =  jF.value(cols);  for(int  i  =  0;  i  <  cols.length;  i++)  {	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    final    double[][]    cols    =    jF.value(cols);    for(int    i    =    0;    i    <    jacobian.length;    i++)    {    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	74	None	replace
201	[BUG]  [BUGGY]  final  double[][]  cols  =  jF.value(cols);  for(int  i  =  0;  i  <  jacobian.length;  i++)  {  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  final  double[][]  cols  =  jF.value(cols);  for(int  i  =  0;  i  <  jacobian.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	final  double[][]  cols  =  jF.value(cols);  for(int  i  =  0;  i  <  jacobian.length;  i++)  {	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    final    double[][]    cols    =    jF.value(cols);    for(int    i    =    0;    i    <    jacobian.length;    i++)    {    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	74	None	replace
202	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker(variable);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker(variable);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker(variable);	  VectorialConvergenceChecker    convergenceChecker    =    jf.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
203	[BUG]  [BUGGY]  int  cols  =  Math.min(column.length,  residualsWeights.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(column.length,  residualsWeights.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(column.length,  residualsWeights.length);	  int    cols    =    Math.min(residualsWeights,    column.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
204	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  column.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  column.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  column.length  -  1);	  int    cols    =    Math.min(residualsWeights,    column.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
205	[BUG]  [BUGGY]  cols  =  Math.max(cols,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.max(cols,  cols.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.max(cols,  cols.length);	  cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
206	[BUG]  [BUGGY]  cols  =  jF.value(rows,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(rows,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(rows,  cols);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
207	[BUG]  [BUGGY]  cols  =  jF.value(cols,  point);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  point);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  point);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length;  ++i)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  ')'  expected	46	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  ++i)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
211	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols);  i++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  For(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	For(int  i  =  0;  i  <  Math.min(residualsWeights[i],  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights[i],    cols);    i++)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
212	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  this);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  this);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jF,  this);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    1);    i++)    {    int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {	  	non-compiled	[CE]  >  expected	15	None	add
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1));  i++)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    1);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1));  i++)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  1);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    1);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobian  =  jF.value(i);  [CE]  cannot  find  symbol  columns  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobian  =  jF.value(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobian  =  jF.value(i);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(i);    	non-compiled	[CE]  cannot  find  symbol  columns	72	None	replace
217	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  jacobian.length  +  1);	  int    cols    =    Math.min(residualsWeights,    jacobian.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
218	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  ji.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  ji.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  ji.length);	  int    cols    =    Math.min(residualsWeights,    jacobian.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
219	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
220	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
221	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  0,  rows);	  int    cols    =    Math.min(residualsWeights,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
222	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  residualsWeights.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  residualsWeights.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  0,  residualsWeights.length);	  int    cols    =    Math.min(residualsWeights,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
223	[BUG]  [BUGGY]  cols  =  jF.value(cols,  this);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  this);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  this);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
224	[BUG]  [BUGGY]  cols  =  jF.value(cols,  row);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  row);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  row);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  For(int  i  =  0;  i  <  jacobian.length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  For(int  i  =  0;  i  <  jacobian.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  i++)  {  For(int  i  =  0;  i  <  jacobian.length;  i++)  {	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    For(int    i    =    0;    i    <    jacobian.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	3	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  For(int  i  =  0;  i  <  jacobian.length;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  i++)  {  For(int  i  =  0;  i  <  jacobian.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  i++)  {  For(int  i  =  0;  i  <  jacobian.length;  i++)  {	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    For(int    i    =    0;    i    <    jacobian.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	3	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.value(cols);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.value(cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.value(cols);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    final    double[][]    cols    =    jF.value(cols);    	non-compiled	[CE]  int  cannot  be  dereferenced	75	None	replace
228	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jacobian.getVariableConvergenceChecker(0);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jacobian.getVariableConvergenceChecker(0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jacobian.getVariableConvergenceChecker(0);	  VectorialConvergenceChecker    convergenceChecker    =    jacobian.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
229	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(cols.length,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(cols.length,  cols);	  int    cols    =    Math.min(cols.length,    row);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
230	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jF.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jF.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  jF.length  -  2);	  int    cols    =    Math.min(residualsWeights,    jF.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
231	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  jacobian.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  jacobian.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights.length,  jacobian.length  -  1);	  int    cols    =    Math.min(residualsWeights.length,    jacobian.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
232	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker(variate);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker(variate);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker(variate);	  VectorialConvergenceChecker    convergenceChecker    =    jf.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
233	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(function);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(function);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(function);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(residualsWeights);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(cols);    	compilable	  [FE]  AssertionFailedError  	73	14	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(residualsWeights);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  jacobian  =  jF.value(residualsWeights);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(cols);    	compilable	  [FE]  AssertionFailedError  	73	14	replace
236	[BUG]  [BUGGY]  int  i  =  0;  i  <  jacobian.length;  i++)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  i  =  0;  i  <  jacobian.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  i  =  0;  i  <  jacobian.length;  i++)  {	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    i    =    0;    i    <    jacobian.length;    i++)    {    	non-compiled	[CE]  >  expected	4	None	replace
237	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF.value(rows));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF.value(rows));  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF.value(rows));	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length));  i++)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length));  i++)  {	  for(int    i    =    0;    i    <    2;    i++)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
239	[BUG]  [BUGGY]  final  double[][]  cols  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  i++)  {  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  final  double[][]  cols  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	final  double[][]  cols  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  i++)  {	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    final    double[][]    cols    =    jF.value(cols);    for(int    i    =    0;    i    <    jacobian.length;    i++)    {    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	74	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    rows);    i++)    {    int  i  =  0;  i  <  Math.min(residualsWeights.length,  rows);  i++)  {	  	non-compiled	[CE]  >  expected	91	None	add
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.value(i);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.value(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    final  double[][]  cols  =  jF.value(i);	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
242	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(variables);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(variables);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.value(variables);	  VectorialConvergenceChecker    convergenceChecker    =    jF.value(point);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  int  cols  =  Math.min(residualsWeights[i]);  [CE]  no  suitable  method  found  for  min(double)  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  int  cols  =  Math.min(residualsWeights[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  i++)  {  int  cols  =  Math.min(residualsWeights[i]);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	95	None	replace
244	[BUG]  [BUGGY]  cols  =  Math.min(cols,  cols.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.min(cols,  cols.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.min(cols,  cols.length  +  1);	  cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
245	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jf.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jf.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  jf.length);	  int    cols    =    Math.min(residualsWeights,    column.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
246	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance,  false);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance,  false);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols  +  1);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols  +  1);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols    +    1));    i++)    {    	compilable	  [FE]  AssertionFailedError  	56	4	replace
248	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols  +  1);  i++)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols  +  1);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols  +  1);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols    +    1));    i++)    {    	compilable	  [FE]  AssertionFailedError  	56	4	replace
249	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights,  cols  +  1));  i++)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights,  cols  +  1));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights,  cols  +  1));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols    +    1));    i++)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  i++)  {  int  i  =  0;  i  <  cols;  i++)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  i++)  {  int  i  =  0;  i  <  cols;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  columns;  i++)  {  int  i  =  0;  i  <  cols;  i++)  {	  for(int    i    =    0;    i    <    cols;    i++)    {    int    i    =    0;    i    <    cols;    i++)    {    	non-compiled	[CE]  >  expected	12	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    For(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	54	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(cols,  residualsWeights.length));  i++)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(cols,  residualsWeights.length));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(cols,  residualsWeights.length));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    rows));    i++)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
253	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  null);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  null);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
254	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF,  jF.value(rows);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF,  jF.value(rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF,  jF.value(rows);	  VectorialConvergenceChecker    convergenceChecker    =    jF,    jF.getVariableConvergenceChecker();    	non-compiled	[CE]  ';'  expected	20	None	replace
255	[BUG]  [BUGGY]  cols  =  jF.value(cols,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(cols,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(cols,  0);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
256	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    2);    i++)    {    int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {	  	non-compiled	[CE]  >  expected	13	None	add
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  3);  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  3);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    2);    i++)    {    for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  3);  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length));  ++i)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length));  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length));  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
260	[BUG]  [BUGGY]  int  cols  =  Math.max(cols,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.max(cols,  cols.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.max(cols,  cols.length);	  int    cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  jF.value(cols);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  jF.value(cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    final  double[][]  cols  =  jF.value(cols);	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  jF.value(i);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  cols  =  jF.value(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    final  double[][]  cols  =  jF.value(i);	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
263	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  column.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  Math.min(cols.length,  column.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  Math.min(cols.length,  column.length  -  1);	  cols    =    Math.min(cols.length,    column.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
264	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  null);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  null);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  null);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
265	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(variables);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(variables);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(variables);	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	55	None	replace
267	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  0,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  0,  cost);	  int    cols    =    Math.min(residualsWeights,    cols,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    For(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	non-compiled	[CE]  '.class'  expected	36	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  possible  loss  of  precision	94	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  jacobian.length);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  jacobian.length);  }  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  jacobian.length);  }	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
271	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  jacobian.length);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  jacobian.length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  jacobian.length);	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  possible  loss  of  precision	94	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  final  double[][]  cols  =  jF.value(cols);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  final  double[][]  cols  =  jF.value(cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    i++)    {    final  double[][]  cols  =  jF.value(cols);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  final  double[][]  cols  =  jF.value(i);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  final  double[][]  cols  =  jF.value(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    i++)    {    final  double[][]  cols  =  jF.value(i);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
274	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  rows.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  rows.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  rows.length  -  1);	  int    cols    =    Math.min(residualsWeights,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols  *  1));  i++)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols  *  1));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols  *  1));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols    +    1));    i++)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length  +  1));  i++)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length  +  1));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols.length  +  1));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols    +    1));    i++)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  for(int  i  =  0;  i  <  3;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  for(int  i  =  0;  i  <  3;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    i++)    {    for(int  i  =  0;  i  <  3;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  for(int  i  =  0;  i  <  2)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  for(int  i  =  0;  i  <  2)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    i++)    {    for(int  i  =  0;  i  <  2)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
279	[BUG]  [BUGGY]  cols  =  jF.value(field,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  cols  =  jF.value(field,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	cols  =  jF.value(field,  cols);	  cols    =    jF.value(point,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length,  cols);  i++)  {  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	34	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(jacobian.length,  cols);  i++)  {  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(jacobian.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.sqrt(jacobian.length,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	34	None	replace
282	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    i    =    0;    i    <    cols);    ++i)    {    	non-compiled	[CE]  '.class'  expected	89	None	replace
283	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  jacobian.length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  jacobian.length;  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  jacobian.length;  i++)  {	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    For(int    i    =    0;    i    <    jacobian.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	3	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  int  cols  =  Math.min(residualsWeights.length,  2);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.min(residualsWeights.length,  2);  i++)  {  int  cols  =  Math.min(residualsWeights.length,  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    2);    i++)    {    int  cols  =  Math.min(residualsWeights.length,  2);	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
285	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  ji.column.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  ji.column.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  ji.column.length);	  int    cols    =    Math.min(residualsWeights,    column.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
286	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length  -  1);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
287	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jacobian);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jacobian);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(jacobian);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobian  =  jF.value(point);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  jacobian  =  jF.value(point);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    rows;    ++i)    {    final  double[][]  jacobian  =  jF.value(point);	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
289	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(residualsWeights[i],  cols);  i++)  {  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(residualsWeights[i],  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.sqrt(residualsWeights[i],  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights[i],    cols);    i++)    {    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	35	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(jacobian[i],  cols);  i++)  {  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(jacobian[i],  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.sqrt(jacobian[i],  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights[i],    cols);    i++)    {    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	35	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length,  cols));  i++)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length,  cols));  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length,  cols));  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols));    i++)    {    	non-compiled	[CE]  ';'  expected	77	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  i++)  {  For(int  i  =  0;  i  <  Math.min(residualsWeights.length,  cols);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    For(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	non-compiled	[CE]  '.class'  expected	36	None	replace
293	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  null);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  null);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
294	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  reductions);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  reductions);	  int    cols    =    Math.min(residualsWeights,    row);    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
295	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  rows.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(cols.length,  rows.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(cols.length,  rows.length  -  1);	  int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobian  =  jF.value(cols);  [CE]  cannot  find  symbol  columns  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobian  =  jF.value(cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  jacobian  =  jF.value(cols);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(cols);    	non-compiled	[CE]  cannot  find  symbol  columns	73	None	replace
297	[BUG]  [BUGGY]  final  double[][]  jacobian  =  jF.value(cols);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  final  double[][]  jacobian  =  jF.value(cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	final  double[][]  jacobian  =  jF.value(cols);	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    jacobian    =    jF.value(cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  rows;  i++)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  int  cols  =  Math.min(residualsWeights[i],  cols);  }	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
300	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variants);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variants);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variants);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
301	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF.value(rows),  jF.value(cols));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF.value(rows),  jF.value(cols));  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF.value(rows),  jF.value(cols));	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  Math.min(residualsWeights[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  i++)  {  Math.min(residualsWeights[i]);  }  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols;  i++)  {  Math.min(residualsWeights[i]);  }	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    int    cols    =    Math.min(residualsWeights[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
303	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  check.getVariableConvergenceChecker();  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  check.getVariableConvergenceChecker();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  check.getVariableConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    jacobian.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
304	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jacobian.getVariableConvergenceChecker(variable);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jacobian.getVariableConvergenceChecker(variable);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jacobian.getVariableConvergenceChecker(variable);	  VectorialConvergenceChecker    convergenceChecker    =    jacobian.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.value(cols);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.value(cols);  }  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.value(cols);  }	  for(int    i    =    0;    i    <    jacobian.length;    i++)    {    final    double[][]    cols    =    jF.value(cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
306	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(null,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(null,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(null,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
307	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights,  jacobian.length  -  2);	  int    cols    =    Math.min(residualsWeights,    jacobian.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
308	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  jacobian.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  int  cols  =  Math.min(residualsWeights.length,  jacobian.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	int  cols  =  Math.min(residualsWeights.length,  jacobian.length  +  1);	  int    cols    =    Math.min(residualsWeights.length,    jacobian.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	add	for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	compilable	  [FE]  AssertionFailedError  	37	12	replace
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length);  i++)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length);  i++)  {  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int  i  =  0;  i  <  Math.sqrt(residualsWeights.length);  i++)  {	  for(int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    int    i    =    0;    i    <    Math.min(residualsWeights.length,    cols);    i++)    {    	compilable	  [FE]  AssertionFailedError  	37	12	replace
311	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobian  =  jF.value(point);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobian  =  jF.value(point);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    final  double[][]  jacobian  =  jF.value(point);	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobian  =  jF.value(rows);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  jacobian  =  jF.value(rows);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    final  double[][]  jacobian  =  jF.value(rows);	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
313	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance,  null);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	190	190	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance,  null);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
